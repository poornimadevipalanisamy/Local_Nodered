[
    {
        "id": "a8155172fceaa888",
        "type": "tab",
        "label": "POC",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "3657ba5f94aa31e1",
        "type": "tab",
        "label": "Test",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "18eeef1213ab0970",
        "type": "tab",
        "label": "Method 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "9d5e8229012b9c73",
        "type": "tab",
        "label": "Method 2",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "da53a1c7cff4af8c",
        "type": "tab",
        "label": "Sample DGR",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "fca45c0d043a12a2",
        "type": "tab",
        "label": "postman",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "7283d7a585b3b2fb",
        "type": "tab",
        "label": "graph",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "430bd2ba824cc59c",
        "type": "tab",
        "label": "bearer access",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "f6f2187d.f17ca8",
        "type": "tab",
        "label": "Grafana on NR",
        "disabled": true,
        "info": ""
    },
    {
        "id": "18b91be20995c6da",
        "type": "tab",
        "label": "hysolwin",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "79ee2dfb383828d4",
        "type": "tab",
        "label": "Specific yield",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "fd7753ff7b352a7c",
        "type": "tab",
        "label": "Flow 3",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "a47c23bb89e240ba",
        "type": "tab",
        "label": "EAE_DAY SPIKE",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "1201a4facbd94fb3",
        "type": "tab",
        "label": "Flow 2",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "24ecb8a4bab90bf3",
        "type": "tab",
        "label": "Array meter SFTP",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "8339e6cdf0c78673",
        "type": "tab",
        "label": "OPCUA Client",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "fd899b3a7aec433c",
        "type": "tab",
        "label": "OPCUA updated",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "f82141e0c7b6fb28",
        "type": "tab",
        "label": "csv",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "f151e7656dc1a5cc",
        "type": "tab",
        "label": "report",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "307b45b033eda81a",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "3bdf067d13d3638c",
        "type": "tab",
        "label": "Flow 2",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "03603df4c981df55",
        "type": "influxdb",
        "hostname": "192.168.5.125",
        "port": "30086",
        "protocol": "http",
        "database": "TATA_CCRA",
        "name": "",
        "usetls": false,
        "tls": "c563e3c6072c32be",
        "influxdbVersion": "1.x",
        "url": "http://localhost:8086",
        "rejectUnauthorized": true
    },
    {
        "id": "ed4f779dff97f1b7",
        "type": "influxdb",
        "hostname": "192.168.5.125",
        "port": "30086",
        "protocol": "http",
        "database": "Report",
        "name": "",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "1.x",
        "url": "http://192.168.5.125:30086",
        "rejectUnauthorized": true
    },
    {
        "id": "c563e3c6072c32be",
        "type": "tls-config",
        "name": "",
        "cert": "",
        "key": "",
        "ca": "",
        "certname": "",
        "keyname": "",
        "caname": "",
        "servername": "",
        "verifyservercert": false,
        "alpnprotocol": ""
    },
    {
        "id": "1946c585afdca4d4",
        "type": "influxdb",
        "hostname": "http://34.93.63.75",
        "port": "8086",
        "protocol": "http",
        "database": "database",
        "name": "",
        "usetls": false,
        "tls": "c563e3c6072c32be",
        "influxdbVersion": "2.0",
        "url": "http://iplon-pvindia.com:31086",
        "rejectUnauthorized": true
    },
    {
        "id": "3062a34b40c5b07a",
        "type": "OpcUa-Endpoint",
        "endpoint": "opc.tcp://192.168.5.50:4240/iSolar/scaback_csv/",
        "secpol": "Basic256Sha256",
        "secmode": "SignAndEncrypt",
        "none": false,
        "login": true,
        "usercert": false,
        "usercertificate": "",
        "userprivatekey": ""
    },
    {
        "id": "3846be01084042fa",
        "type": "ui_tab",
        "name": "Home",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "9f1b732380d77165",
        "type": "ui_base",
        "theme": {
            "name": "theme-light",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#0094CE",
                    "value": "#0094CE",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#0094CE",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#1bbfff",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#0094ce",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "1d6351536dedf5bf",
        "type": "ui_group",
        "name": "Default",
        "tab": "3846be01084042fa",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "7f71acda637c7228",
        "type": "ui_group",
        "name": "Service status",
        "tab": "7bb7991e61fd25e5",
        "order": 1,
        "disp": true,
        "width": 8,
        "collapse": false,
        "className": ""
    },
    {
        "id": "a25745f191dc24a3",
        "type": "ui_group",
        "name": "Version",
        "tab": "7bb7991e61fd25e5",
        "order": 2,
        "disp": true,
        "width": "11",
        "collapse": false,
        "className": ""
    },
    {
        "id": "7bb7991e61fd25e5",
        "type": "ui_tab",
        "name": "FAT",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "20d35b4d3a41c3ed",
        "type": "file in",
        "z": "a8155172fceaa888",
        "name": "",
        "filename": "/home/iplon/Desktop/poornima/generationreport.jpg",
        "filenameType": "str",
        "format": "",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 970,
        "y": 180,
        "wires": [
            [
                "08771731dac1d129"
            ]
        ]
    },
    {
        "id": "62faa9410fbef54f",
        "type": "file",
        "z": "a8155172fceaa888",
        "name": "",
        "filename": "/home/iplon/Desktop/poornima/pdf1.pdf",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 960,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "25cd73bae9a5e5be",
        "type": "pdfmake",
        "z": "a8155172fceaa888",
        "name": "",
        "outputType": "Buffer",
        "inputProperty": "payload",
        "options": "{}",
        "outputProperty": "payload",
        "x": 700,
        "y": 540,
        "wires": [
            [
                "62faa9410fbef54f"
            ]
        ]
    },
    {
        "id": "4170bfac944bc5aa",
        "type": "puppeteer-browser-launch",
        "z": "a8155172fceaa888",
        "timeout": "60000",
        "slowMo": 0,
        "headless": true,
        "debugport": 0,
        "devtools": true,
        "name": "",
        "x": 200,
        "y": 60,
        "wires": [
            [
                "1f2440ca402bfffa"
            ]
        ]
    },
    {
        "id": "49134b3a3d943efe",
        "type": "jimp-image",
        "z": "a8155172fceaa888",
        "name": "",
        "data": "payload",
        "dataType": "msg",
        "ret": "img",
        "parameter1": "/home/iplon/Desktop/poornima/generationreport.jpg",
        "parameter1Type": "str",
        "parameter2": "",
        "parameter2Type": "msg",
        "parameter3": "",
        "parameter3Type": "msg",
        "parameter4": "",
        "parameter4Type": "msg",
        "parameter5": "",
        "parameter5Type": "msg",
        "parameter6": "",
        "parameter6Type": "msg",
        "parameter7": "",
        "parameter7Type": "msg",
        "parameter8": "",
        "parameter8Type": "msg",
        "sendProperty": "payload",
        "sendPropertyType": "msg",
        "parameterCount": 1,
        "jimpFunction": "write",
        "selectedJimpFunction": {
            "name": "write",
            "fn": "write",
            "description": "Write to file. NOTE: You can specify an alternative file extension type to change the type. Currently support types are jpg, png, bmp.",
            "parameters": [
                {
                    "name": "filename",
                    "type": "str",
                    "required": true,
                    "hint": "Name of the file",
                    "defaultType": "str"
                }
            ]
        },
        "x": 670,
        "y": 180,
        "wires": [
            [
                "20d35b4d3a41c3ed"
            ]
        ]
    },
    {
        "id": "1f2440ca402bfffa",
        "type": "puppeteer-page-goto",
        "z": "a8155172fceaa888",
        "name": "Generation report",
        "url": "http://localhost:3000/d/OXeGgYnVk/inv_1?orgId=2&refresh=5m",
        "urltype": "str",
        "waitUntil": "networkidle0",
        "x": 390,
        "y": 60,
        "wires": [
            [
                "4995c4321714c7f0"
            ]
        ]
    },
    {
        "id": "9fea8f7354213429",
        "type": "jimp-image",
        "z": "a8155172fceaa888",
        "name": "",
        "data": "payload",
        "dataType": "msg",
        "ret": "img",
        "parameter1": "/home/iplon/Desktop/poornima/reports.jpg",
        "parameter1Type": "str",
        "parameter2": "",
        "parameter2Type": "msg",
        "parameter3": "",
        "parameter3Type": "msg",
        "parameter4": "",
        "parameter4Type": "msg",
        "parameter5": "",
        "parameter5Type": "msg",
        "parameter6": "",
        "parameter6Type": "msg",
        "parameter7": "",
        "parameter7Type": "msg",
        "parameter8": "",
        "parameter8Type": "msg",
        "sendProperty": "payload",
        "sendPropertyType": "msg",
        "parameterCount": 1,
        "jimpFunction": "write",
        "selectedJimpFunction": {
            "name": "write",
            "fn": "write",
            "description": "Write to file. NOTE: You can specify an alternative file extension type to change the type. Currently support types are jpg, png, bmp.",
            "parameters": [
                {
                    "name": "filename",
                    "type": "str",
                    "required": true,
                    "hint": "Name of the file",
                    "defaultType": "str"
                }
            ]
        },
        "x": 690,
        "y": 280,
        "wires": [
            [
                "c7e29dc6e8b1c04f"
            ]
        ]
    },
    {
        "id": "1ccd68a1ed6a6c59",
        "type": "puppeteer-page-goto",
        "z": "a8155172fceaa888",
        "name": "reports",
        "url": "https://snapshots.raintank.io/dashboard/snapshot/J890G8iVTCLOKs6lAnBVR5U4bH60GJ0P",
        "urltype": "str",
        "waitUntil": "networkidle0",
        "x": 340,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "c7e29dc6e8b1c04f",
        "type": "file in",
        "z": "a8155172fceaa888",
        "name": "",
        "filename": "/home/iplon/Desktop/poornima/reports.jpg",
        "filenameType": "str",
        "format": "",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 860,
        "y": 260,
        "wires": [
            [
                "bfae680447b91ccc"
            ]
        ]
    },
    {
        "id": "28364e4bc6caf3a7",
        "type": "puppeteer-browser-launch",
        "z": "a8155172fceaa888",
        "timeout": "60000",
        "slowMo": 0,
        "headless": true,
        "debugport": 0,
        "devtools": true,
        "name": "",
        "x": 180,
        "y": 260,
        "wires": [
            [
                "1ccd68a1ed6a6c59"
            ]
        ]
    },
    {
        "id": "ca6f33ac30295919",
        "type": "template",
        "z": "a8155172fceaa888",
        "name": "Wattnexx",
        "field": "payload",
        "fieldType": "msg",
        "format": "json",
        "syntax": "mustache",
        "template": "{\n    \"pageSize\": \"A4\",\n    \"pageOrientation\": \"portrait\",\n    \"pageMargins\": [\n        40,\n        60,\n        40,\n        60\n    ],\n    \"info\": {\n        \"title\": \"Wattnexx reports\",\n        \"author\": \"Poornima & Sujiritha\",\n        \"subject\": \"Monthly\",\n        \"keywords\": \"Micro Grid\"\n    },\n    \"title\":{\n        \"h1\":\"Hysolwin inverter reports\",\n        \"text-align\": \"center\",\n        \"fontWeight\": \"bold\"\n    },\n    \"content\": [\n        {\n            \"title\":\"Wattnexx reports\",\n            \"style\": \"bold\",\n            \"alignment\": \"center\"\n        },\n        \"\\n\",\n        \"\\n\",\n        \"1.Aim : \",\n        \"\\n\",\n        \"This report contains the details of Weekly,monthly and yearly reports for your reference.\",\n        \"\\n\",\n        \"2. Generation reports :\",\n        \"\\n\",\n        \"This screen shows the generation devices like inverter. Here we get last Month generation data. Also, that screen data directly export to csv format.\",\n        \"\\n\",\n        {\n            \"image\": \"data:image/jpeg;base64,{{{payload.generation}}}\",\n            \"alignment\": \"center\",\n            \"width\": 300\n        },\n        \"\\n\",\n        \"3.Reports :\",\n        \"This shows monthly & yearly data\",\n        \"\\n\",\n        {\n            \"image\": \"data:image/jpeg;base64,{{{payload.reports}}}\",\n            \"alignment\": \"center\",\n            \"width\": 300\n        }\n    ]\n}",
        "output": "json",
        "x": 540,
        "y": 520,
        "wires": [
            [
                "25cd73bae9a5e5be"
            ]
        ]
    },
    {
        "id": "f4c634e457adfd9b",
        "type": "base64",
        "z": "a8155172fceaa888",
        "name": "",
        "action": "str",
        "property": "payload",
        "x": 1260,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "bfae680447b91ccc",
        "type": "base64",
        "z": "a8155172fceaa888",
        "name": "",
        "action": "str",
        "property": "payload",
        "x": 1240,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "72535c4fc8c52572",
        "type": "change",
        "z": "a8155172fceaa888",
        "name": "reports",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "reports",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 220,
        "y": 560,
        "wires": [
            [
                "3f4271d49fe6fa29"
            ]
        ]
    },
    {
        "id": "69c6c5305a527dbc",
        "type": "change",
        "z": "a8155172fceaa888",
        "name": "generation",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "generation",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 230,
        "y": 460,
        "wires": [
            [
                "3f4271d49fe6fa29"
            ]
        ]
    },
    {
        "id": "3f4271d49fe6fa29",
        "type": "function",
        "z": "a8155172fceaa888",
        "name": "combine",
        "func": "context.data = context.data || {};\nswitch(msg.topic){\n    case \"generation\":\n        context.data.generation = msg.payload;\n        msg = null;\n        break;\n    case \"reports\":\n        context.data.reports = msg.payload;\n        msg = null;\n        break;\n}\nif(context.data.generation != null && context.data.reports != null){\n    var data_combine = {\n        \"generation\": context.data.generation,\n        \"reports\": context.data.reports\n       \n    }\n    context.data = null\n    return {payload: data_combine};\n}  ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 520,
        "wires": [
            [
                "ca6f33ac30295919"
            ]
        ]
    },
    {
        "id": "08771731dac1d129",
        "type": "debug",
        "z": "a8155172fceaa888",
        "name": "debug 10",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 920,
        "y": 100,
        "wires": []
    },
    {
        "id": "a3d7509f9262f088",
        "type": "change",
        "z": "a8155172fceaa888",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 720,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "4995c4321714c7f0",
        "type": "puppeteer-page-screenshot",
        "z": "a8155172fceaa888",
        "name": "",
        "fullpage": true,
        "x": 610,
        "y": 100,
        "wires": [
            [
                "08771731dac1d129"
            ]
        ]
    },
    {
        "id": "cc0c9572683664c3",
        "type": "inject",
        "z": "a8155172fceaa888",
        "name": "https://my.iteccrm.com/",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "payload": "https://my.iteccrm.com/",
        "payloadType": "str",
        "x": 360,
        "y": 680,
        "wires": [
            [
                "64477b6f576450e0"
            ]
        ]
    },
    {
        "id": "64477b6f576450e0",
        "type": "credentials",
        "z": "a8155172fceaa888",
        "name": "",
        "props": [
            {
                "value": "username",
                "type": "msg"
            },
            {
                "value": "password",
                "type": "msg"
            }
        ],
        "x": 360,
        "y": 780,
        "wires": [
            [
                "545aebbde922dbd9"
            ]
        ]
    },
    {
        "id": "545aebbde922dbd9",
        "type": "nbrowser",
        "z": "a8155172fceaa888",
        "name": "",
        "methods": [
            {
                "name": "gotoURL",
                "func": "goto",
                "params": [
                    {
                        "type": "msg",
                        "value": "payload",
                        "typeDefault": "str"
                    }
                ]
            },
            {
                "name": "type",
                "func": "type",
                "params": [
                    {
                        "type": "str",
                        "value": "poornima@iplon.in",
                        "typeDefault": "str"
                    },
                    {
                        "type": "msg",
                        "value": "username",
                        "typeDefault": "str"
                    }
                ]
            },
            {
                "name": "type",
                "func": "type",
                "params": [
                    {
                        "type": "str",
                        "value": "iplon321",
                        "typeDefault": "str"
                    },
                    {
                        "type": "msg",
                        "value": "password",
                        "typeDefault": "str"
                    }
                ]
            },
            {
                "name": "click",
                "func": "click",
                "params": [
                    {
                        "type": "str",
                        "value": "#wp-submit",
                        "typeDefault": "str"
                    }
                ]
            },
            {
                "name": "wait",
                "func": "wait",
                "params": [
                    {
                        "type": "str",
                        "value": "#welcome-panel",
                        "typeDefault": "str"
                    }
                ]
            }
        ],
        "prop": "nbrowser",
        "propout": "payload",
        "object": "msg",
        "objectout": "msg",
        "close": false,
        "show": true,
        "ssl": true,
        "outputs": 1,
        "x": 450,
        "y": 840,
        "wires": [
            [
                "d09f577139722df0"
            ]
        ]
    },
    {
        "id": "c8e9a4630ef85414",
        "type": "debug",
        "z": "a8155172fceaa888",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 830,
        "y": 700,
        "wires": []
    },
    {
        "id": "d09f577139722df0",
        "type": "puppeteer-page-screenshot",
        "z": "a8155172fceaa888",
        "name": "",
        "x": 630,
        "y": 840,
        "wires": [
            [
                "c8e9a4630ef85414"
            ]
        ]
    },
    {
        "id": "cbb6f80da95a5ff4",
        "type": "credentials",
        "z": "a8155172fceaa888",
        "name": "",
        "props": [
            {
                "value": "username",
                "type": "msg"
            },
            {
                "value": "password",
                "type": "msg"
            }
        ],
        "x": 190,
        "y": 120,
        "wires": [
            [
                "c4335432dff32aee"
            ]
        ]
    },
    {
        "id": "c4335432dff32aee",
        "type": "nbrowser",
        "z": "a8155172fceaa888",
        "name": "",
        "methods": [
            {
                "name": "gotoURL",
                "func": "goto",
                "params": [
                    {
                        "type": "msg",
                        "value": "payload",
                        "typeDefault": "str"
                    }
                ]
            },
            {
                "name": "type",
                "func": "type",
                "params": [
                    {
                        "type": "str",
                        "value": "poornima@iplon.in",
                        "typeDefault": "str"
                    },
                    {
                        "type": "msg",
                        "value": "username",
                        "typeDefault": "str"
                    }
                ]
            },
            {
                "name": "type",
                "func": "type",
                "params": [
                    {
                        "type": "str",
                        "value": "iplon321",
                        "typeDefault": "str"
                    },
                    {
                        "type": "msg",
                        "value": "password",
                        "typeDefault": "str"
                    }
                ]
            },
            {
                "name": "click",
                "func": "click",
                "params": [
                    {
                        "type": "str",
                        "value": "#wp-submit",
                        "typeDefault": "str"
                    }
                ]
            },
            {
                "name": "wait",
                "func": "wait",
                "params": [
                    {
                        "type": "str",
                        "value": "#welcome-panel",
                        "typeDefault": "str"
                    }
                ]
            }
        ],
        "prop": "nbrowser",
        "propout": "payload",
        "object": "msg",
        "objectout": "msg",
        "close": false,
        "show": true,
        "ssl": true,
        "outputs": 1,
        "x": 380,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "7c2696f0905adf6e",
        "type": "inject",
        "z": "a8155172fceaa888",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 81,
        "y": 203,
        "wires": [
            [
                "084978592d36e80c"
            ]
        ]
    },
    {
        "id": "084978592d36e80c",
        "type": "http request",
        "z": "a8155172fceaa888",
        "name": "",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://admin:admin@localhost:3000",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 270,
        "y": 200,
        "wires": [
            [
                "4170bfac944bc5aa"
            ]
        ]
    },
    {
        "id": "81bec655ab716a94",
        "type": "screenshot",
        "z": "a8155172fceaa888",
        "name": "",
        "url": "http://localhost:3000",
        "path": "",
        "x": 490,
        "y": 180,
        "wires": [
            [
                "49134b3a3d943efe"
            ]
        ]
    },
    {
        "id": "bad130f9795a26b9",
        "type": "inject",
        "z": "a8155172fceaa888",
        "name": "https://github.com/login",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "payload": "https://github.com/login",
        "payloadType": "str",
        "x": 220,
        "y": 1040,
        "wires": [
            [
                "5805bcdf2b812f6f"
            ]
        ]
    },
    {
        "id": "5805bcdf2b812f6f",
        "type": "credentials",
        "z": "a8155172fceaa888",
        "name": "",
        "props": [
            {
                "value": "username",
                "type": "msg"
            },
            {
                "value": "password",
                "type": "msg"
            }
        ],
        "x": 450,
        "y": 1040,
        "wires": [
            [
                "3ff35620ed35bd0c"
            ]
        ]
    },
    {
        "id": "3ff35620ed35bd0c",
        "type": "nbrowser",
        "z": "a8155172fceaa888",
        "name": "",
        "methods": [
            {
                "name": "gotoURL",
                "func": "goto",
                "params": [
                    {
                        "type": "msg",
                        "value": "payload",
                        "typeDefault": "str"
                    }
                ]
            },
            {
                "name": "type",
                "func": "type",
                "params": [
                    {
                        "type": "str",
                        "value": "#login_field",
                        "typeDefault": "str"
                    },
                    {
                        "type": "msg",
                        "value": "username",
                        "typeDefault": "str"
                    }
                ]
            },
            {
                "name": "type",
                "func": "type",
                "params": [
                    {
                        "type": "str",
                        "value": "#password",
                        "typeDefault": "str"
                    },
                    {
                        "type": "msg",
                        "value": "password",
                        "typeDefault": "str"
                    }
                ]
            },
            {
                "name": "click",
                "func": "click",
                "params": [
                    {
                        "type": "str",
                        "value": ".btn",
                        "typeDefault": "str"
                    }
                ]
            },
            {
                "name": "wait",
                "func": "wait",
                "params": [
                    {
                        "type": "str",
                        "value": "#welcome-panel",
                        "typeDefault": "str"
                    }
                ]
            }
        ],
        "prop": "nbrowser",
        "propout": "payload",
        "object": "msg",
        "objectout": "msg",
        "close": false,
        "show": true,
        "ssl": false,
        "outputs": 1,
        "x": 540,
        "y": 940,
        "wires": [
            [
                "0cc7f15310e93d09"
            ]
        ]
    },
    {
        "id": "ac6aa64354bbd2de",
        "type": "debug",
        "z": "a8155172fceaa888",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 990,
        "y": 1060,
        "wires": []
    },
    {
        "id": "4c590ec7b36bb746",
        "type": "puppeteer-page-screenshot",
        "z": "a8155172fceaa888",
        "name": "",
        "fullpage": true,
        "x": 770,
        "y": 960,
        "wires": [
            [
                "8c73a770138ae329"
            ]
        ]
    },
    {
        "id": "8c73a770138ae329",
        "type": "jimp-image",
        "z": "a8155172fceaa888",
        "name": "",
        "data": "payload",
        "dataType": "msg",
        "ret": "img",
        "parameter1": "/home/iplon/Desktop/poornima/report.jpg",
        "parameter1Type": "str",
        "parameter2": "",
        "parameter2Type": "msg",
        "parameter3": "",
        "parameter3Type": "msg",
        "parameter4": "",
        "parameter4Type": "msg",
        "parameter5": "",
        "parameter5Type": "msg",
        "parameter6": "",
        "parameter6Type": "msg",
        "parameter7": "",
        "parameter7Type": "msg",
        "parameter8": "",
        "parameter8Type": "msg",
        "sendProperty": "payload",
        "sendPropertyType": "msg",
        "parameterCount": 1,
        "jimpFunction": "write",
        "selectedJimpFunction": {
            "name": "write",
            "fn": "write",
            "description": "Write to file. NOTE: You can specify an alternative file extension type to change the type. Currently support types are jpg, png, bmp.",
            "parameters": [
                {
                    "name": "filename",
                    "type": "str",
                    "required": true,
                    "hint": "Name of the file",
                    "defaultType": "str"
                }
            ]
        },
        "x": 930,
        "y": 960,
        "wires": [
            [
                "4d43aa7c4c4aa050"
            ]
        ]
    },
    {
        "id": "4d43aa7c4c4aa050",
        "type": "image viewer",
        "z": "a8155172fceaa888",
        "name": "",
        "width": 160,
        "data": "payload",
        "dataType": "msg",
        "active": true,
        "x": 1130,
        "y": 960,
        "wires": [
            []
        ]
    },
    {
        "id": "0cc7f15310e93d09",
        "type": "html",
        "z": "a8155172fceaa888",
        "name": "",
        "property": "payload",
        "outproperty": "payload",
        "tag": ".text-mono",
        "ret": "text",
        "as": "single",
        "x": 690,
        "y": 1020,
        "wires": [
            [
                "ac6aa64354bbd2de"
            ]
        ]
    },
    {
        "id": "42b7f97e60f87edf",
        "type": "file in",
        "z": "3657ba5f94aa31e1",
        "name": "input",
        "filename": "/home/iplon/Desktop/poornima/generationreport.jpg",
        "filenameType": "str",
        "format": "",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 770,
        "y": 100,
        "wires": [
            [
                "507f8839ceab2439"
            ]
        ]
    },
    {
        "id": "dfc4af3d40afd849",
        "type": "inject",
        "z": "3657ba5f94aa31e1",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "timestamp",
        "payloadType": "str",
        "x": 100,
        "y": 240,
        "wires": [
            [
                "87654fc1ee7b97de",
                "03d0742860214500",
                "1ca9d63061d6db3d",
                "6ff85a1d392c8dca"
            ]
        ]
    },
    {
        "id": "36e2047b9e148182",
        "type": "puppeteer-page-screenshot",
        "z": "3657ba5f94aa31e1",
        "name": "",
        "fullpage": true,
        "x": 510,
        "y": 100,
        "wires": [
            [
                "de3ccbcd322d8175"
            ]
        ]
    },
    {
        "id": "1ca9d63061d6db3d",
        "type": "puppeteer-browser-launch",
        "z": "3657ba5f94aa31e1",
        "timeout": "60000",
        "slowMo": 0,
        "headless": true,
        "debugport": 0,
        "devtools": true,
        "name": "",
        "x": 160,
        "y": 100,
        "wires": [
            [
                "8309406eb3fd3049"
            ]
        ]
    },
    {
        "id": "8309406eb3fd3049",
        "type": "puppeteer-page-goto",
        "z": "3657ba5f94aa31e1",
        "name": "Generation report",
        "url": "https://snapshots.raintank.io/dashboard/snapshot/F27nVD0170fzqtiLkpjc37pOcnyeyuPT",
        "urltype": "str",
        "waitUntil": "networkidle0",
        "x": 330,
        "y": 100,
        "wires": [
            [
                "36e2047b9e148182"
            ]
        ]
    },
    {
        "id": "aca5a18f0ca560af",
        "type": "puppeteer-page-screenshot",
        "z": "3657ba5f94aa31e1",
        "name": "",
        "fullpage": true,
        "x": 450,
        "y": 180,
        "wires": [
            [
                "d22eaa6ec579212b"
            ]
        ]
    },
    {
        "id": "d22eaa6ec579212b",
        "type": "jimp-image",
        "z": "3657ba5f94aa31e1",
        "name": "",
        "data": "payload",
        "dataType": "msg",
        "ret": "img",
        "parameter1": "/home/iplon/Desktop/poornima/reports.jpg",
        "parameter1Type": "str",
        "parameter2": "",
        "parameter2Type": "msg",
        "parameter3": "",
        "parameter3Type": "msg",
        "parameter4": "",
        "parameter4Type": "msg",
        "parameter5": "",
        "parameter5Type": "msg",
        "parameter6": "",
        "parameter6Type": "msg",
        "parameter7": "",
        "parameter7Type": "msg",
        "parameter8": "",
        "parameter8Type": "msg",
        "sendProperty": "payload",
        "sendPropertyType": "msg",
        "parameterCount": 1,
        "jimpFunction": "write",
        "selectedJimpFunction": {
            "name": "write",
            "fn": "write",
            "description": "Write to file. NOTE: You can specify an alternative file extension type to change the type. Currently support types are jpg, png, bmp.",
            "parameters": [
                {
                    "name": "filename",
                    "type": "str",
                    "required": true,
                    "hint": "Name of the file",
                    "defaultType": "str"
                }
            ]
        },
        "x": 590,
        "y": 180,
        "wires": [
            [
                "ceb485c54ab45c7e"
            ]
        ]
    },
    {
        "id": "d810b50992fdeef6",
        "type": "puppeteer-page-goto",
        "z": "3657ba5f94aa31e1",
        "name": "reports",
        "url": "https://snapshots.raintank.io/dashboard/snapshot/J890G8iVTCLOKs6lAnBVR5U4bH60GJ0P",
        "urltype": "str",
        "waitUntil": "networkidle0",
        "x": 300,
        "y": 180,
        "wires": [
            [
                "aca5a18f0ca560af"
            ]
        ]
    },
    {
        "id": "ceb485c54ab45c7e",
        "type": "file in",
        "z": "3657ba5f94aa31e1",
        "name": "input",
        "filename": "/home/iplon/Desktop/poornima/reports.jpg",
        "filenameType": "str",
        "format": "",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 710,
        "y": 180,
        "wires": [
            [
                "6294e5f6a2433c5e"
            ]
        ]
    },
    {
        "id": "03d0742860214500",
        "type": "puppeteer-browser-launch",
        "z": "3657ba5f94aa31e1",
        "timeout": "60000",
        "slowMo": 0,
        "headless": true,
        "debugport": 0,
        "devtools": true,
        "name": "",
        "x": 160,
        "y": 180,
        "wires": [
            [
                "d810b50992fdeef6"
            ]
        ]
    },
    {
        "id": "507f8839ceab2439",
        "type": "base64",
        "z": "3657ba5f94aa31e1",
        "name": "",
        "action": "str",
        "property": "payload",
        "x": 900,
        "y": 100,
        "wires": [
            [
                "1d1f5161b3c6fcf9"
            ]
        ]
    },
    {
        "id": "6294e5f6a2433c5e",
        "type": "base64",
        "z": "3657ba5f94aa31e1",
        "name": "",
        "action": "str",
        "property": "payload",
        "x": 840,
        "y": 180,
        "wires": [
            [
                "35da131dae843dee"
            ]
        ]
    },
    {
        "id": "224b025d471aea05",
        "type": "file in",
        "z": "3657ba5f94aa31e1",
        "name": "input",
        "filename": "/home/iplon/Desktop/poornima/string.jpg",
        "filenameType": "str",
        "format": "",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 730,
        "y": 300,
        "wires": [
            [
                "39a80da8a5455cbc"
            ]
        ]
    },
    {
        "id": "4d366e5dc149206f",
        "type": "puppeteer-page-screenshot",
        "z": "3657ba5f94aa31e1",
        "name": "",
        "fullpage": true,
        "x": 450,
        "y": 300,
        "wires": [
            [
                "a1c8ec2eb93c948b"
            ]
        ]
    },
    {
        "id": "87654fc1ee7b97de",
        "type": "puppeteer-browser-launch",
        "z": "3657ba5f94aa31e1",
        "timeout": "60000",
        "slowMo": 0,
        "headless": true,
        "debugport": 0,
        "devtools": true,
        "name": "",
        "x": 160,
        "y": 300,
        "wires": [
            [
                "ab1c755682db765d"
            ]
        ]
    },
    {
        "id": "a1c8ec2eb93c948b",
        "type": "jimp-image",
        "z": "3657ba5f94aa31e1",
        "name": "",
        "data": "payload",
        "dataType": "msg",
        "ret": "img",
        "parameter1": "/home/iplon/Desktop/poornima/string.jpg",
        "parameter1Type": "str",
        "parameter2": "",
        "parameter2Type": "msg",
        "parameter3": "",
        "parameter3Type": "msg",
        "parameter4": "",
        "parameter4Type": "msg",
        "parameter5": "",
        "parameter5Type": "msg",
        "parameter6": "",
        "parameter6Type": "msg",
        "parameter7": "",
        "parameter7Type": "msg",
        "parameter8": "",
        "parameter8Type": "msg",
        "sendProperty": "payload",
        "sendPropertyType": "msg",
        "parameterCount": 1,
        "jimpFunction": "write",
        "selectedJimpFunction": {
            "name": "write",
            "fn": "write",
            "description": "Write to file. NOTE: You can specify an alternative file extension type to change the type. Currently support types are jpg, png, bmp.",
            "parameters": [
                {
                    "name": "filename",
                    "type": "str",
                    "required": true,
                    "hint": "Name of the file",
                    "defaultType": "str"
                }
            ]
        },
        "x": 610,
        "y": 300,
        "wires": [
            [
                "224b025d471aea05"
            ]
        ]
    },
    {
        "id": "ab1c755682db765d",
        "type": "puppeteer-page-goto",
        "z": "3657ba5f94aa31e1",
        "name": "stringinv",
        "url": "https://snapshots.raintank.io/dashboard/snapshot/jc3jIDsQOTu6FwdITIaD5JQotcV7rS13",
        "urltype": "str",
        "waitUntil": "networkidle0",
        "x": 300,
        "y": 300,
        "wires": [
            [
                "4d366e5dc149206f"
            ]
        ]
    },
    {
        "id": "54b5e0c62c061842",
        "type": "puppeteer-page-screenshot",
        "z": "3657ba5f94aa31e1",
        "name": "",
        "fullpage": true,
        "x": 470,
        "y": 400,
        "wires": [
            [
                "e6c60944c8cab07f"
            ]
        ]
    },
    {
        "id": "e6c60944c8cab07f",
        "type": "jimp-image",
        "z": "3657ba5f94aa31e1",
        "name": "",
        "data": "payload",
        "dataType": "msg",
        "ret": "img",
        "parameter1": "/home/iplon/Desktop/poornima/energy.jpg",
        "parameter1Type": "str",
        "parameter2": "",
        "parameter2Type": "msg",
        "parameter3": "",
        "parameter3Type": "msg",
        "parameter4": "",
        "parameter4Type": "msg",
        "parameter5": "",
        "parameter5Type": "msg",
        "parameter6": "",
        "parameter6Type": "msg",
        "parameter7": "",
        "parameter7Type": "msg",
        "parameter8": "",
        "parameter8Type": "msg",
        "sendProperty": "payload",
        "sendPropertyType": "msg",
        "parameterCount": 1,
        "jimpFunction": "write",
        "selectedJimpFunction": {
            "name": "write",
            "fn": "write",
            "description": "Write to file. NOTE: You can specify an alternative file extension type to change the type. Currently support types are jpg, png, bmp.",
            "parameters": [
                {
                    "name": "filename",
                    "type": "str",
                    "required": true,
                    "hint": "Name of the file",
                    "defaultType": "str"
                }
            ]
        },
        "x": 610,
        "y": 400,
        "wires": [
            [
                "3a67c98f920ec695"
            ]
        ]
    },
    {
        "id": "249f87a8cb31bf02",
        "type": "puppeteer-page-goto",
        "z": "3657ba5f94aa31e1",
        "name": "energy",
        "url": "https://snapshots.raintank.io/dashboard/snapshot/wk9qaDqCny7oMIwxAchoKcNirT7bmQDu?orgId=2&refresh=5m",
        "urltype": "str",
        "waitUntil": "networkidle0",
        "x": 310,
        "y": 400,
        "wires": [
            [
                "54b5e0c62c061842"
            ]
        ]
    },
    {
        "id": "3a67c98f920ec695",
        "type": "file in",
        "z": "3657ba5f94aa31e1",
        "name": "input",
        "filename": "/home/iplon/Desktop/poornima/energy.jpg",
        "filenameType": "str",
        "format": "",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 730,
        "y": 400,
        "wires": [
            [
                "548d5c314ef462ad"
            ]
        ]
    },
    {
        "id": "6ff85a1d392c8dca",
        "type": "puppeteer-browser-launch",
        "z": "3657ba5f94aa31e1",
        "timeout": "60000",
        "slowMo": 0,
        "headless": true,
        "debugport": 0,
        "devtools": true,
        "name": "",
        "x": 160,
        "y": 400,
        "wires": [
            [
                "249f87a8cb31bf02"
            ]
        ]
    },
    {
        "id": "39a80da8a5455cbc",
        "type": "base64",
        "z": "3657ba5f94aa31e1",
        "name": "",
        "action": "str",
        "property": "payload",
        "x": 860,
        "y": 300,
        "wires": [
            [
                "be2ee9065e76083e"
            ]
        ]
    },
    {
        "id": "548d5c314ef462ad",
        "type": "base64",
        "z": "3657ba5f94aa31e1",
        "name": "",
        "action": "str",
        "property": "payload",
        "x": 880,
        "y": 400,
        "wires": [
            [
                "8cfbed14caa02d16"
            ]
        ]
    },
    {
        "id": "b84d3f1873f02961",
        "type": "file",
        "z": "3657ba5f94aa31e1",
        "name": "output in PDF",
        "filename": "/home/iplon/Desktop/poornima/wattnexx.pdf",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 840,
        "y": 620,
        "wires": [
            [
                "0c7868367bbf8bcb"
            ]
        ]
    },
    {
        "id": "0c3d37f22ff91b02",
        "type": "template",
        "z": "3657ba5f94aa31e1",
        "name": "Wattnexx",
        "field": "payload",
        "fieldType": "msg",
        "format": "json",
        "syntax": "mustache",
        "template": "{\n    \"pageSize\": \"A4\",\n    \"pageOrientation\": \"portrait\",\n    \"pageMargins\": [\n        40,\n        60,\n        40,\n        60\n    ],\n    \"info\": {\n        \"title\": \"Wattnexx reports\",\n        \"author\": \"Poornima & Sujiritha\",\n        \"subject\": \"Monthly\",\n        \"keywords\": \"Micro Grid\"\n    },\n    \"content\": [\n        \"Wattnexx reports\",\n        \"\\n\",\n        \"1.Aim : \",\n        \"\\n\",\n        \"This report contains the details of Weekly,monthly and yearly reports for your reference.\",\n        \"\\n\",\n        \"2. Generation reports :\",\n        \"\\n\",\n        \"This screen shows the generation devices like inverter. Here we get last Month generation data. Also, that screen data directly export to csv format.\",\n        \"\\n\",\n        {\n            \"image\": \"data:image/jpeg;base64,{{{payload.generation}}}\",\n            \"alignment\": \"center\",\n            \"width\": 300\n        },\n        \"\\n\",\n        \"\\n\",\n        \"3.Reports :\",\n        \"This screen shows monthly & yearly data\",\n        \"\\n\",\n        {\n            \"image\": \"data:image/jpeg;base64,{{{payload.reports}}}\",\n            \"alignment\": \"center\",\n            \"width\": 300\n        },\n        \"\\n\",\n        \"\\n\",\n        \"\\n\",\n        \"4.INV String details :\",\n        \"This screen shows inverter wise string data of the plant\",\n        \"\\n\",\n        {\n            \"image\": \"data:image/jpeg;base64,{{{payload.stringinv}}}\",\n            \"alignment\": \"center\",\n            \"width\": 300\n        },\n        \"\\n\",\n        \"5.Plant energy flow :\",\n        \"This screen shows active power,generation & frequency of all inverters data of the plant\",\n        \"\\n\",\n        {\n            \"image\": \"data:image/jpeg;base64,{{{payload.energy}}}\",\n            \"alignment\": \"center\",\n            \"width\": 300\n        }\n    ]\n}",
        "output": "json",
        "x": 520,
        "y": 620,
        "wires": [
            [
                "17c63f7ebc12833e"
            ]
        ]
    },
    {
        "id": "35da131dae843dee",
        "type": "change",
        "z": "3657ba5f94aa31e1",
        "name": "reports",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "reports",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 200,
        "y": 600,
        "wires": [
            [
                "0d8ce51155405fc9"
            ]
        ]
    },
    {
        "id": "1d1f5161b3c6fcf9",
        "type": "change",
        "z": "3657ba5f94aa31e1",
        "name": "generation",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "generation",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 210,
        "y": 520,
        "wires": [
            [
                "0d8ce51155405fc9"
            ]
        ]
    },
    {
        "id": "0c7868367bbf8bcb",
        "type": "debug",
        "z": "3657ba5f94aa31e1",
        "name": "debug 9",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 1010,
        "y": 620,
        "wires": []
    },
    {
        "id": "be2ee9065e76083e",
        "type": "change",
        "z": "3657ba5f94aa31e1",
        "name": "stringinv",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "stringinv",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 200,
        "y": 680,
        "wires": [
            [
                "0d8ce51155405fc9"
            ]
        ]
    },
    {
        "id": "0d8ce51155405fc9",
        "type": "function",
        "z": "3657ba5f94aa31e1",
        "name": "combine",
        "func": "context.data = context.data || {};\nswitch(msg.topic){\n    case \"generation\":\n        context.data.generation = msg.payload;\n        msg = null;\n        break;\n    case \"reports\":\n        context.data.reports = msg.payload;\n        msg = null;\n        break;\n    case \"stringinv\":\n        context.data.stringinv = msg.payload;\n        msg = null;\n        break;\n    case \"energy\":\n        context.data.energy = msg.payload;\n        msg = null;\n        break;\n}\nif (context.data.generation != null && context.data.reports != null && context.data.stringinv != null && context.data.energy != null){\n    var data_combine = {\n        \"generation\": context.data.generation,\n        \"reports\": context.data.reports,\n        \"stringinv\": context.data.stringinv,\n        \"energy\": context.data.energy\n       \n    }\n    context.data = null\n    return {payload: data_combine};\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 620,
        "wires": [
            [
                "0c3d37f22ff91b02"
            ]
        ]
    },
    {
        "id": "17c63f7ebc12833e",
        "type": "pdfmake",
        "z": "3657ba5f94aa31e1",
        "name": "",
        "outputType": "Buffer",
        "inputProperty": "payload",
        "options": "{}",
        "outputProperty": "payload",
        "x": 680,
        "y": 620,
        "wires": [
            [
                "b84d3f1873f02961"
            ]
        ]
    },
    {
        "id": "8cfbed14caa02d16",
        "type": "change",
        "z": "3657ba5f94aa31e1",
        "name": "energy",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "energy",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 190,
        "y": 760,
        "wires": [
            [
                "0d8ce51155405fc9"
            ]
        ]
    },
    {
        "id": "de3ccbcd322d8175",
        "type": "jimp-image",
        "z": "3657ba5f94aa31e1",
        "name": "",
        "data": "payload",
        "dataType": "msg",
        "ret": "img",
        "parameter1": "/home/iplon/Desktop/poornima/generationreport.jpg",
        "parameter1Type": "str",
        "parameter2": "",
        "parameter2Type": "msg",
        "parameter3": "",
        "parameter3Type": "msg",
        "parameter4": "",
        "parameter4Type": "msg",
        "parameter5": "",
        "parameter5Type": "msg",
        "parameter6": "",
        "parameter6Type": "msg",
        "parameter7": "",
        "parameter7Type": "msg",
        "parameter8": "",
        "parameter8Type": "msg",
        "sendProperty": "payload",
        "sendPropertyType": "msg",
        "parameterCount": 1,
        "jimpFunction": "write",
        "selectedJimpFunction": {
            "name": "write",
            "fn": "write",
            "description": "Write to file. NOTE: You can specify an alternative file extension type to change the type. Currently support types are jpg, png, bmp.",
            "parameters": [
                {
                    "name": "filename",
                    "type": "str",
                    "required": true,
                    "hint": "Name of the file",
                    "defaultType": "str"
                }
            ]
        },
        "x": 650,
        "y": 100,
        "wires": [
            [
                "42b7f97e60f87edf"
            ]
        ]
    },
    {
        "id": "9dbdb83c6aa5ba3e",
        "type": "inject",
        "z": "18eeef1213ab0970",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 80,
        "y": 320,
        "wires": [
            [
                "cbea027f1a0d6dc9"
            ]
        ]
    },
    {
        "id": "9776064e02f810a5",
        "type": "puppeteer-page-screenshot",
        "z": "18eeef1213ab0970",
        "name": "",
        "fullpage": true,
        "x": 810,
        "y": 720,
        "wires": [
            [
                "3a0be554ea47ed75"
            ]
        ]
    },
    {
        "id": "cbea027f1a0d6dc9",
        "type": "puppeteer-browser-launch",
        "z": "18eeef1213ab0970",
        "timeout": "60000",
        "slowMo": 0,
        "headless": true,
        "debugport": 0,
        "devtools": true,
        "name": "",
        "x": 220,
        "y": 320,
        "wires": [
            [
                "3a0d814239f7c047"
            ]
        ]
    },
    {
        "id": "7941ba58663f836c",
        "type": "jimp-image",
        "z": "18eeef1213ab0970",
        "name": "",
        "data": "payload",
        "dataType": "msg",
        "ret": "img",
        "parameter1": "/home/iplon/Desktop/poornima/report.jpg",
        "parameter1Type": "str",
        "parameter2": "",
        "parameter2Type": "msg",
        "parameter3": "",
        "parameter3Type": "msg",
        "parameter4": "",
        "parameter4Type": "msg",
        "parameter5": "",
        "parameter5Type": "msg",
        "parameter6": "",
        "parameter6Type": "msg",
        "parameter7": "",
        "parameter7Type": "msg",
        "parameter8": "",
        "parameter8Type": "msg",
        "sendProperty": "payload",
        "sendPropertyType": "msg",
        "parameterCount": 1,
        "jimpFunction": "write",
        "selectedJimpFunction": {
            "name": "write",
            "fn": "write",
            "description": "Write to file. NOTE: You can specify an alternative file extension type to change the type. Currently support types are jpg, png, bmp.",
            "parameters": [
                {
                    "name": "filename",
                    "type": "str",
                    "required": true,
                    "hint": "Name of the file",
                    "defaultType": "str"
                }
            ]
        },
        "x": 810,
        "y": 320,
        "wires": [
            [
                "880a0132d3ef3546"
            ]
        ]
    },
    {
        "id": "880a0132d3ef3546",
        "type": "image viewer",
        "z": "18eeef1213ab0970",
        "name": "",
        "width": 160,
        "data": "payload",
        "dataType": "msg",
        "active": true,
        "x": 1010,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "3a0d814239f7c047",
        "type": "puppeteer-page-goto",
        "z": "18eeef1213ab0970",
        "name": "ws",
        "url": "http://localhost:3000/",
        "urltype": "str",
        "waitUntil": "networkidle0",
        "x": 350,
        "y": 320,
        "wires": [
            [
                "c2635dfdc5453ee3"
            ]
        ]
    },
    {
        "id": "a2d60eea7fc10c84",
        "type": "inject",
        "z": "18eeef1213ab0970",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "9ab49db3d9b6c300",
        "type": "delay",
        "z": "18eeef1213ab0970",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 520,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "db6dccde95995b37",
        "type": "function",
        "z": "18eeef1213ab0970",
        "name": "function 5",
        "func": "// @ts-nocheck\n\n// const puppeteer = require('puppeteer');\nconst puppeteer = global.get(\"puppeteer\");\n// const odbc = global.get(\"odbc\");\n\n// URL to load should be passed as first parameter\nconst url = 'http://zabbix.xxx.md:3000/d/' + msg.req.params.uid + '/' + msg.req.params.name + '?orgId=1&kiosk';\n// Username and password (with colon separator) should be second parameter\n\nconst auth_string = '<username>:<password>';\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 240,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "aa63de31734b7f88",
        "type": "http request",
        "z": "18eeef1213ab0970",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://localhost:3000",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "basic",
        "senderr": false,
        "headers": [],
        "x": 250,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "72d8a548eb17e92a",
        "type": "inject",
        "z": "18eeef1213ab0970",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "payload": "http://localhost:3000",
        "payloadType": "str",
        "x": 430,
        "y": 600,
        "wires": [
            [
                "d7dd76fa371b3a21"
            ]
        ]
    },
    {
        "id": "d7dd76fa371b3a21",
        "type": "credentials",
        "z": "18eeef1213ab0970",
        "name": "",
        "props": [
            {
                "value": "username",
                "type": "msg"
            },
            {
                "value": "password",
                "type": "msg"
            }
        ],
        "x": 440,
        "y": 700,
        "wires": [
            [
                "41488e9712543659"
            ]
        ]
    },
    {
        "id": "41488e9712543659",
        "type": "nbrowser",
        "z": "18eeef1213ab0970",
        "name": "",
        "methods": [
            {
                "name": "gotoURL",
                "func": "goto",
                "params": [
                    {
                        "type": "msg",
                        "value": "payload",
                        "typeDefault": "str"
                    }
                ]
            },
            {
                "name": "type",
                "func": "type",
                "params": [
                    {
                        "type": "str",
                        "value": "#user_login",
                        "typeDefault": "str"
                    },
                    {
                        "type": "msg",
                        "value": "username",
                        "typeDefault": "str"
                    }
                ]
            },
            {
                "name": "type",
                "func": "type",
                "params": [
                    {
                        "type": "str",
                        "value": "#current-password",
                        "typeDefault": "str"
                    },
                    {
                        "type": "msg",
                        "value": "password",
                        "typeDefault": "str"
                    }
                ]
            },
            {
                "name": "click",
                "func": "click",
                "params": [
                    {
                        "type": "str",
                        "value": "#wp-submit",
                        "typeDefault": "str"
                    }
                ]
            }
        ],
        "prop": "nbrowser",
        "propout": "payload",
        "object": "msg",
        "objectout": "msg",
        "close": false,
        "show": true,
        "ssl": false,
        "outputs": 1,
        "x": 540,
        "y": 760,
        "wires": [
            [
                "9776064e02f810a5"
            ]
        ]
    },
    {
        "id": "3a0be554ea47ed75",
        "type": "debug",
        "z": "18eeef1213ab0970",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 950,
        "y": 640,
        "wires": []
    },
    {
        "id": "da2f230564941ecd",
        "type": "html",
        "z": "18eeef1213ab0970",
        "name": "",
        "tag": ".update-count",
        "ret": "html",
        "as": "single",
        "x": 630,
        "y": 820,
        "wires": [
            []
        ]
    },
    {
        "id": "c2635dfdc5453ee3",
        "type": "credentials",
        "z": "18eeef1213ab0970",
        "name": "",
        "props": [
            {
                "value": "username",
                "type": "msg"
            },
            {
                "value": "password",
                "type": "msg"
            }
        ],
        "x": 510,
        "y": 280,
        "wires": [
            [
                "29fb504ad355f855"
            ]
        ]
    },
    {
        "id": "29fb504ad355f855",
        "type": "puppeteer-page-screenshot",
        "z": "18eeef1213ab0970",
        "name": "",
        "fullpage": true,
        "x": 650,
        "y": 340,
        "wires": [
            [
                "7941ba58663f836c"
            ]
        ]
    },
    {
        "id": "eed91e5a229dfecf",
        "type": "http in",
        "z": "9d5e8229012b9c73",
        "name": "i/p",
        "url": "/report",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 270,
        "y": 160,
        "wires": [
            [
                "b93c83d2bd57cb64"
            ]
        ]
    },
    {
        "id": "b93c83d2bd57cb64",
        "type": "screenshot",
        "z": "9d5e8229012b9c73",
        "name": "",
        "url": "https://www.youtube.com/watch?v=vdxagU60zwQ",
        "path": "",
        "x": 400,
        "y": 220,
        "wires": [
            [
                "274145ec56c4fc37"
            ]
        ]
    },
    {
        "id": "274145ec56c4fc37",
        "type": "template",
        "z": "9d5e8229012b9c73",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<html>\n    <body>\n        <img src=\"data:image/png;base64,{{payload}}\">\n    </body>\n</html>",
        "output": "str",
        "x": 520,
        "y": 280,
        "wires": [
            [
                "aa0ce7c8f41433ad"
            ]
        ]
    },
    {
        "id": "aa0ce7c8f41433ad",
        "type": "http response",
        "z": "9d5e8229012b9c73",
        "name": "o/p",
        "statusCode": "",
        "headers": {},
        "x": 620,
        "y": 340,
        "wires": []
    },
    {
        "id": "c4eb9aea73b94c80",
        "type": "debug",
        "z": "da53a1c7cff4af8c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1210,
        "y": 200,
        "wires": []
    },
    {
        "id": "9e62cbb6241dfca2",
        "type": "exec",
        "z": "da53a1c7cff4af8c",
        "command": "python3 DayValueinani1.py",
        "addpay": "payload",
        "append": "",
        "useSpawn": "true",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 880,
        "y": 200,
        "wires": [
            [
                "c4eb9aea73b94c80"
            ],
            [
                "80c7ddf737641acf"
            ],
            []
        ]
    },
    {
        "id": "f6c01b109762e663",
        "type": "inject",
        "z": "da53a1c7cff4af8c",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "300",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 110,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "46e65db940616426",
        "type": "file",
        "z": "da53a1c7cff4af8c",
        "name": "",
        "filename": "DayValueinani1.py",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 640,
        "y": 200,
        "wires": [
            [
                "9e62cbb6241dfca2"
            ]
        ]
    },
    {
        "id": "54fc5f350a88ac26",
        "type": "template",
        "z": "da53a1c7cff4af8c",
        "name": "DayValueinani1",
        "field": "payload",
        "fieldType": "msg",
        "format": "python",
        "syntax": "mustache",
        "template": "import time\nimport datetime\nimport pandas as pd \nimport pytz\nimport calendar\nfrom influxdb import InfluxDBClient\nfrom datetime import date\n\ntoday = date.today()\np = (str(today))\nx = p.split('-')\nuniqueday = int(x[2])\nuniquemonth = int(x[1])\nuniqueyear = int(x[0])\nts = datetime.datetime(uniqueyear,uniquemonth,uniqueday, 00, 00,00).timestamp()\nc = int(ts)\nFrom = (c-19800)\nTo = calendar.timegm(time.gmtime())\n\nclient = InfluxDBClient(host = \"localhost\", port = \"8086\",username='admin', password='admin', database= 'datalake')\n\ndevice = ['EM01','INV01','INV02','INV03','INV04','INV05','INV06']\n\ndef sending(df):\n    #print('a')\n    #print(df)\n    Year = int(df['Year'])\n    Month = int(df['Month'])\n    Day = int(df['Day'])\n    Device = str(df['Device'])\n    EAE_DAY = float(df['EAE_DAY'])\n    print(EAE_DAY)\n    x = Device.split(' ')\n    y = x[4]\n    z = y.split('\\n')\n    Dev = z[0]\n    ts = datetime.datetime(Year,Month,Day, 00, 00,00).timestamp()\n    #ts = (calendar.timegm(Date_IST.timetuple()))\n    ns = int(ts)\n    string = str(ns) + \"000000000\"\n    liveepoch = int(string)\n\n    from influxdb import InfluxDBClient\n    client = InfluxDBClient('localhost', 8086)\n    dbs = client.get_list_database()\n    if 'warehousr' not in dbs:\n        client.create_database('warehousr')\n    client = InfluxDBClient('localhost', 8086, 'admin', 'admin', 'warehousr')\n    #print(v)\n    #json_payload = []\n\n    data = [\n        {\n        \"measurement\":\"Day\",\n        \"tags\": {\n            \"d\" : Dev,\n            \"p\" : \"sualpha_inani_1_2MW\"\n                },\n        \"time\" : liveepoch,\n        \"fields\": {\n            \"EAE_DAY\" : EAE_DAY\n            #\"Device\": Dev\n            }\n        }\n    ]\n    print(data)\n    #json_payload.append(data)\n    #print(client.write_points(data))\n    client.write_points(data)\n\nfor i in range(len(device)):\n    result1 = client.query('select last(\"value\") from v where bd= \\'inani1_1.2MW\\' AND d = \\''+device[i]+'\\' AND f= \\'EAE_DAY\\' AND time >= '+str(From)+\"000\"+'ms AND time <= '+str(To)+\"000\"+'ms  group by time(1d,-330m), \"bd\",\"d\" fill(null)')\n    #print(result1)\n    points_day = list(result1.get_points(measurement='v', tags={'bd':'inani1_1.2MW','d': device[i]}))\n    df = pd.DataFrame(points_day)\n    if len(df) != 0:\n        df[\"Date_IST\"] = pd.to_datetime(df[\"time\"]) + pd.DateOffset(hours=5, minutes=30)\n        df.Date_IST = pd.to_datetime(df.Date_IST)\n        #df[\"Date_IST\"] = df[\"Date_IST\"].to_pydatetime()\n        df['day'] = pd.to_datetime(df['Date_IST']).dt.day\n        df['month'] = pd.to_datetime(df['Date_IST']).dt.month\n        df['year'] = pd.to_datetime(df['Date_IST']).dt.year\n        df = df.dropna() \n    \n        Month = df['month'].tolist()\n        Year = df['year'].tolist()\n        Day =  df['day'].tolist()\n        EAE_DAY =  df['last'].tolist()\n        Date_IST =  df['Date_IST'].tolist()\n    \n        df = pd.DataFrame(\n        {'Month': Month,\n        'Year': Year,\n        'Day': Day,\n        'EAE_DAY': EAE_DAY,\n        'Date_IST': Date_IST,\n        'Device':  device[i]})\n        #print(df)\n        sending(df)",
        "output": "str",
        "x": 380,
        "y": 200,
        "wires": [
            [
                "46e65db940616426"
            ]
        ]
    },
    {
        "id": "80c7ddf737641acf",
        "type": "debug",
        "z": "da53a1c7cff4af8c",
        "name": "error",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1190,
        "y": 260,
        "wires": []
    },
    {
        "id": "c7ee5df2b0a99d00",
        "type": "exec",
        "z": "da53a1c7cff4af8c",
        "command": "python3 DayValueinani2.py",
        "addpay": "payload",
        "append": "",
        "useSpawn": "true",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 880,
        "y": 260,
        "wires": [
            [
                "c4eb9aea73b94c80"
            ],
            [
                "80c7ddf737641acf"
            ],
            []
        ]
    },
    {
        "id": "4b3e44a17c681ee3",
        "type": "file",
        "z": "da53a1c7cff4af8c",
        "name": "",
        "filename": "DayValueinani2.py",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 610,
        "y": 260,
        "wires": [
            [
                "c7ee5df2b0a99d00"
            ]
        ]
    },
    {
        "id": "834c8633cd271360",
        "type": "template",
        "z": "da53a1c7cff4af8c",
        "name": "DayValueinani2",
        "field": "payload",
        "fieldType": "msg",
        "format": "python",
        "syntax": "mustache",
        "template": "import time\nimport datetime\nimport pandas as pd \nimport pytz\nimport calendar\nfrom influxdb import InfluxDBClient\nfrom datetime import date\n\ntoday = date.today()\np = (str(today))\nx = p.split('-')\nuniqueday = int(x[2])\nuniquemonth = int(x[1])\nuniqueyear = int(x[0])\nts = datetime.datetime(uniqueyear,uniquemonth,uniqueday, 00, 00,00).timestamp()\nc = int(ts)\nFrom = (c-19800)\nTo = calendar.timegm(time.gmtime())\n\nclient = InfluxDBClient(host = \"localhost\", port = \"8086\",username='admin', password='admin', database= 'datalake')\n\ndevice = ['EM02','INV07','INV08','INV09','INV10','INV11','INV12']\n\ndef sending(df):\n    #print('a')\n    #print(df)\n    Year = int(df['Year'])\n    Month = int(df['Month'])\n    Day = int(df['Day'])\n    Device = str(df['Device'])\n    EAE_DAY = float(df['EAE_DAY'])\n    print(EAE_DAY)\n    x = Device.split(' ')\n    y = x[4]\n    z = y.split('\\n')\n    Dev = z[0]\n    ts = datetime.datetime(Year,Month,Day, 00, 00,00).timestamp()\n    #ts = (calendar.timegm(Date_IST.timetuple()))\n    ns = int(ts)\n    string = str(ns) + \"000000000\"\n    liveepoch = int(string)\n\n    from influxdb import InfluxDBClient\n    client = InfluxDBClient('localhost', 8086)\n    dbs = client.get_list_database()\n    if 'warehousr' not in dbs:\n        client.create_database('warehousr')\n    client = InfluxDBClient('localhost', 8086, 'admin', 'admin', 'warehousr')\n    #print(v)\n    #json_payload = []\n\n    data = [\n        {\n        \"measurement\":\"Day\",\n        \"tags\": {\n            \"d\" : Dev,\n            \"p\" : \"sualpha_inani_1_2MW\"\n                },\n        \"time\" : liveepoch,\n        \"fields\": {\n            \"EAE_DAY\" : EAE_DAY\n            #\"Device\": Dev\n            }\n        }\n    ]\n    print(data)\n    #json_payload.append(data)\n    #print(client.write_points(data))\n    client.write_points(data)\n\nfor i in range(len(device)):\n    result1 = client.query('select last(\"value\") from v where bd= \\'inani2_1.2MW\\' AND d = \\''+device[i]+'\\' AND f= \\'EAE_DAY\\' AND time >= '+str(From)+\"000\"+'ms AND time <= '+str(To)+\"000\"+'ms  group by time(1d,-330m), \"bd\",\"d\" fill(null)')\n    #print(result1)\n    points_day = list(result1.get_points(measurement='v', tags={'bd':'inani2_1.2MW','d': device[i]}))\n    df = pd.DataFrame(points_day)\n    if len(df) != 0:\n        df[\"Date_IST\"] = pd.to_datetime(df[\"time\"]) + pd.DateOffset(hours=5, minutes=30)\n        df.Date_IST = pd.to_datetime(df.Date_IST)\n        #df[\"Date_IST\"] = df[\"Date_IST\"].to_pydatetime()\n        df['day'] = pd.to_datetime(df['Date_IST']).dt.day\n        df['month'] = pd.to_datetime(df['Date_IST']).dt.month\n        df['year'] = pd.to_datetime(df['Date_IST']).dt.year\n        df = df.dropna() \n    \n        Month = df['month'].tolist()\n        Year = df['year'].tolist()\n        Day =  df['day'].tolist()\n        EAE_DAY =  df['last'].tolist()\n        Date_IST =  df['Date_IST'].tolist()\n    \n        df = pd.DataFrame(\n        {'Month': Month,\n        'Year': Year,\n        'Day': Day,\n        'EAE_DAY': EAE_DAY,\n        'Date_IST': Date_IST,\n        'Device':  device[i]})\n        print(df)\n        sending(df)",
        "output": "str",
        "x": 380,
        "y": 260,
        "wires": [
            [
                "4b3e44a17c681ee3"
            ]
        ]
    },
    {
        "id": "e0acea81704111d9",
        "type": "template",
        "z": "da53a1c7cff4af8c",
        "name": "RefillEDay_inani1",
        "field": "payload",
        "fieldType": "msg",
        "format": "python",
        "syntax": "mustache",
        "template": "import time\nimport datetime\nimport pandas as pd \nimport pytz\nimport calendar\nfrom influxdb import InfluxDBClient\nfrom datetime import date\n\ntoday = date.today()\nfifth = datetime.datetime.today() - datetime.timedelta(days=10)\np = (str(today))\nq = (str(fifth))\nx = p.split('-')\nuniqueday = int(x[2])\nuniquemonth = int(x[1])\nuniqueyear = int(x[0])\nts = datetime.datetime(uniqueyear,uniquemonth,uniqueday, 00, 00,00).timestamp()\nc = int(ts)\nTo = (c-19800)\n#To = 1643653799\n\ny = q.split('-')\nDay = (y[2])\nun = Day.split()\nuniquedayfrom = int(un[0])\nuniquemonthfrom = int(y[1])\nuniqueyearfrom = int(y[0])\ntsfrom = datetime.datetime(uniqueyearfrom,uniquemonthfrom,uniquedayfrom, 00, 00,00).timestamp()\nd = int(tsfrom)\nFrom = (d-19800)\n#From = 1643481000\n\npd.set_option('display.max_columns', None)  \npd.set_option('display.max_rows', None)\n\nYear = []\nMonth = []\nDay = []\nDevice = []\nEAE_DAY = []\nliveepoch = []\n\ndef sending(df):\n    for j in range(len(df)):\n        global Year\n        global Month\n        global Day \n        global Device\n        global EAE_DAY\n        global liveepoch\n        Year += [df['Year'].iloc[j]]\n        Month += [df['Month'].iloc[j]]\n        Day += [df['Day'].iloc[j]]\n        Device += [df['Device'].iloc[j]]\n        EAE_DAY += [df['EAE_DAY'].iloc[j]]\n        ts = datetime.datetime(Year[j],Month[j],Day[j], 00, 00,00).timestamp()\n        #ts = (calendar.timegm(Date_IST.timetuple()))\n        ns = int(ts)\n        string = str(ns) + \"000000000\"\n        liveepoch += [int(string)]\n\n        from influxdb import InfluxDBClient\n        client = InfluxDBClient('localhost', 8086)\n        dbs = client.get_list_database()\n        if 'warehousr' not in dbs:\n            client.create_database('warehousr')\n        client = InfluxDBClient('localhost', 8086, 'admin', 'admin', 'warehousr')\n        #print(v)\n        #json_payload = []\n\n        data = [\n            {\n            \"measurement\":\"Day\",\n            \"tags\": {\n                \"d\" : Device[j],\n                \"p\" : \"sualpha_inani_1_2MW\"\n                    },\n            \"time\" : liveepoch[j],\n            \"fields\": {\n                \"EAE_DAY\" : EAE_DAY[j]\n                }\n            }\n        ]\n        print(data)\n        #json_payload.append(data)\n        #print(client.write_points(data))\n        client.write_points(data)\n\nclient = InfluxDBClient(host = \"localhost\", port = \"8086\",username='admin', password='admin', database= 'warehousr')\n\nclient1 = InfluxDBClient(host = \"localhost\", port = \"8086\",username='admin', password='admin', database= 'datalake')\n\ndevice = ['EM01', 'INV01', 'INV02', 'INV03','INV04', 'INV05', 'INV06']\n\nresult = client.query('SELECT \"EAE_DAY\" FROM \"Day\" where p = \\'inani1_1.2MW\\' And time > now() - 10d group by \"d\",\"p\"')\n\nmiss = []\nfor t in range(len(device)):\n    points_day = list(result.get_points(measurement='Day', tags={'d': device[t], 'p' : 'sualpha_inani_1.2MW'}))\n    df_day = pd.DataFrame(points_day)\n    print(df_day)\n    if df_day.empty or df_day.eq(0).any().any():\n        miss += [device[t]]\n\nfor i in range(len(miss)):\n    result1 = client1.query('select last(\"value\") from v where d = \\''+miss[i]+'\\' AND f= \\'EAE_DAY_KWh\\' AND bd= \\'inani1_1.2MW\\' AND time >= '+str(From)+\"000\"+'ms AND time <= '+str(To)+\"000\"+'ms  group by time(1d,-330m), \"d\", \"bd\" fill(null)')\n    points_day = list(result1.get_points(measurement='v', tags={'d': miss[i]}))\n    df = pd.DataFrame(points_day)\n    if len(df) != 0:\n        df[\"Date_IST\"] = pd.to_datetime(df[\"time\"]) + pd.DateOffset(hours=5, minutes=30)\n        df.Date_IST = pd.to_datetime(df.Date_IST)\n        #df[\"Date_IST\"] = df[\"Date_IST\"].to_pydatetime()\n        df['day'] = pd.to_datetime(df['Date_IST']).dt.day\n        df['month'] = pd.to_datetime(df['Date_IST']).dt.month\n        df['year'] = pd.to_datetime(df['Date_IST']).dt.year\n        df = df.dropna() \n    \n        Month = df['month'].tolist()\n        Year = df['year'].tolist()\n        Day =  df['day'].tolist()\n        EAE_DAY =  df['last'].tolist()\n        Date_IST =  df['Date_IST'].tolist()\n    \n        df = pd.DataFrame(\n        {'Month': Month,\n        'Year': Year,\n        'Day': Day,\n        'EAE_DAY': EAE_DAY,\n        'Date_IST': Date_IST,\n        'Device':  miss[i]})\n        sending(df)",
        "output": "str",
        "x": 370,
        "y": 320,
        "wires": [
            [
                "b77558973ab7c7dc"
            ]
        ]
    },
    {
        "id": "b77558973ab7c7dc",
        "type": "file",
        "z": "da53a1c7cff4af8c",
        "name": "",
        "filename": "RefillEDay_inani1.py",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 600,
        "y": 320,
        "wires": [
            [
                "c3d83578858ba799"
            ]
        ]
    },
    {
        "id": "c3d83578858ba799",
        "type": "exec",
        "z": "da53a1c7cff4af8c",
        "command": "python3 RefillEDay_inani1.py",
        "addpay": "payload",
        "append": "",
        "useSpawn": "true",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 880,
        "y": 320,
        "wires": [
            [
                "92f539c95d3a3cf3"
            ],
            [
                "f856ebcfab7abf1b"
            ],
            []
        ]
    },
    {
        "id": "92f539c95d3a3cf3",
        "type": "debug",
        "z": "da53a1c7cff4af8c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1190,
        "y": 320,
        "wires": []
    },
    {
        "id": "f856ebcfab7abf1b",
        "type": "debug",
        "z": "da53a1c7cff4af8c",
        "name": "error",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1190,
        "y": 380,
        "wires": []
    },
    {
        "id": "7a316f55debe08b2",
        "type": "template",
        "z": "da53a1c7cff4af8c",
        "name": "RefillEDay_inani2",
        "field": "payload",
        "fieldType": "msg",
        "format": "python",
        "syntax": "mustache",
        "template": "import time\nimport datetime\nimport pandas as pd \nimport pytz\nimport calendar\nfrom influxdb import InfluxDBClient\nfrom datetime import date\n\ntoday = date.today()\nfifth = datetime.datetime.today() - datetime.timedelta(days=10)\np = (str(today))\nq = (str(fifth))\nx = p.split('-')\nuniqueday = int(x[2])\nuniquemonth = int(x[1])\nuniqueyear = int(x[0])\nts = datetime.datetime(uniqueyear,uniquemonth,uniqueday, 00, 00,00).timestamp()\nc = int(ts)\nTo = (c-19800)\n#To = 1643653799\n\ny = q.split('-')\nDay = (y[2])\nun = Day.split()\nuniquedayfrom = int(un[0])\nuniquemonthfrom = int(y[1])\nuniqueyearfrom = int(y[0])\ntsfrom = datetime.datetime(uniqueyearfrom,uniquemonthfrom,uniquedayfrom, 00, 00,00).timestamp()\nd = int(tsfrom)\nFrom = (d-19800)\n#From = 1643481000\n\npd.set_option('display.max_columns', None)  \npd.set_option('display.max_rows', None)\n\nYear = []\nMonth = []\nDay = []\nDevice = []\nEAE_DAY = []\nliveepoch = []\n\ndef sending(df):\n    for j in range(len(df)):\n        global Year\n        global Month\n        global Day \n        global Device\n        global EAE_DAY\n        global liveepoch\n        Year += [df['Year'].iloc[j]]\n        Month += [df['Month'].iloc[j]]\n        Day += [df['Day'].iloc[j]]\n        Device += [df['Device'].iloc[j]]\n        EAE_DAY += [df['EAE_DAY'].iloc[j]]\n        ts = datetime.datetime(Year[j],Month[j],Day[j], 00, 00,00).timestamp()\n        #ts = (calendar.timegm(Date_IST.timetuple()))\n        ns = int(ts)\n        string = str(ns) + \"000000000\"\n        liveepoch += [int(string)]\n\n        from influxdb import InfluxDBClient\n        client = InfluxDBClient('localhost', 8086)\n        dbs = client.get_list_database()\n        if 'warehousr' not in dbs:\n            client.create_database('warehousr')\n        client = InfluxDBClient('localhost', 8086, 'admin', 'admin', 'warehousr')\n        #print(v)\n        #json_payload = []\n\n        data = [\n            {\n            \"measurement\":\"Day\",\n            \"tags\": {\n                \"d\" : Device[j],\n                \"p\" : \"sualpha_inani_1_2MW\"\n                    },\n            \"time\" : liveepoch[j],\n            \"fields\": {\n                \"EAE_DAY\" : EAE_DAY[j]\n                }\n            }\n        ]\n        print(data)\n        #json_payload.append(data)\n        #print(client.write_points(data))\n        client.write_points(data)\n\nclient = InfluxDBClient(host = \"localhost\", port = \"8086\",username='admin', password='admin', database= 'warehousr')\n\nclient1 = InfluxDBClient(host = \"localhost\", port = \"8086\",username='admin', password='admin', database= 'datalake')\n\ndevice = ['EM02', 'INV07', 'INV08', 'INV09','INV10', 'INV11', 'INV12']\n\nresult = client.query('SELECT \"EAE_DAY\" FROM \"Day\" where p = \\'inani2_1.2MW\\' And time > now() - 10d group by \"d\",\"p\"')\n\nmiss = []\nfor t in range(len(device)):\n    points_day = list(result.get_points(measurement='Day', tags={'d': device[t], 'p' : 'sualpha_inani_1.2MW'}))\n    df_day = pd.DataFrame(points_day)\n    print(df_day)\n    if df_day.empty or df_day.eq(0).any().any():\n        miss += [device[t]]\n\nfor i in range(len(miss)):\n    result1 = client1.query('select last(\"value\") from v where d = \\''+miss[i]+'\\' AND f= \\'EAE_DAY_KWh\\' AND bd= \\'inani2_1.2MW\\' AND time >= '+str(From)+\"000\"+'ms AND time <= '+str(To)+\"000\"+'ms  group by time(1d,-330m), \"d\", \"bd\" fill(null)')\n    points_day = list(result1.get_points(measurement='v', tags={'d': miss[i]}))\n    df = pd.DataFrame(points_day)\n    if len(df) != 0:\n        df[\"Date_IST\"] = pd.to_datetime(df[\"time\"]) + pd.DateOffset(hours=5, minutes=30)\n        df.Date_IST = pd.to_datetime(df.Date_IST)\n        #df[\"Date_IST\"] = df[\"Date_IST\"].to_pydatetime()\n        df['day'] = pd.to_datetime(df['Date_IST']).dt.day\n        df['month'] = pd.to_datetime(df['Date_IST']).dt.month\n        df['year'] = pd.to_datetime(df['Date_IST']).dt.year\n        df = df.dropna() \n    \n        Month = df['month'].tolist()\n        Year = df['year'].tolist()\n        Day =  df['day'].tolist()\n        EAE_DAY =  df['last'].tolist()\n        Date_IST =  df['Date_IST'].tolist()\n    \n        df = pd.DataFrame(\n        {'Month': Month,\n        'Year': Year,\n        'Day': Day,\n        'EAE_DAY': EAE_DAY,\n        'Date_IST': Date_IST,\n        'Device':  miss[i]})\n        sending(df)",
        "output": "str",
        "x": 370,
        "y": 380,
        "wires": [
            [
                "321c44c547b3ad2a"
            ]
        ]
    },
    {
        "id": "321c44c547b3ad2a",
        "type": "file",
        "z": "da53a1c7cff4af8c",
        "name": "",
        "filename": "RefillEDay_inani2.py",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 600,
        "y": 380,
        "wires": [
            [
                "2880423d963cedc2"
            ]
        ]
    },
    {
        "id": "2880423d963cedc2",
        "type": "exec",
        "z": "da53a1c7cff4af8c",
        "command": "python3 RefillEDay_inani2.py",
        "addpay": "payload",
        "append": "",
        "useSpawn": "true",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 880,
        "y": 380,
        "wires": [
            [
                "92f539c95d3a3cf3"
            ],
            [
                "f856ebcfab7abf1b"
            ],
            []
        ]
    },
    {
        "id": "92c47ef3103f293f",
        "type": "template",
        "z": "da53a1c7cff4af8c",
        "name": "inanireport",
        "field": "payload",
        "fieldType": "msg",
        "format": "python",
        "syntax": "mustache",
        "template": "import time\nimport datetime\nimport pandas as pd \nimport pytz\nimport calendar\nimport os\nimport numpy as np\nfrom openpyxl import Workbook\nfrom pandas import ExcelWriter\nfrom influxdb import InfluxDBClient\nfrom datetime import date\n\npd.set_option('display.max_columns', None)  \npd.set_option('display.max_rows', None) \n\nclient = InfluxDBClient(host = \"localhost\", port = \"8086\",username='admin', password='admin', database= 'warehousr')\ntoday = date.today()\np = (str(today))\nx = p.split('-')\nuniqueday = int(x[2])\nuniquemonth = int(x[1])\nuniqueyear = int(x[0])\nts = datetime.datetime(uniqueyear,uniquemonth,uniqueday, 00, 00,00).timestamp()\nc = int(ts)\nF = datetime.datetime(uniqueyear,uniquemonth,1, 00, 00,00).timestamp()\nFrom = int(F)\nTo = calendar.timegm(time.gmtime())\n\n\n###### Crct Query #####################\n#result = client.query('select last(value) from v where b = \\'B91\\' AND f= \\'EAE_DAY\\' AND time >= \\'2021-10-01T00:00:00Z\\' AND time <= \\'2021-10-07T00:00:00Z\\' group by time(1d,-330m), p',{},{},'s')\n######################################\n\nresult = client.query('SELECT last(EAE_DAY) FROM \"Day\" where p = \\'sualpha_inani_1_2MW\\' AND d = \\'EM01\\' AND  time >= '+str(From)+\"000\"+'ms AND time <= '+str(To)+\"000\"+'ms group by time(1d,-330m), \"d\", \"p\" fill(null)')\nresult1 = client.query('SELECT last(EAE_DAY) FROM \"Day\" where p = \\'sualpha_inani_1_2MW\\' AND d = \\'EM02\\' AND time >= '+str(From)+\"000\"+'ms AND time <= '+str(To)+\"000\"+'ms group by time(1d,-330m), \"d\", \"p\" fill(null)')\nresult2 = client.query('SELECT last(EAE_DAY) FROM \"Day\" where p = \\'sualpha_inani_1_2MW\\' AND d = \\'INV01\\' AND time >= '+str(From)+\"000\"+'ms AND time <= '+str(To)+\"000\"+'ms group by time(1d,-330m), \"d\", \"p\" fill(null)')\nresult3 = client.query('SELECT last(EAE_DAY) FROM \"Day\" where p = \\'sualpha_inani_1_2MW\\' AND d = \\'INV02\\' AND time >= '+str(From)+\"000\"+'ms AND time <= '+str(To)+\"000\"+'ms group by time(1d,-330m), \"d\", \"p\" fill(null)')\nresult4 = client.query('SELECT last(EAE_DAY) FROM \"Day\" where p = \\'sualpha_inani_1_2MW\\' AND d = \\'INV03\\' AND time >= '+str(From)+\"000\"+'ms AND time <= '+str(To)+\"000\"+'ms group by time(1d,-330m), \"d\", \"p\" fill(null)')\nresult5 = client.query('SELECT last(EAE_DAY) FROM \"Day\" where p = \\'sualpha_inani_1_2MW\\' AND d = \\'INV04\\' AND time >= '+str(From)+\"000\"+'ms AND time <= '+str(To)+\"000\"+'ms group by time(1d,-330m), \"d\", \"p\" fill(null)')\nresult6 = client.query('SELECT last(EAE_DAY) FROM \"Day\" where p = \\'sualpha_inani_1_2MW\\' AND d = \\'INV05\\' AND time >= '+str(From)+\"000\"+'ms AND time <= '+str(To)+\"000\"+'ms group by time(1d,-330m), \"d\", \"p\" fill(null)')\nresult7 = client.query('SELECT last(EAE_DAY) FROM \"Day\" where p = \\'sualpha_inani_1_2MW\\' AND d = \\'INV06\\' AND time >= '+str(From)+\"000\"+'ms AND time <= '+str(To)+\"000\"+'ms group by time(1d,-330m), \"d\", \"p\" fill(null)')\nresult8 = client.query('SELECT last(EAE_DAY) FROM \"Day\" where p = \\'sualpha_inani_1_2MW\\' AND d = \\'INV07\\' AND time >= '+str(From)+\"000\"+'ms AND time <= '+str(To)+\"000\"+'ms group by time(1d,-330m), \"d\", \"p\" fill(null)')\nresult9 = client.query('SELECT last(EAE_DAY) FROM \"Day\" where p = \\'sualpha_inani_1_2MW\\' AND d = \\'INV08\\' AND time >= '+str(From)+\"000\"+'ms AND time <= '+str(To)+\"000\"+'ms group by time(1d,-330m), \"d\", \"p\" fill(null)')\nresult10 = client.query('SELECT last(EAE_DAY) FROM \"Day\" where p = \\'sualpha_inani_1_2MW\\' AND d = \\'INV09\\' AND time >= '+str(From)+\"000\"+'ms AND time <= '+str(To)+\"000\"+'ms group by time(1d,-330m), \"d\", \"p\" fill(null)')\nresult11 = client.query('SELECT last(EAE_DAY) FROM \"Day\" where p = \\'sualpha_inani_1_2MW\\' AND d = \\'INV10\\' AND time >= '+str(From)+\"000\"+'ms AND time <= '+str(To)+\"000\"+'ms group by time(1d,-330m), \"d\", \"p\" fill(null)')\nresult12 = client.query('SELECT last(EAE_DAY) FROM \"Day\" where p = \\'sualpha_inani_1_2MW\\' AND d = \\'INV11\\' AND time >= '+str(From)+\"000\"+'ms AND time <= '+str(To)+\"000\"+'ms group by time(1d,-330m), \"d\", \"p\" fill(null)')\nresult13 = client.query('SELECT last(EAE_DAY) FROM \"Day\" where p = \\'sualpha_inani_1_2MW\\' AND d = \\'INV12\\' AND time >= '+str(From)+\"000\"+'ms AND time <= '+str(To)+\"000\"+'ms group by time(1d,-330m), \"d\", \"p\" fill(null)')\n\n\npoints = list(result.get_points(measurement='Day'))\n#print(points)\ndf = pd.DataFrame(points) \ndf[\"Date_IST\"] = pd.to_datetime(df[\"time\"]) + pd.DateOffset(hours=5, minutes=30)\ndf.Date_IST = pd.to_datetime(df.Date_IST)\ndf.rename(columns = {'last':'EM01_EAE_DAY'}, inplace = True)\ndf.drop(\"time\", axis=1, inplace=True)\ndf['EM01_EAE_DAY'] = df['EM01_EAE_DAY'].fillna(0)\n\n\npoints1 = list(result1.get_points(measurement='Day'))\n#print(points)\ndf1 = pd.DataFrame(points1) \ndf1[\"Date_IST\"] = pd.to_datetime(df1[\"time\"]) + pd.DateOffset(hours=5, minutes=30)\ndf1.Date_IST = pd.to_datetime(df1.Date_IST)\ndf1.rename(columns = {'last':'EM02_EAE_DAY'}, inplace = True)\ndf1.drop(\"time\", axis=1, inplace=True)\ndf1['EM02_EAE_DAY'] = df1['EM02_EAE_DAY'].fillna(0)\n\npoints2 = list(result2.get_points(measurement='Day'))\n#print(points)\ndf2 = pd.DataFrame(points2) \ndf2[\"Date_IST\"] = pd.to_datetime(df2[\"time\"]) + pd.DateOffset(hours=5, minutes=30)\ndf2.Date_IST = pd.to_datetime(df2.Date_IST)\ndf2.rename(columns = {'last':'INV01_EAE_DAY'}, inplace = True)\ndf2.drop(\"time\", axis=1, inplace=True)\ndf2['INV01_EAE_DAY'] = df2['INV01_EAE_DAY'].fillna(0)\n\npoints3 = list(result3.get_points(measurement='Day'))\n#print(points)\ndf3 = pd.DataFrame(points3) \ndf3[\"Date_IST\"] = pd.to_datetime(df3[\"time\"]) + pd.DateOffset(hours=5, minutes=30)\ndf3.Date_IST = pd.to_datetime(df3.Date_IST)\ndf3.rename(columns = {'last':'INV02_EAE_DAY'}, inplace = True)\ndf3.drop(\"time\", axis=1, inplace=True)\ndf3['INV02_EAE_DAY'] = df3['INV02_EAE_DAY'].fillna(0)\n\n\npoints4 = list(result4.get_points(measurement='Day'))\n#print(points)\ndf4 = pd.DataFrame(points4) \ndf4[\"Date_IST\"] = pd.to_datetime(df4[\"time\"]) + pd.DateOffset(hours=5, minutes=30)\ndf4.Date_IST = pd.to_datetime(df4.Date_IST)\ndf4.rename(columns = {'last':'INV03_EAE_DAY'}, inplace = True)\ndf4.drop(\"time\", axis=1, inplace=True)\ndf4['INV03_EAE_DAY'] = df4['INV03_EAE_DAY'].fillna(0)\n\npoints5 = list(result5.get_points(measurement='Day'))\n#print(points)\ndf5 = pd.DataFrame(points5) \ndf5[\"Date_IST\"] = pd.to_datetime(df5[\"time\"]) + pd.DateOffset(hours=5, minutes=30)\ndf5.Date_IST = pd.to_datetime(df5.Date_IST)\ndf5.rename(columns = {'last':'INV04_EAE_DAY'}, inplace = True)\ndf5.drop(\"time\", axis=1, inplace=True)\ndf5['INV04_EAE_DAY'] = df5['INV04_EAE_DAY'].fillna(0)\n\npoints6 = list(result6.get_points(measurement='Day'))\n#print(points)\ndf6 = pd.DataFrame(points6) \ndf6[\"Date_IST\"] = pd.to_datetime(df6[\"time\"]) + pd.DateOffset(hours=5, minutes=30)\ndf6.Date_IST = pd.to_datetime(df6.Date_IST)\ndf6.rename(columns = {'last':'INV05_EAE_DAY'}, inplace = True)\ndf6.drop(\"time\", axis=1, inplace=True)\ndf6['INV05_EAE_DAY'] = df6['INV05_EAE_DAY'].fillna(0)\n\n\npoints7 = list(result7.get_points(measurement='Day'))\n#print(points)\ndf7 = pd.DataFrame(points7) \ndf7[\"Date_IST\"] = pd.to_datetime(df7[\"time\"]) + pd.DateOffset(hours=5, minutes=30)\ndf7.Date_IST = pd.to_datetime(df7.Date_IST)\ndf7.rename(columns = {'last':'INV06_EAE_DAY'}, inplace = True)\ndf7.drop(\"time\", axis=1, inplace=True)\ndf7['INV06_EAE_DAY'] = df7['INV06_EAE_DAY'].fillna(0)\n\npoints8 = list(result8.get_points(measurement='Day'))\n#print(points)\ndf8 = pd.DataFrame(points8) \ndf8[\"Date_IST\"] = pd.to_datetime(df8[\"time\"]) + pd.DateOffset(hours=5, minutes=30)\ndf8.Date_IST = pd.to_datetime(df8.Date_IST)\ndf8.rename(columns = {'last':'INV07_EAE_DAY'}, inplace = True)\ndf8.drop(\"time\", axis=1, inplace=True)\ndf8['INV07_EAE_DAY'] = df8['INV07_EAE_DAY'].fillna(0)\n\npoints9 = list(result9.get_points(measurement='Day'))\n#print(points)\ndf9 = pd.DataFrame(points9) \ndf9[\"Date_IST\"] = pd.to_datetime(df9[\"time\"]) + pd.DateOffset(hours=5, minutes=30)\ndf9.Date_IST = pd.to_datetime(df9.Date_IST)\ndf9.rename(columns = {'last':'INV08_EAE_DAY'}, inplace = True)\ndf9.drop(\"time\", axis=1, inplace=True)\ndf9['INV08_EAE_DAY'] = df9['INV08_EAE_DAY'].fillna(0)\n\npoints10 = list(result10.get_points(measurement='Day'))\n#print(points)\ndf10 = pd.DataFrame(points10) \ndf10[\"Date_IST\"] = pd.to_datetime(df10[\"time\"]) + pd.DateOffset(hours=5, minutes=30)\ndf10.Date_IST = pd.to_datetime(df10.Date_IST)\ndf10.rename(columns = {'last':'INV09_EAE_DAY'}, inplace = True)\ndf10.drop(\"time\", axis=1, inplace=True)\ndf10['INV09_EAE_DAY'] = df10['INV09_EAE_DAY'].fillna(0)\n\npoints11 = list(result11.get_points(measurement='Day'))\n#print(points)\ndf11 = pd.DataFrame(points11) \ndf11[\"Date_IST\"] = pd.to_datetime(df11[\"time\"]) + pd.DateOffset(hours=5, minutes=30)\ndf11.Date_IST = pd.to_datetime(df11.Date_IST)\ndf11.rename(columns = {'last':'INV10_EAE_DAY'}, inplace = True)\ndf11.drop(\"time\", axis=1, inplace=True)\ndf11['INV10_EAE_DAY'] = df11['INV10_EAE_DAY'].fillna(0)\n\n\npoints12 = list(result12.get_points(measurement='Day'))\n#print(points)\ndf12 = pd.DataFrame(points12) \ndf12[\"Date_IST\"] = pd.to_datetime(df12[\"time\"]) + pd.DateOffset(hours=5, minutes=30)\ndf12.Date_IST = pd.to_datetime(df12.Date_IST)\ndf12.rename(columns = {'last':'INV11_EAE_DAY'}, inplace = True)\ndf12.drop(\"time\", axis=1, inplace=True)\ndf12['INV11_EAE_DAY'] = df12['INV11_EAE_DAY'].fillna(0)\n\npoints13 = list(result13.get_points(measurement='Day'))\n#print(points)\ndf13 = pd.DataFrame(points13) \ndf13[\"Date_IST\"] = pd.to_datetime(df13[\"time\"]) + pd.DateOffset(hours=5, minutes=30)\ndf13.Date_IST = pd.to_datetime(df13.Date_IST)\ndf13.rename(columns = {'last':'INV12_EAE_DAY'}, inplace = True)\ndf13.drop(\"time\", axis=1, inplace=True)\ndf13['INV12_EAE_DAY'] = df13['INV12_EAE_DAY'].fillna(0)\n\n#df1.fillna(method='ffill', inplace=True)\n\ndf14 = pd.merge(pd.merge(pd.merge(pd.merge(pd.merge(df,df1,on='Date_IST'),df2,on='Date_IST'),df3,on='Date_IST'),df4,on='Date_IST'),df5,on='Date_IST')\n\ndf15 = pd.merge(pd.merge(pd.merge(pd.merge(pd.merge(df14,df6,on='Date_IST'),df7,on='Date_IST'),df8,on='Date_IST'),df9,on='Date_IST'),df10,on='Date_IST')\n\ndffinal = pd.merge(pd.merge(pd.merge(df15,df11,on='Date_IST'),df12,on='Date_IST'),df13,on='Date_IST')\n\n#dffinal = pd.merge(df4, df5, on=\"Date_IST\")\n\n\n\n\ndffinal['Date'] = dffinal['Date_IST'].dt.date\ndffinal.drop('Date_IST', inplace=True, axis=1)\n#dffinal['Est_Gen_Day'] = pd.to_numeric(dffinal['Est_Gen_Day'])\n#dffinal['Est_Gen_Day'] = dffinal['Est_Gen_Day'] / 1000\n#dffinal['EAE_DAY'] = pd.to_numeric(dffinal['EAE_DAY'])\n#dffinal['EAE_DAY'] = dffinal['EAE_DAY'] / 1000\nprint(dffinal)\n\nDate = dffinal['Date'].tolist()\nEM01_EAE_DAY_MWh  = dffinal['EM01_EAE_DAY'].tolist()\nEM02_EAE_DAY_MWh  = dffinal['EM02_EAE_DAY'].tolist()\nINV01_EAE_DAY_MWh = dffinal['INV01_EAE_DAY'].tolist()\nINV02_EAE_DAY_MWh = dffinal['INV02_EAE_DAY'].tolist()\nINV03_EAE_DAY_MWh = dffinal['INV03_EAE_DAY'].tolist()\nINV04_EAE_DAY_MWh = dffinal['INV04_EAE_DAY'].tolist()\nINV05_EAE_DAY_MWh = dffinal['INV05_EAE_DAY'].tolist()\nINV06_EAE_DAY_MWh = dffinal['INV06_EAE_DAY'].tolist()\nINV07_EAE_DAY_MWh = dffinal['INV07_EAE_DAY'].tolist()\nINV08_EAE_DAY_MWh = dffinal['INV08_EAE_DAY'].tolist()\nINV09_EAE_DAY_MWh = dffinal['INV09_EAE_DAY'].tolist()\nINV10_EAE_DAY_MWh = dffinal['INV10_EAE_DAY'].tolist()\nINV11_EAE_DAY_MWh = dffinal['INV11_EAE_DAY'].tolist()\nINV12_EAE_DAY_MWh = dffinal['INV12_EAE_DAY'].tolist()\n\ndfexcel = pd.DataFrame(\n{'Date': Date,\n'EM01_EAE_DAY_MWh': EM01_EAE_DAY_MWh,\n'EM02_EAE_DAY_MWh': EM02_EAE_DAY_MWh,\n'INV01_EAE_DAY_MWh': INV01_EAE_DAY_MWh,\n'INV02_EAE_DAY_MWh': INV02_EAE_DAY_MWh,\n'INV03_EAE_DAY_MWh': INV03_EAE_DAY_MWh,\n'INV04_EAE_DAY_MWh': INV04_EAE_DAY_MWh,\n'INV05_EAE_DAY_MWh': INV05_EAE_DAY_MWh,\n'INV06_EAE_DAY_MWh': INV06_EAE_DAY_MWh,\n'INV07_EAE_DAY_MWh': INV07_EAE_DAY_MWh,\n'INV08_EAE_DAY_MWh': INV08_EAE_DAY_MWh,\n'INV09_EAE_DAY_MWh': INV09_EAE_DAY_MWh,\n'INV10_EAE_DAY_MWh': INV10_EAE_DAY_MWh,\n'INV11_EAE_DAY_MWh': INV11_EAE_DAY_MWh,\n'INV12_EAE_DAY_MWh': INV12_EAE_DAY_MWh\n})\n\ndfexcel = dfexcel.round(decimals = 2)\n#print(dfexcel)\ntodaystr = str(today)\nextension = \".csv\"\noutname = 'INANI_DGR_MM_' + todaystr + extension\n\noutdir = 'INANI_DGR_Report'\nfullname = os.path.join(os.path.dirname(__file__), outdir)\nif not os.path.exists(fullname):\n    os.mkdir(fullname)\n    \ndfexcel.to_csv(f\"{fullname}/{outname}\", index = False)\n\n#dfexcel.to_csv(r'DGR_Test.csv', index= False)\n\n# 7 days older file deletion #\n\npath = r\"/usr/src/node-red/INANI_DGR_Report/\"\nnow = time.time()\n\nfor filename in os.listdir(path):\n    # if os.stat(os.path.join(path, filename)).st_mtime < now - 7 * 86400:\n    if os.path.getmtime(os.path.join(path, filename)) < now - 7 * 86400:\n        if os.path.isfile(os.path.join(path, filename)):\n            os.remove(os.path.join(path, filename))",
        "output": "str",
        "x": 370,
        "y": 500,
        "wires": [
            [
                "f5ae29953b352119"
            ]
        ]
    },
    {
        "id": "f5ae29953b352119",
        "type": "file",
        "z": "da53a1c7cff4af8c",
        "name": "",
        "filename": "inanireport.py",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 600,
        "y": 500,
        "wires": [
            [
                "585ee3334c29687f"
            ]
        ]
    },
    {
        "id": "585ee3334c29687f",
        "type": "exec",
        "z": "da53a1c7cff4af8c",
        "command": "python3 inanireport.py",
        "addpay": "payload",
        "append": "",
        "useSpawn": "true",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 840,
        "y": 500,
        "wires": [
            [
                "a1050a68596a4737"
            ],
            [
                "fac5b8090ca0aa6e"
            ],
            []
        ]
    },
    {
        "id": "a1050a68596a4737",
        "type": "debug",
        "z": "da53a1c7cff4af8c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1130,
        "y": 480,
        "wires": []
    },
    {
        "id": "fac5b8090ca0aa6e",
        "type": "debug",
        "z": "da53a1c7cff4af8c",
        "name": "error",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 540,
        "wires": []
    },
    {
        "id": "16fd08f43378c61a",
        "type": "cronplus",
        "z": "da53a1c7cff4af8c",
        "name": "",
        "outputField": "payload",
        "timeZone": "Asia/Kolkata",
        "persistDynamic": false,
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "topic1",
                "payloadType": "date",
                "payload": "",
                "expressionType": "cron",
                "expression": "0 50 23 * * * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 100,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "55cb6a8f75b55587",
        "type": "cronplus",
        "z": "da53a1c7cff4af8c",
        "name": "",
        "outputField": "payload",
        "timeZone": "Asia/Kolkata",
        "persistDynamic": false,
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "topic1",
                "payloadType": "date",
                "payload": "",
                "expressionType": "cron",
                "expression": "0  45 19 * * * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 160,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "da05959c436c1438",
        "type": "influxdb in",
        "z": "da53a1c7cff4af8c",
        "d": true,
        "influxdb": "",
        "name": "inani1_2MW",
        "query": "SELECT last(\"EAE_DAY\") FROM \"Day\" WHERE (\"p\" = 'sualpha_inani_1_2MW' AND \"d\" = 'EM01') AND time >= now() - 2d GROUP BY time(1d,-330m) fill(null)",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "organisation",
        "x": 490,
        "y": 660,
        "wires": [
            [
                "1de5d10c33a68d18"
            ]
        ]
    },
    {
        "id": "4f750f8278921e37",
        "type": "inject",
        "z": "da53a1c7cff4af8c",
        "d": true,
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "300",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 237.5,
        "y": 653.75,
        "wires": [
            [
                "da05959c436c1438"
            ]
        ]
    },
    {
        "id": "1de5d10c33a68d18",
        "type": "debug",
        "z": "da53a1c7cff4af8c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 757.5,
        "y": 673.75,
        "wires": []
    },
    {
        "id": "e1ff2aadfe52a775",
        "type": "function",
        "z": "da53a1c7cff4af8c",
        "name": "",
        "func": "var tmp = msg.payload;\n//let message = {\n\n\t//attachments : [\n\t\t//{ \n\t\t    //filename: 'Test1.csv',\n\t\t    //path: 'C:\\Users\\IPLON\\Documents\\Test1.CSV'\n\t\t//}\n//\t\t       ]\n//}\nfunction sleep(milliseconds) {\n  const start = Date.now();\n  while (Date.now() - start < milliseconds);\n}\n\n//sleep(60000);\nfunction formatDate(date) {\n    var d = new Date(date),\n        month = '' + (d.getMonth() + 1),\n        day = '' + d.getDate(),\n        year = d.getFullYear();\n\n    if (month.length < 2) \n        month = '0' + month;\n    if (day.length < 2) \n        day = '0' + day;\n\n    return [year, month, day].join('-');\n}\n\nvar today = new Date();\nvar toDate = formatDate(today)\nnode.warn('sucess');\nmsg.to = \"venkateshprabhu@iplon.in\",\"kamaleish@iplon.in\",\"vignesh@iplon.in\";\nmsg.from =  \"Software.VControl@iplon.co.in\"; //\"iplonindia2022@gmail.com\";\nmsg.topic = \"iPLON_Daily Generation Report_INANI MW\";\nmsg.payload = \"Dear INANI Team,           PFA Daily Report\";\nlet text1 = \"INANI_DGR_MM_\";\nlet text2 = toDate;\nlet exten = '.csv';\nlet result = text1.concat(text2, exten);\nlet filepath = '/usr/src/node-red/INANI_DGR_Report/'\nlet filepath_1 = filepath.concat(result)\nmsg.attachments = [{\n\t                filename: result,\n                    path: filepath_1\n                    }// stream this file\n\t\t\t\t  ];\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 607.5,
        "y": 753.75,
        "wires": [
            [
                "9b7963c0c8eeb080",
                "28c431c63d9d21fe"
            ]
        ]
    },
    {
        "id": "9b7963c0c8eeb080",
        "type": "debug",
        "z": "da53a1c7cff4af8c",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1137.5,
        "y": 713.75,
        "wires": []
    },
    {
        "id": "84497654db78b1a7",
        "type": "cronplus",
        "z": "da53a1c7cff4af8c",
        "name": "",
        "outputField": "payload",
        "timeZone": "Asia/Kolkata",
        "persistDynamic": false,
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "topic1",
                "payloadType": "date",
                "payload": "",
                "expressionType": "cron",
                "expression": "0  00 20 * * * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 307.5,
        "y": 753.75,
        "wires": [
            [
                "e1ff2aadfe52a775"
            ]
        ]
    },
    {
        "id": "28c431c63d9d21fe",
        "type": "e-mail",
        "z": "da53a1c7cff4af8c",
        "server": "smtp.gmail.com",
        "port": "25",
        "secure": false,
        "tls": true,
        "name": "kamaleish@iplon.in,vignesh@iplon.in,venkateshprabhu@iplon.in",
        "dname": "Mail ",
        "x": 1157.5,
        "y": 793.75,
        "wires": []
    },
    {
        "id": "fc672842.a00258",
        "type": "inject",
        "z": "fca45c0d043a12a2",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 240,
        "y": 260,
        "wires": [
            [
                "b25e3277.3c2e1"
            ]
        ]
    },
    {
        "id": "b25e3277.3c2e1",
        "type": "function",
        "z": "fca45c0d043a12a2",
        "name": "set payload",
        "func": "msg = {};\nmsg.payload = [];\n\nmsg.payload[0] = {\n         \"id\": \"set-utc-time-now\",\n         \"name\": \"Set the current time in UTC\",\n         \"description\": \"Set the current time in UTC\",\n         \"request\": {\n             \"url\":\"{{apiBaseUrl}}/utc/settime\",\n             \"method\": \"Post\",\n             \"body\":{\n                 \"mode\": \"urlencoded\",\n                 \"urlencoded\": [\n                    {\n                     \"key\": \"nation\",\n                     \"value\": \"ko-kr\",\n                     \"description\" : \"nation code\"\n                    },\n                    {\n                     \"key\": \"nation2\",\n                     \"value\": \"ko-kr\"\n                    }\n                ]\n             }\n         }\n}\n\nmsg.payload[1] = {\n         \"id\": \"get-utc-time-now\",\n         \"name\": \"Get the current time in UTC\",\n         \"description\": \"Get the current time in UTC\",\n         \"request\": \"{{apiBaseUrl}}/utc/now?a=a\"\n}\n \n \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 260,
        "wires": [
            [
                "8f0d17f2.22ad08"
            ]
        ]
    },
    {
        "id": "17b5c8b4.023597",
        "type": "debug",
        "z": "fca45c0d043a12a2",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 910,
        "y": 260,
        "wires": []
    },
    {
        "id": "44086fc4.83877",
        "type": "file",
        "z": "fca45c0d043a12a2",
        "name": "",
        "filename": "/download/collection.json",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1000,
        "y": 300,
        "wires": [
            [
                "33dd9ec1.8c4352"
            ]
        ]
    },
    {
        "id": "33dd9ec1.8c4352",
        "type": "debug",
        "z": "fca45c0d043a12a2",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1230,
        "y": 300,
        "wires": []
    },
    {
        "id": "8f0d17f2.22ad08",
        "type": "postman",
        "z": "fca45c0d043a12a2",
        "name": "Payload to Postman Collection JSON",
        "apiBaseUrl": "http://localhost",
        "collectionName": "xmysql collection",
        "version": "0.0.1",
        "x": 650,
        "y": 260,
        "wires": [
            [
                "17b5c8b4.023597",
                "44086fc4.83877"
            ]
        ]
    },
    {
        "id": "c6896b6e.7a35b8",
        "type": "function",
        "z": "fca45c0d043a12a2",
        "name": "set payload",
        "func": "\nmsg.apiBaseUrl = msg.payload.apiBaseUrl;\nmsg.collectionName = msg.payload.collectionName;\nmsg.version = msg.payload.version;\n\nmsg.payload = msg.payload.items;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 420,
        "wires": [
            [
                "debfaca0.10b3a",
                "42e5a08c.37c08"
            ]
        ]
    },
    {
        "id": "42e5a08c.37c08",
        "type": "postman",
        "z": "fca45c0d043a12a2",
        "name": "Payload to Postman Collection JSON",
        "apiBaseUrl": "",
        "collectionName": "",
        "version": "",
        "x": 730,
        "y": 400,
        "wires": [
            [
                "35724443.92ec9c",
                "d81583a.6a37e8"
            ]
        ]
    },
    {
        "id": "56f3c1a5.e79d",
        "type": "http in",
        "z": "fca45c0d043a12a2",
        "name": "",
        "url": "/postman/create/collection",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 250,
        "y": 420,
        "wires": [
            [
                "c6896b6e.7a35b8"
            ]
        ]
    },
    {
        "id": "35724443.92ec9c",
        "type": "http response",
        "z": "fca45c0d043a12a2",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1030,
        "y": 400,
        "wires": []
    },
    {
        "id": "656c8102.2b047",
        "type": "inject",
        "z": "fca45c0d043a12a2",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 220,
        "y": 600,
        "wires": [
            [
                "bcbe9b6.4221768"
            ]
        ]
    },
    {
        "id": "bcbe9b6.4221768",
        "type": "function",
        "z": "fca45c0d043a12a2",
        "name": "set payload",
        "func": "msg = {};\nmsg.payload = {};\n\nmsg.payload.apiBaseUrl = 'http://localhost/api';\nmsg.payload.collectionName = 'postman collection';\nmsg.payload.version = '0.0.1';\nmsg.payload.items = [];\n\nmsg.payload.items[0] = {\n         \"id\": \"set-utc-time-now\",\n         \"name\": \"Set the current time in UTC\",\n         \"description\": \"Set the current time in UTC\",\n         \"request\": {\n             \"url\":\"{{apiBaseUrl}}/utc/settime\",\n             \"method\": \"Post\",\n             \"body\":{\n                 \"mode\": \"urlencoded\",\n                 \"urlencoded\": [\n                    {\n                     \"key\": \"nation\",\n                     \"value\": \"ko-kr\",\n                     \"description\" : \"nation code\"\n                    },\n                    {\n                     \"key\": \"nation2\",\n                     \"value\": \"ko-kr\"\n                    }\n                ]\n             }\n         }\n}\n\nmsg.payload.items[1] = {\n         \"id\": \"get-utc-time-now\",\n         \"name\": \"Get the current time in UTC\",\n         \"description\": \"Get the current time in UTC\",\n         \"request\": \"{{apiBaseUrl}}/utc/now?a=a\"\n}\n \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 600,
        "wires": [
            [
                "d2349579.556098"
            ]
        ]
    },
    {
        "id": "d2349579.556098",
        "type": "http request",
        "z": "fca45c0d043a12a2",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://localhost:1880/postman/create/collection",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 590,
        "y": 600,
        "wires": [
            [
                "335c5bc1.8d6524"
            ]
        ]
    },
    {
        "id": "335c5bc1.8d6524",
        "type": "debug",
        "z": "fca45c0d043a12a2",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 790,
        "y": 600,
        "wires": []
    },
    {
        "id": "d81583a.6a37e8",
        "type": "debug",
        "z": "fca45c0d043a12a2",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1050,
        "y": 460,
        "wires": []
    },
    {
        "id": "debfaca0.10b3a",
        "type": "debug",
        "z": "fca45c0d043a12a2",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 650,
        "y": 460,
        "wires": []
    },
    {
        "id": "891b3e25.76e4c",
        "type": "inject",
        "z": "7283d7a585b3b2fb",
        "name": "",
        "repeat": "1",
        "crontab": "",
        "once": false,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 290,
        "y": 160,
        "wires": [
            [
                "64a9bc70.9b5644"
            ]
        ]
    },
    {
        "id": "64a9bc70.9b5644",
        "type": "function",
        "z": "7283d7a585b3b2fb",
        "name": "Random Data",
        "func": "var now = ( new Date() ).getTime();\nvar value = Math.floor( Math.random() * 100 );\nmsg.payload = {\n    tstamp: now,\n    data: value\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 532,
        "y": 160,
        "wires": [
            [
                "9c566cfe.63a99"
            ]
        ]
    },
    {
        "id": "9c566cfe.63a99",
        "type": "iot-datasource",
        "z": "7283d7a585b3b2fb",
        "name": "Random Datasource",
        "tstampField": "",
        "dataField": "",
        "disableDiscover": false,
        "x": 820,
        "y": 162,
        "wires": [
            [
                "76b3f6ae23e6da50"
            ]
        ]
    },
    {
        "id": "cca5fe7a.335a",
        "type": "inject",
        "z": "7283d7a585b3b2fb",
        "name": "",
        "repeat": "1",
        "crontab": "",
        "once": false,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 290,
        "y": 340,
        "wires": [
            [
                "37e83d85.c817c2"
            ]
        ]
    },
    {
        "id": "37e83d85.c817c2",
        "type": "function",
        "z": "7283d7a585b3b2fb",
        "name": "Random Data",
        "func": "var now = ( new Date() ).getTime();\nvar value = Math.floor( Math.random() * 100 );\nmsg.payload = {\n    tstamp: now,\n    data: value\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 532,
        "y": 340,
        "wires": [
            [
                "adfd9b1a.520268"
            ]
        ]
    },
    {
        "id": "adfd9b1a.520268",
        "type": "iot-datasource",
        "z": "7283d7a585b3b2fb",
        "name": "Random Datasource",
        "tstampField": "",
        "dataField": "",
        "disableDiscover": false,
        "x": 821,
        "y": 340,
        "wires": [
            [
                "17605e.ffe89fa2"
            ]
        ]
    },
    {
        "id": "17605e.ffe89fa2",
        "type": "function",
        "z": "7283d7a585b3b2fb",
        "name": "Random History",
        "func": "// Get request timestamps\nvar start = msg.payload.start;\nvar end = msg.payload.end;\n\nvar data = [];\nfor( var ts = start; ts < end; ts += 1000 )\n{\n    var value = Math.floor( Math.random() * 100 );\n    data.push( {\n        tstamp: ts,\n        data: value\n    } );\n}\nmsg.payload = data;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 817,
        "y": 443,
        "wires": [
            [
                "adfd9b1a.520268"
            ]
        ]
    },
    {
        "id": "83c0be0c.7c3f4",
        "type": "inject",
        "z": "7283d7a585b3b2fb",
        "name": "",
        "repeat": "1",
        "crontab": "",
        "once": false,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 250,
        "y": 600,
        "wires": [
            [
                "1c86e948.e37917"
            ]
        ]
    },
    {
        "id": "1c86e948.e37917",
        "type": "function",
        "z": "7283d7a585b3b2fb",
        "name": "Random Data",
        "func": "var now = ( new Date() ).getTime();\nvar value = Math.floor( Math.random() * 100 );\nmsg.payload = {\n    tstamp: now,\n    data: value\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 492,
        "y": 600,
        "wires": [
            [
                "9d399bc.f62c668"
            ]
        ]
    },
    {
        "id": "9d399bc.f62c668",
        "type": "iot-datasource",
        "z": "7283d7a585b3b2fb",
        "name": "Random Datasource",
        "tstampField": "",
        "dataField": "",
        "disableDiscover": false,
        "x": 781,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "f28351b4.0d7cb",
        "type": "inject",
        "z": "7283d7a585b3b2fb",
        "name": "",
        "repeat": "1",
        "crontab": "",
        "once": false,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 249,
        "y": 647,
        "wires": [
            [
                "8fd198d.f702e68"
            ]
        ]
    },
    {
        "id": "8fd198d.f702e68",
        "type": "function",
        "z": "7283d7a585b3b2fb",
        "name": "Random Data",
        "func": "var now = ( new Date() ).getTime();\nvar value = Math.floor( Math.random() * 50 ) + 25;\nmsg.payload = {\n    tstamp: now,\n    data: value\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 491,
        "y": 647,
        "wires": [
            [
                "4d6ef8ec.b29108"
            ]
        ]
    },
    {
        "id": "4d6ef8ec.b29108",
        "type": "iot-datasource",
        "z": "7283d7a585b3b2fb",
        "name": "Random Datasource 2",
        "tstampField": "",
        "dataField": "",
        "disableDiscover": false,
        "x": 780,
        "y": 647,
        "wires": [
            []
        ]
    },
    {
        "id": "5bbde735.a44218",
        "type": "inject",
        "z": "7283d7a585b3b2fb",
        "name": "",
        "repeat": "1",
        "crontab": "",
        "once": false,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 310,
        "y": 780,
        "wires": [
            [
                "2e833127.d17cce"
            ]
        ]
    },
    {
        "id": "2e833127.d17cce",
        "type": "function",
        "z": "7283d7a585b3b2fb",
        "name": "Random Data",
        "func": "var now = ( new Date() ).getTime();\nvar value = Math.floor( Math.random() * 100 );\nmsg.payload = {\n    myTimestamp: now,\n    myInnerData: {\n        x : value,\n        y : value + 100,\n        z : value - 100\n    }\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 552,
        "y": 780,
        "wires": [
            [
                "e7879b6c.187868"
            ]
        ]
    },
    {
        "id": "e7879b6c.187868",
        "type": "iot-datasource",
        "z": "7283d7a585b3b2fb",
        "name": "Random Datasource",
        "tstampField": "myTimestamp",
        "dataField": "myInnerData",
        "disableDiscover": false,
        "x": 840,
        "y": 782,
        "wires": [
            []
        ]
    },
    {
        "id": "76b3f6ae23e6da50",
        "type": "debug",
        "z": "7283d7a585b3b2fb",
        "name": "debug 13",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1020,
        "y": 140,
        "wires": []
    },
    {
        "id": "88096981.88df6",
        "type": "comment",
        "z": "430bd2ba824cc59c",
        "name": "2) Request protected data",
        "info": "",
        "x": 290,
        "y": 280,
        "wires": []
    },
    {
        "id": "88142578.39a2c",
        "type": "function",
        "z": "430bd2ba824cc59c",
        "name": "Build header and payload",
        "func": "msg.headers = {\n  'Authorization' : flow.get(\"bearer_token\")\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 360,
        "wires": [
            [
                "bfde2608.8101b"
            ]
        ]
    },
    {
        "id": "1abbf619.6524ca",
        "type": "inject",
        "z": "430bd2ba824cc59c",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 280,
        "y": 360,
        "wires": [
            [
                "88142578.39a2c"
            ]
        ]
    },
    {
        "id": "bfde2608.8101b",
        "type": "http request",
        "z": "430bd2ba824cc59c",
        "name": "GET Plant",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://api.enerest.world/api/v1/iplon/administration/plant/622a8cd2-e3d1-11eb-a4c6-960000a1d181",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 710,
        "y": 360,
        "wires": [
            [
                "a8295408.7a4ea8"
            ]
        ]
    },
    {
        "id": "6023edcb.a62c0c",
        "type": "debug",
        "z": "430bd2ba824cc59c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1110,
        "y": 360,
        "wires": []
    },
    {
        "id": "a8295408.7a4ea8",
        "type": "json",
        "z": "430bd2ba824cc59c",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 910,
        "y": 360,
        "wires": [
            [
                "6023edcb.a62c0c"
            ]
        ]
    },
    {
        "id": "524b5cfcc1c1129b",
        "type": "function",
        "z": "430bd2ba824cc59c",
        "name": "Build header and payload",
        "func": "msg.headers = {\n  'Authorization' : flow.get(\"bearer_token\")\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 460,
        "wires": [
            [
                "1718d97f389ae41a"
            ]
        ]
    },
    {
        "id": "c6fcb111a05d4d56",
        "type": "inject",
        "z": "430bd2ba824cc59c",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 280,
        "y": 460,
        "wires": [
            [
                "524b5cfcc1c1129b"
            ]
        ]
    },
    {
        "id": "1718d97f389ae41a",
        "type": "http request",
        "z": "430bd2ba824cc59c",
        "name": "GET Production Today",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://localhost:3000/d/OXeGgYnVk/inv_1?orgId=1",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "basic",
        "senderr": false,
        "headers": [],
        "x": 700,
        "y": 460,
        "wires": [
            [
                "a78c696c7901dbcf"
            ]
        ]
    },
    {
        "id": "3836ac37f05ea7b1",
        "type": "debug",
        "z": "430bd2ba824cc59c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1090,
        "y": 460,
        "wires": []
    },
    {
        "id": "42d912b0b5e9292f",
        "type": "function",
        "z": "430bd2ba824cc59c",
        "name": "array of urls",
        "func": "msg.url=[\n    \"https://api.enerest.world/api/v1/iplon/visualization/plant/622a8cd2-e3d1-11eb-a4c6-960000a1d181/channels?channelNames[]=ProdPac&dateFrom=today&dateTo=today\",\n    \"https://api.enerest.world/api/v1/iplon/visualization/plant/c18022f8-8d26-11eb-a8be-001e6799788c/channels?channelNames[]=ProdPac&dateFrom=today&dateTo=today\",\n    \"https://api.enerest.world/api/v1/iplon/visualization/plant/350abfbe-8d27-11eb-a8be-001e6799788c/channels?channelNames[]=ProdPac&dateFrom=today&dateTo=today\",\n    \"https://api.enerest.world/api/v1/iplon/visualization/plant/622a8cd2-e3d1-11eb-a4c6-960000a1d181/channels?channelNames[]=ProdPac&dateFrom=today&dateTo=today\",\n    \"https://api.enerest.world/api/v1/iplon/visualization/plant/c18022f8-8d26-11eb-a8be-001e6799788c/channels?channelNames[]=ProdPac&dateFrom=today&dateTo=today\",\n    \"https://api.enerest.world/api/v1/iplon/visualization/plant/350abfbe-8d27-11eb-a8be-001e6799788c/channels?channelNames[]=ProdPac&dateFrom=today&dateTo=today\",\n    \"https://api.enerest.world/api/v1/iplon/visualization/plant/622a8cd2-e3d1-11eb-a4c6-960000a1d181/channels?channelNames[]=ProdPac&dateFrom=today&dateTo=today\",\n    \"https://api.enerest.world/api/v1/iplon/visualization/plant/c18022f8-8d26-11eb-a8be-001e6799788c/channels?channelNames[]=ProdPac&dateFrom=today&dateTo=today\",\n    \"https://api.enerest.world/api/v1/iplon/visualization/plant/350abfbe-8d27-11eb-a8be-001e6799788c/channels?channelNames[]=ProdPac&dateFrom=today&dateTo=today\",\n    \"https://api.enerest.world/api/v1/iplon/visualization/plant/622a8cd2-e3d1-11eb-a4c6-960000a1d181/channels?channelNames[]=ProdPac&dateFrom=today&dateTo=today\",\n    \"https://api.enerest.world/api/v1/iplon/visualization/plant/c18022f8-8d26-11eb-a8be-001e6799788c/channels?channelNames[]=ProdPac&dateFrom=today&dateTo=today\",\n    \"https://api.enerest.world/api/v1/iplon/visualization/plant/350abfbe-8d27-11eb-a8be-001e6799788c/channels?channelNames[]=ProdPac&dateFrom=today&dateTo=today\",\n    \"https://api.enerest.world/api/v1/iplon/visualization/plant/622a8cd2-e3d1-11eb-a4c6-960000a1d181/channels?channelNames[]=ProdPac&dateFrom=today&dateTo=today\",\n    \"https://api.enerest.world/api/v1/iplon/visualization/plant/c18022f8-8d26-11eb-a8be-001e6799788c/channels?channelNames[]=ProdPac&dateFrom=today&dateTo=today\",\n    \"https://api.enerest.world/api/v1/iplon/visualization/plant/350abfbe-8d27-11eb-a8be-001e6799788c/channels?channelNames[]=ProdPac&dateFrom=today&dateTo=today\",\n    \"https://api.enerest.world/api/v1/iplon/visualization/plant/622a8cd2-e3d1-11eb-a4c6-960000a1d181/channels?channelNames[]=ProdPac&dateFrom=today&dateTo=today\",\n    \"https://api.enerest.world/api/v1/iplon/visualization/plant/c18022f8-8d26-11eb-a8be-001e6799788c/channels?channelNames[]=ProdPac&dateFrom=today&dateTo=today\",\n    \"https://api.enerest.world/api/v1/iplon/visualization/plant/350abfbe-8d27-11eb-a8be-001e6799788c/channels?channelNames[]=ProdPac&dateFrom=today&dateTo=today\",\n    \"https://api.enerest.world/api/v1/iplon/visualization/plant/622a8cd2-e3d1-11eb-a4c6-960000a1d181/channels?channelNames[]=ProdPac&dateFrom=today&dateTo=today\",\n    \"https://api.enerest.world/api/v1/iplon/visualization/plant/c18022f8-8d26-11eb-a8be-001e6799788c/channels?channelNames[]=ProdPac&dateFrom=today&dateTo=today\",\n    \"https://api.enerest.world/api/v1/iplon/visualization/plant/350abfbe-8d27-11eb-a8be-001e6799788c/channels?channelNames[]=ProdPac&dateFrom=today&dateTo=today\",\n    \"https://api.enerest.world/api/v1/iplon/visualization/plant/622a8cd2-e3d1-11eb-a4c6-960000a1d181/channels?channelNames[]=ProdPac&dateFrom=today&dateTo=today\",\n    \"https://api.enerest.world/api/v1/iplon/visualization/plant/c18022f8-8d26-11eb-a8be-001e6799788c/channels?channelNames[]=ProdPac&dateFrom=today&dateTo=today\",\n    \"https://api.enerest.world/api/v1/iplon/visualization/plant/350abfbe-8d27-11eb-a8be-001e6799788c/channels?channelNames[]=ProdPac&dateFrom=today&dateTo=today\",\n    \"https://api.enerest.world/api/v1/iplon/visualization/plant/622a8cd2-e3d1-11eb-a4c6-960000a1d181/channels?channelNames[]=ProdPac&dateFrom=today&dateTo=today\",\n    \"https://api.enerest.world/api/v1/iplon/visualization/plant/c18022f8-8d26-11eb-a8be-001e6799788c/channels?channelNames[]=ProdPac&dateFrom=today&dateTo=today\",\n    \"https://api.enerest.world/api/v1/iplon/visualization/plant/350abfbe-8d27-11eb-a8be-001e6799788c/channels?channelNames[]=ProdPac&dateFrom=today&dateTo=today\",\n    \"https://api.enerest.world/api/v1/iplon/visualization/plant/622a8cd2-e3d1-11eb-a4c6-960000a1d181/channels?channelNames[]=ProdPac&dateFrom=today&dateTo=today\",\n    \"https://api.enerest.world/api/v1/iplon/visualization/plant/c18022f8-8d26-11eb-a8be-001e6799788c/channels?channelNames[]=ProdPac&dateFrom=today&dateTo=today\",\n    \"https://api.enerest.world/api/v1/iplon/visualization/plant/350abfbe-8d27-11eb-a8be-001e6799788c/channels?channelNames[]=ProdPac&dateFrom=today&dateTo=today\",\n    \"https://api.enerest.world/api/v1/iplon/visualization/plant/622a8cd2-e3d1-11eb-a4c6-960000a1d181/channels?channelNames[]=ProdPac&dateFrom=today&dateTo=today\",\n    \"https://api.enerest.world/api/v1/iplon/visualization/plant/c18022f8-8d26-11eb-a8be-001e6799788c/channels?channelNames[]=ProdPac&dateFrom=today&dateTo=today\",\n    \"https://api.enerest.world/api/v1/iplon/visualization/plant/350abfbe-8d27-11eb-a8be-001e6799788c/channels?channelNames[]=ProdPac&dateFrom=today&dateTo=today\",\n    \"https://api.enerest.world/api/v1/iplon/visualization/plant/622a8cd2-e3d1-11eb-a4c6-960000a1d181/channels?channelNames[]=ProdPac&dateFrom=today&dateTo=today\",\n    \"https://api.enerest.world/api/v1/iplon/visualization/plant/c18022f8-8d26-11eb-a8be-001e6799788c/channels?channelNames[]=ProdPac&dateFrom=today&dateTo=today\",\n    \"https://api.enerest.world/api/v1/iplon/visualization/plant/350abfbe-8d27-11eb-a8be-001e6799788c/channels?channelNames[]=ProdPac&dateFrom=today&dateTo=today\",\n    \"https://api.enerest.world/api/v1/iplon/visualization/plant/622a8cd2-e3d1-11eb-a4c6-960000a1d181/channels?channelNames[]=ProdPac&dateFrom=today&dateTo=today\",\n    \"https://api.enerest.world/api/v1/iplon/visualization/plant/c18022f8-8d26-11eb-a8be-001e6799788c/channels?channelNames[]=ProdPac&dateFrom=today&dateTo=today\",\n    \"https://api.enerest.world/api/v1/iplon/visualization/plant/350abfbe-8d27-11eb-a8be-001e6799788c/channels?channelNames[]=ProdPac&dateFrom=today&dateTo=today\",\n    \"https://api.enerest.world/api/v1/iplon/visualization/plant/622a8cd2-e3d1-11eb-a4c6-960000a1d181/channels?channelNames[]=ProdPac&dateFrom=today&dateTo=today\",\n    \"https://api.enerest.world/api/v1/iplon/visualization/plant/c18022f8-8d26-11eb-a8be-001e6799788c/channels?channelNames[]=ProdPac&dateFrom=today&dateTo=today\",\n    \"https://api.enerest.world/api/v1/iplon/visualization/plant/350abfbe-8d27-11eb-a8be-001e6799788c/channels?channelNames[]=ProdPac&dateFrom=today&dateTo=today\",\n    \"https://api.enerest.world/api/v1/iplon/visualization/plant/622a8cd2-e3d1-11eb-a4c6-960000a1d181/channels?channelNames[]=ProdPac&dateFrom=today&dateTo=today\",\n    \"https://api.enerest.world/api/v1/iplon/visualization/plant/c18022f8-8d26-11eb-a8be-001e6799788c/channels?channelNames[]=ProdPac&dateFrom=today&dateTo=today\",\n    \"https://api.enerest.world/api/v1/iplon/visualization/plant/350abfbe-8d27-11eb-a8be-001e6799788c/channels?channelNames[]=ProdPac&dateFrom=today&dateTo=today\",\n    \"https://api.enerest.world/api/v1/iplon/visualization/plant/622a8cd2-e3d1-11eb-a4c6-960000a1d181/channels?channelNames[]=ProdPac&dateFrom=today&dateTo=today\",\n    \"https://api.enerest.world/api/v1/iplon/visualization/plant/c18022f8-8d26-11eb-a8be-001e6799788c/channels?channelNames[]=ProdPac&dateFrom=today&dateTo=today\",\n    \"https://api.enerest.world/api/v1/iplon/visualization/plant/350abfbe-8d27-11eb-a8be-001e6799788c/channels?channelNames[]=ProdPac&dateFrom=today&dateTo=today\"\n\n]\nfor(var i = 0; i <msg.url.length; i++)\n{ \n    var url=msg.url[i]\n \n    var obj={\n    url\n}\n node.send(obj);\n}\n\nreturn null\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 640,
        "wires": [
            [
                "04fa9912910b3998"
            ]
        ]
    },
    {
        "id": "659813364ba7f914",
        "type": "http request",
        "z": "430bd2ba824cc59c",
        "name": "GET Production Today",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 740,
        "y": 640,
        "wires": [
            [
                "bd9b5a552840651d"
            ]
        ]
    },
    {
        "id": "75100aeca690d368",
        "type": "inject",
        "z": "430bd2ba824cc59c",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 220,
        "y": 640,
        "wires": [
            [
                "42d912b0b5e9292f"
            ]
        ]
    },
    {
        "id": "04fa9912910b3998",
        "type": "function",
        "z": "430bd2ba824cc59c",
        "name": "url and token",
        "func": "msg.url\nmsg.headers = {\n  'Authorization' : flow.get(\"bearer_token\")\n};\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 640,
        "wires": [
            [
                "659813364ba7f914"
            ]
        ]
    },
    {
        "id": "bf3cce8cd6edd955",
        "type": "comment",
        "z": "430bd2ba824cc59c",
        "name": "reading multiple url's",
        "info": "",
        "x": 290,
        "y": 580,
        "wires": []
    },
    {
        "id": "6040797a85f1d89b",
        "type": "function",
        "z": "430bd2ba824cc59c",
        "name": "iteraton",
        "func": "let plantObj\n\nplantObj = []\n//for(j =0; j < msg.payload.length;j++)\nfor (var i =0; i < msg.payload[0].timestamp.length;i++)\n{\nvar obj={\n    Timestamp:msg.payload[0].timestamp[i],\n\"Swelect API_Test_Plant\":msg.payload[0].swelect_api_values[i],\n\"Swelect SBI_Admin_Office_Vizag\":msg.payload[0].swelect_sbi[i],\n\"OMPL 2 MWp Floating Plant\":msg.payload[0].ompl_2MWp[i],\n}\n\nplantObj.push(obj)\n}\nmsg.payload =plantObj\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 700,
        "wires": [
            [
                "614ce874b13915fe"
            ]
        ]
    },
    {
        "id": "614ce874b13915fe",
        "type": "csv",
        "z": "430bd2ba824cc59c",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": true,
        "x": 750,
        "y": 700,
        "wires": [
            [
                "163b1a6a76f8b566"
            ]
        ]
    },
    {
        "id": "bfc0f9a8f37dfdb3",
        "type": "function",
        "z": "430bd2ba824cc59c",
        "name": "object to array",
        "func": "\n let plantObj\n\nplantObj = []\n\n//for (i =0; i < msg.payload.length;i++)\n//{\n var swelect_api=msg.payload.Swelect_API_Test_Plant[0].dataPoints\n var keys=Object.keys(swelect_api);\n var swelect_api_values=Object.values(swelect_api);\n var swelect_sbi=Object.values(msg.payload.Swelect_SBI_Admin_Office_Vizag[0].dataPoints);\n var ompl_2MWp=Object.values(msg.payload.OMPL_2_MWp_Floating_Plant[0].dataPoints);\nvar obj={\n  timestamp:keys,\n       swelect_api_values,\n       swelect_sbi,\n       ompl_2MWp\n\n}\n\nplantObj.push(obj)\n//}\nmsg.payload =plantObj\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 700,
        "wires": [
            [
                "6040797a85f1d89b"
            ]
        ]
    },
    {
        "id": "163b1a6a76f8b566",
        "type": "file",
        "z": "430bd2ba824cc59c",
        "name": "sdsapi.csv",
        "filename": "/usr/src/node-red/sdsapi.csv",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 890,
        "y": 700,
        "wires": [
            [
                "305c8a66d2f86186"
            ]
        ]
    },
    {
        "id": "a78c696c7901dbcf",
        "type": "json",
        "z": "430bd2ba824cc59c",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 890,
        "y": 460,
        "wires": [
            [
                "3836ac37f05ea7b1"
            ]
        ]
    },
    {
        "id": "ff34b1d23d3b14a1",
        "type": "file in",
        "z": "430bd2ba824cc59c",
        "name": "opcua.csv",
        "filename": "/usr/src/node-red/sdsapi.csv",
        "filenameType": "str",
        "format": "lines",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 500,
        "y": 780,
        "wires": [
            [
                "f7f88c84995ebdf4"
            ]
        ]
    },
    {
        "id": "ed1dd64ed33d5435",
        "type": "inject",
        "z": "430bd2ba824cc59c",
        "name": "1) Insert nodeId items",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 300,
        "y": 780,
        "wires": [
            [
                "ff34b1d23d3b14a1"
            ]
        ]
    },
    {
        "id": "f7f88c84995ebdf4",
        "type": "csv",
        "z": "430bd2ba824cc59c",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": false,
        "include_null_values": true,
        "x": 650,
        "y": 780,
        "wires": [
            [
                "1026bb46b2b631bd"
            ]
        ]
    },
    {
        "id": "1026bb46b2b631bd",
        "type": "debug",
        "z": "430bd2ba824cc59c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "url",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 840,
        "y": 780,
        "wires": []
    },
    {
        "id": "bd9b5a552840651d",
        "type": "function",
        "z": "430bd2ba824cc59c",
        "name": "combine",
        "func": "context.data = context.data || {};\nswitch(msg.url){\n    case \"https://api.enerest.world/api/v1/iplon/visualization/plant/622a8cd2-e3d1-11eb-a4c6-960000a1d181/channels?channelNames[]=ProdPac&dateFrom=today&dateTo=today\":\n        context.data.Swelect_API_Test_Plant = msg.payload;\n        msg = null;\n        break;\n        \n    case \"https://api.enerest.world/api/v1/iplon/visualization/plant/c18022f8-8d26-11eb-a8be-001e6799788c/channels?channelNames[]=ProdPac&dateFrom=today&dateTo=today\":\n        context.data.Swelect_SBI_Admin_Office_Vizag = msg.payload;\n        msg = null;\n        break;\n    \n    case \"https://api.enerest.world/api/v1/iplon/visualization/plant/350abfbe-8d27-11eb-a8be-001e6799788c/channels?channelNames[]=ProdPac&dateFrom=today&dateTo=today\":\n        context.data.OMPL_2_MWp_Floating_Plant = msg.payload;\n        msg = null;\n        break;\n}\nif(context.data.Swelect_API_Test_Plant != null && context.data.Swelect_SBI_Admin_Office_Vizag != null&& context.data.OMPL_2_MWp_Floating_Plant != null){\n    var data_combine = {\n        \"Swelect_API_Test_Plant\": context.data.Swelect_API_Test_Plant,\n        \"Swelect_SBI_Admin_Office_Vizag\":context.data.Swelect_SBI_Admin_Office_Vizag,\n        \"OMPL_2_MWp_Floating_Plant\":context.data.OMPL_2_MWp_Floating_Plant\n        }\n    context.data = null\n    return {payload: data_combine};\n}  ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 640,
        "wires": [
            [
                "bfc0f9a8f37dfdb3"
            ]
        ]
    },
    {
        "id": "305c8a66d2f86186",
        "type": "debug",
        "z": "430bd2ba824cc59c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1090,
        "y": 700,
        "wires": []
    },
    {
        "id": "84f9b499e8f2fea7",
        "type": "http request",
        "z": "430bd2ba824cc59c",
        "name": "solarlog",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://auth.enerest.world/auth/realms/quotaapi/protocol/openid-connect/token",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 620,
        "y": 180,
        "wires": [
            [
                "0404ea46b874a22d"
            ]
        ]
    },
    {
        "id": "01d0ec41161fed26",
        "type": "function",
        "z": "430bd2ba824cc59c",
        "name": "Build header and payload",
        "func": "msg.headers = {\n  'Content-Type' : 'application/x-www-form-urlencoded'\n};\n\n// client backend-service\n/*\nmsg.payload = {'grant_type':'password', \n               'client_id':'backend-service',\n               'username':'alice',\n               'password':'alice',\n               'client_secret':'secret'\n              };\n*/\n\nmsg.payload = {'grant_type':'client_credentials', \n               'client_id':'650fb07e-8a18-4907-a6c4-e4f432f52cb2',\n               'client_secret':'b7f327e7-60de-4cb5-909a-ee916445e143'\n              };\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 180,
        "wires": [
            [
                "84f9b499e8f2fea7"
            ]
        ]
    },
    {
        "id": "f2edb8cbd5872dd2",
        "type": "comment",
        "z": "430bd2ba824cc59c",
        "name": "1) Request bearer access token",
        "info": "",
        "x": 290,
        "y": 100,
        "wires": []
    },
    {
        "id": "469ac06808829b9d",
        "type": "debug",
        "z": "430bd2ba824cc59c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1130,
        "y": 180,
        "wires": []
    },
    {
        "id": "0404ea46b874a22d",
        "type": "json",
        "z": "430bd2ba824cc59c",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 770,
        "y": 180,
        "wires": [
            [
                "a0dbeeb197c93509"
            ]
        ]
    },
    {
        "id": "a0dbeeb197c93509",
        "type": "function",
        "z": "430bd2ba824cc59c",
        "name": "set_bearer_token",
        "func": "flow.set(\"bearer_token\", \"Bearer \" + msg.payload.access_token);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 180,
        "wires": [
            [
                "469ac06808829b9d"
            ]
        ]
    },
    {
        "id": "a1415ae4e77af73e",
        "type": "comment",
        "z": "430bd2ba824cc59c",
        "name": "Bearer access token saved as flow variable",
        "info": "",
        "x": 1040,
        "y": 120,
        "wires": []
    },
    {
        "id": "40e2d76be3db9af6",
        "type": "inject",
        "z": "430bd2ba824cc59c",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "300",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 190,
        "y": 180,
        "wires": [
            [
                "01d0ec41161fed26"
            ]
        ]
    },
    {
        "id": "de8150aa.71733",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "name": "SetTimeRange",
        "func": "msg.fromdate=msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 200,
        "wires": [
            [
                "aeaaadf4.7dcb",
                "9d22cca6.a6c168",
                "1fce5cfb78bbced8"
            ]
        ]
    },
    {
        "id": "14f5cd67.1fbd6b",
        "type": "ui_template",
        "z": "f6f2187d.f17ca8",
        "group": "",
        "name": "Line Chart",
        "order": 2,
        "width": 0,
        "height": 0,
        "format": "<html>\n<iframe id=\"myFrame1\" width=\"600px\" height=\"300px\" style = \"overflow:hidden; margin:auto; border:0px solid green;\"></iframe>\n\n<script>\n//NOTE, more then one chart on a page, rename in the second and following \n//templates the \"myframe\" variable so that every template has a unique name.\n(function(scope) {\n    // watch msg object from Node-RED\n    scope.$watch('msg', function(msg) {\n        // new message received\n        var x = document.getElementById('myFrame1');\n        x.setAttribute('src', msg.payload); \n        });\n})(scope);\n</script>\n</html>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 1090,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "aeaaadf4.7dcb",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "name": "BuildTemplate",
        "func": "//NOTE, more then one chart on a page, rename in the second and following \n//templates the \"myframe\" variable so that every template has a unique name.\n\nlet panelid=2\n\nmsg.payload = \"http://localhost:3000/d-solo/OXeGgYnVk/inv_1?orgId=2\"+\n\"&refresh=1m\"+\n\"&theme=light\"+\n\"&from=\"+ msg.fromdate +\n\"&to=now&panelId=\"+panelid\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 180,
        "wires": [
            [
                "14f5cd67.1fbd6b"
            ]
        ]
    },
    {
        "id": "9d22cca6.a6c168",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "name": "BuildTemplate",
        "func": "//NOTE, more then one chart on a page, rename in the second and following \n//templates the \"myframe\" variable so that every template has a unique name.\n\nlet panelid=7\n\nmsg.payload = \"http://localhost:3000/d-solo/OXeGgYnVk/inv_1?orgId=2\"+\n\"&refresh=1m\"+\n\"&theme=dark\"+\n\"&from=\"+ msg.fromdate +\n\"&to=\"+ msg.enddate +\n\"&panelId=\"+panelid\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 240,
        "wires": [
            [
                "964cea47caf98b7e"
            ]
        ]
    },
    {
        "id": "a9fb70d370f4f6f1",
        "type": "ui_dropdown",
        "z": "f6f2187d.f17ca8",
        "name": "Range Dropdown",
        "label": "Interval",
        "tooltip": "",
        "place": "Select Interval",
        "group": "",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "7 D",
                "value": "now-7d",
                "type": "str"
            },
            {
                "label": "14 D",
                "value": "now-14d",
                "type": "str"
            },
            {
                "label": "20 D",
                "value": "now-20d",
                "type": "str"
            },
            {
                "label": "30 D",
                "value": "now-30d",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "topic",
        "topicType": "msg",
        "className": "",
        "x": 430,
        "y": 200,
        "wires": [
            [
                "de8150aa.71733"
            ]
        ]
    },
    {
        "id": "b372fba84ebeb01e",
        "type": "inject",
        "z": "f6f2187d.f17ca8",
        "name": "Trigger on start",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "2",
        "topic": "",
        "payload": "now-14d",
        "payloadType": "str",
        "x": 200,
        "y": 200,
        "wires": [
            [
                "a9fb70d370f4f6f1"
            ]
        ]
    },
    {
        "id": "964cea47caf98b7e",
        "type": "ui_template",
        "z": "f6f2187d.f17ca8",
        "group": "",
        "name": "Line Chart",
        "order": 2,
        "width": 0,
        "height": 0,
        "format": "<html>\n<iframe id=\"myFrame2\" width=\"600px\" height=\"300px\" style = \"overflow:hidden; margin:auto; border:0px solid green;\"></iframe>\n\n<script>\n//NOTE, more then one chart on a page, rename in the second and following \n//templates the \"myframe\" variable so that every template has a unique name.\n(function(scope) {\n    // watch msg object from Node-RED\n    scope.$watch('msg', function(msg) {\n        // new message received\n        var x = document.getElementById('myFrame2');\n        x.setAttribute('src', msg.payload); \n        });\n})(scope);\n</script>\n</html>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 1090,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "1fce5cfb78bbced8",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "name": "BuildTemplate",
        "func": "//NOTE, more then one chart on a page, rename in the second and following \n//templates the \"myframe\" variable so that every template has a unique name.\n\nlet panelid=8\n\nmsg.payload = \"http://localhost:3000/d-solo/OXeGgYnVk/inv_1?orgId=2\"+\n\"&refresh=1m\"+\n\"&theme=dark\"+\n\"&from=\"+ msg.fromdate +\n\"&to=\"+ msg.enddate +\n\"&panelId=\"+panelid\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 300,
        "wires": [
            [
                "f2caed9412adb10c"
            ]
        ]
    },
    {
        "id": "f2caed9412adb10c",
        "type": "ui_template",
        "z": "f6f2187d.f17ca8",
        "group": "",
        "name": "Line Chart",
        "order": 2,
        "width": 0,
        "height": 0,
        "format": "<html>\n<iframe id=\"myFrame3\" width=\"600px\" height=\"300px\" style = \"overflow:hidden; margin:auto; border:0px solid green;\"></iframe>\n\n<script>\n//NOTE, more then one chart on a page, rename in the second and following \n//templates the \"myframe\" variable so that every template has a unique name.\n(function(scope) {\n    // watch msg object from Node-RED\n    scope.$watch('msg', function(msg) {\n        // new message received\n        var x = document.getElementById('myFrame3');\n        x.setAttribute('src', msg.payload); \n        });\n})(scope);\n</script>\n</html>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 1110,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "0388d2fdf8b520bb",
        "type": "file in",
        "z": "18b91be20995c6da",
        "name": "",
        "filename": "/home/iplon/Desktop/poornima/inv1.jpg",
        "filenameType": "str",
        "format": "",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 870,
        "y": 180,
        "wires": [
            [
                "ea8eddf1fa818b9b"
            ]
        ]
    },
    {
        "id": "45c1a8cd7778165b",
        "type": "inject",
        "z": "18b91be20995c6da",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "timestamp",
        "payloadType": "str",
        "x": 140,
        "y": 340,
        "wires": [
            [
                "e1b67ff8a3b1f192",
                "45748483f7bd2907",
                "8ff6db906fee89e1",
                "18dd23c131d2e034"
            ]
        ]
    },
    {
        "id": "1f19807b9e72981b",
        "type": "puppeteer-page-screenshot",
        "z": "18b91be20995c6da",
        "name": "",
        "fullpage": true,
        "x": 450,
        "y": 180,
        "wires": [
            [
                "91b1368f6c457f2c"
            ]
        ]
    },
    {
        "id": "e1b67ff8a3b1f192",
        "type": "puppeteer-browser-launch",
        "z": "18b91be20995c6da",
        "timeout": "60000",
        "slowMo": 0,
        "headless": true,
        "debugport": 0,
        "devtools": true,
        "name": "",
        "x": 140,
        "y": 180,
        "wires": [
            [
                "e06c6c8b846755d4"
            ]
        ]
    },
    {
        "id": "91b1368f6c457f2c",
        "type": "jimp-image",
        "z": "18b91be20995c6da",
        "name": "",
        "data": "payload",
        "dataType": "msg",
        "ret": "img",
        "parameter1": "/home/iplon/Desktop/poornima/inv1.jpg",
        "parameter1Type": "str",
        "parameter2": "",
        "parameter2Type": "msg",
        "parameter3": "",
        "parameter3Type": "msg",
        "parameter4": "",
        "parameter4Type": "msg",
        "parameter5": "",
        "parameter5Type": "msg",
        "parameter6": "",
        "parameter6Type": "msg",
        "parameter7": "",
        "parameter7Type": "msg",
        "parameter8": "",
        "parameter8Type": "msg",
        "sendProperty": "payload",
        "sendPropertyType": "msg",
        "parameterCount": 1,
        "jimpFunction": "write",
        "selectedJimpFunction": {
            "name": "write",
            "fn": "write",
            "description": "Write to file. NOTE: You can specify an alternative file extension type to change the type. Currently support types are jpg, png, bmp.",
            "parameters": [
                {
                    "name": "filename",
                    "type": "str",
                    "required": true,
                    "hint": "Name of the file",
                    "defaultType": "str"
                }
            ]
        },
        "x": 630,
        "y": 180,
        "wires": [
            [
                "0388d2fdf8b520bb"
            ]
        ]
    },
    {
        "id": "e06c6c8b846755d4",
        "type": "puppeteer-page-goto",
        "z": "18b91be20995c6da",
        "name": "INV1",
        "url": "http://localhost:3000/d/OXeGgYnVk/inv_1?orgId=2&refresh=5m",
        "urltype": "str",
        "waitUntil": "networkidle0",
        "x": 290,
        "y": 180,
        "wires": [
            [
                "1f19807b9e72981b"
            ]
        ]
    },
    {
        "id": "2886c30da4e65f02",
        "type": "puppeteer-page-screenshot",
        "z": "18b91be20995c6da",
        "name": "",
        "fullpage": true,
        "x": 450,
        "y": 260,
        "wires": [
            [
                "e73359e1b3092327"
            ]
        ]
    },
    {
        "id": "e73359e1b3092327",
        "type": "jimp-image",
        "z": "18b91be20995c6da",
        "name": "",
        "data": "payload",
        "dataType": "msg",
        "ret": "img",
        "parameter1": "/home/iplon/Desktop/poornima/inv2.jpg",
        "parameter1Type": "str",
        "parameter2": "",
        "parameter2Type": "msg",
        "parameter3": "",
        "parameter3Type": "msg",
        "parameter4": "",
        "parameter4Type": "msg",
        "parameter5": "",
        "parameter5Type": "msg",
        "parameter6": "",
        "parameter6Type": "msg",
        "parameter7": "",
        "parameter7Type": "msg",
        "parameter8": "",
        "parameter8Type": "msg",
        "sendProperty": "payload",
        "sendPropertyType": "msg",
        "parameterCount": 1,
        "jimpFunction": "write",
        "selectedJimpFunction": {
            "name": "write",
            "fn": "write",
            "description": "Write to file. NOTE: You can specify an alternative file extension type to change the type. Currently support types are jpg, png, bmp.",
            "parameters": [
                {
                    "name": "filename",
                    "type": "str",
                    "required": true,
                    "hint": "Name of the file",
                    "defaultType": "str"
                }
            ]
        },
        "x": 590,
        "y": 260,
        "wires": [
            [
                "0c5aa936ea515d20"
            ]
        ]
    },
    {
        "id": "d567b659facc3bab",
        "type": "puppeteer-page-goto",
        "z": "18b91be20995c6da",
        "name": "INV2",
        "url": "http://localhost:3000/d/5oC9VDKVk/inv_2?orgId=2",
        "urltype": "str",
        "waitUntil": "networkidle0",
        "x": 290,
        "y": 260,
        "wires": [
            [
                "2886c30da4e65f02"
            ]
        ]
    },
    {
        "id": "0c5aa936ea515d20",
        "type": "file in",
        "z": "18b91be20995c6da",
        "name": "",
        "filename": "/home/iplon/Desktop/poornima/inv2.jpg",
        "filenameType": "str",
        "format": "",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 810,
        "y": 260,
        "wires": [
            [
                "0dc29ad66aac1844"
            ]
        ]
    },
    {
        "id": "45748483f7bd2907",
        "type": "puppeteer-browser-launch",
        "z": "18b91be20995c6da",
        "timeout": "60000",
        "slowMo": 0,
        "headless": true,
        "debugport": 0,
        "devtools": true,
        "name": "",
        "x": 140,
        "y": 260,
        "wires": [
            [
                "d567b659facc3bab"
            ]
        ]
    },
    {
        "id": "ea8eddf1fa818b9b",
        "type": "base64",
        "z": "18b91be20995c6da",
        "name": "",
        "action": "str",
        "property": "payload",
        "x": 1120,
        "y": 180,
        "wires": [
            [
                "3bd2cb29433d4503"
            ]
        ]
    },
    {
        "id": "0dc29ad66aac1844",
        "type": "base64",
        "z": "18b91be20995c6da",
        "name": "",
        "action": "str",
        "property": "payload",
        "x": 1040,
        "y": 260,
        "wires": [
            [
                "c877be334c24933d"
            ]
        ]
    },
    {
        "id": "186a78a6bca8b3a7",
        "type": "file",
        "z": "18b91be20995c6da",
        "name": "",
        "filename": "/home/iplon/Desktop/poornima/tamil.pdf",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 780,
        "y": 780,
        "wires": [
            [
                "67840405835f7247"
            ]
        ]
    },
    {
        "id": "145a4d16b2ca7ed1",
        "type": "pdfmake",
        "z": "18b91be20995c6da",
        "name": "",
        "outputType": "Buffer",
        "inputProperty": "payload",
        "options": "{}",
        "outputProperty": "payload",
        "x": 520,
        "y": 780,
        "wires": [
            [
                "186a78a6bca8b3a7"
            ]
        ]
    },
    {
        "id": "ba7bd6c993f1964a",
        "type": "template",
        "z": "18b91be20995c6da",
        "name": "Wattnexx",
        "field": "payload",
        "fieldType": "msg",
        "format": "json",
        "syntax": "mustache",
        "template": "{\n    \"pageSize\": \"A4\",\n    \"pageOrientation\": \"portrait\",\n    \"pageMargins\": [\n        40,\n        60,\n        40,\n        60\n    ],\n    \"info\": {\n        \"title\": \"Wattnexx reports\",\n        \"author\": \"Poornima\",\n        \"subject\": \"Monthly\",\n        \"keywords\": \"Micro Grid\"\n    },\n    \"content\": [\n        \"\\t\\t\\t\",\"Hysolwin Inverter Reports\",\n        \"\\n\",\n        \"\\n\",\n        \"1.Aim : \",\n        \"\\n\",\n        \"This report contains the details of all inverter of the site.\",\n        \"\\n\",\n        \"2. INV1 :\",\n        \"\\n\",\n        \"This screen shows the today generation,total generation & active power of the first inverter in plant.\",\n        \"\\n\",\n        {\n            \"image\": \"data:image/jpeg;base64,{{{payload.inv1}}}\",\n            \"alignment\": \"center\",\n            \"width\": 300\n        },\n        \"\\n\",\n        \"3.INV2 :\",\n        \"\\n\",\n        \"This screen shows the today generation,total generation & active power of the second inverter in plant.\",\n        \"\\n\",\n        {\n            \"image\": \"data:image/jpeg;base64,{{{payload.inv2}}}\",\n            \"alignment\": \"center\",\n            \"width\": 300\n        },\n        \"\\n\",\n        \"4.INV3 :\",\n        \"\\n\",\n        \"This screen shows the today generation,total generation & active power of the third inverter in plant.\",\n        \"\\n\",\n        {\n            \"image\": \"data:image/jpeg;base64,{{{payload.inv3}}}\",\n            \"alignment\": \"center\",\n            \"width\": 300\n        },\n        \"\\n\",\n        \"5.INV4 :\",\n        \"\\n\",\n        \"This screen shows the today generation,total generation & active power of the fourth inverter in plant.\",\n        \"\\n\",\n        {\n            \"image\": \"data:image/jpeg;base64,{{{payload.inv4}}}\",\n            \"alignment\": \"center\",\n            \"width\": 300\n        }\n    ]\n}",
        "output": "json",
        "x": 340,
        "y": 780,
        "wires": [
            [
                "145a4d16b2ca7ed1"
            ]
        ]
    },
    {
        "id": "c877be334c24933d",
        "type": "change",
        "z": "18b91be20995c6da",
        "name": "Change",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "inv2",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1180,
        "y": 260,
        "wires": [
            [
                "603bc6b18be2b558"
            ]
        ]
    },
    {
        "id": "603bc6b18be2b558",
        "type": "function",
        "z": "18b91be20995c6da",
        "name": "combine",
        "func": "context.data = context.data || {};\nswitch(msg.topic){\n    case \"inv1\":\n        context.data.inv1 = msg.payload;\n        msg = null;\n        break;\n    case \"inv2\":\n        context.data.inv2 = msg.payload;\n        msg = null;\n        break;\n    case \"inv3\":\n        context.data.inv3 = msg.payload;\n        msg = null;\n        break;\n    case \"inv4\":\n        context.data.inv4 = msg.payload;\n        msg = null;\n        break;\n}\nif (context.data.inv1 != null && context.data.inv2 != null && context.data.inv3 != null && context.data.inv4 != null){\n    var data_combine = {\n        \"inv1\": context.data.inv1,\n        \"inv2\": context.data.inv2,\n        \"inv3\": context.data.inv3,\n        \"inv4\": context.data.inv4\n       \n    }\n    context.data = null\n    return {payload: data_combine};\n}  ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 160,
        "y": 780,
        "wires": [
            [
                "ba7bd6c993f1964a"
            ]
        ]
    },
    {
        "id": "67840405835f7247",
        "type": "debug",
        "z": "18b91be20995c6da",
        "name": "debug 45",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1040,
        "y": 780,
        "wires": []
    },
    {
        "id": "7578e5e6c9fdefd1",
        "type": "file in",
        "z": "18b91be20995c6da",
        "name": "",
        "filename": "/home/iplon/Desktop/poornima/inv3.jpg",
        "filenameType": "str",
        "format": "",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 750,
        "y": 420,
        "wires": [
            [
                "22a1a680b8de37c0"
            ]
        ]
    },
    {
        "id": "5a2405bce9b7c275",
        "type": "puppeteer-page-screenshot",
        "z": "18b91be20995c6da",
        "name": "",
        "fullpage": true,
        "x": 370,
        "y": 420,
        "wires": [
            [
                "c1514fae4c61f21d"
            ]
        ]
    },
    {
        "id": "8ff6db906fee89e1",
        "type": "puppeteer-browser-launch",
        "z": "18b91be20995c6da",
        "timeout": "60000",
        "slowMo": 0,
        "headless": true,
        "debugport": 0,
        "devtools": true,
        "name": "",
        "x": 100,
        "y": 420,
        "wires": [
            [
                "1caada3a4878fe33"
            ]
        ]
    },
    {
        "id": "c1514fae4c61f21d",
        "type": "jimp-image",
        "z": "18b91be20995c6da",
        "name": "",
        "data": "payload",
        "dataType": "msg",
        "ret": "img",
        "parameter1": "/home/iplon/Desktop/poornima/inv3.jpg",
        "parameter1Type": "str",
        "parameter2": "",
        "parameter2Type": "msg",
        "parameter3": "",
        "parameter3Type": "msg",
        "parameter4": "",
        "parameter4Type": "msg",
        "parameter5": "",
        "parameter5Type": "msg",
        "parameter6": "",
        "parameter6Type": "msg",
        "parameter7": "",
        "parameter7Type": "msg",
        "parameter8": "",
        "parameter8Type": "msg",
        "sendProperty": "payload",
        "sendPropertyType": "msg",
        "parameterCount": 1,
        "jimpFunction": "write",
        "selectedJimpFunction": {
            "name": "write",
            "fn": "write",
            "description": "Write to file. NOTE: You can specify an alternative file extension type to change the type. Currently support types are jpg, png, bmp.",
            "parameters": [
                {
                    "name": "filename",
                    "type": "str",
                    "required": true,
                    "hint": "Name of the file",
                    "defaultType": "str"
                }
            ]
        },
        "x": 510,
        "y": 420,
        "wires": [
            [
                "7578e5e6c9fdefd1"
            ]
        ]
    },
    {
        "id": "1caada3a4878fe33",
        "type": "puppeteer-page-goto",
        "z": "18b91be20995c6da",
        "name": "INV3",
        "url": "http://localhost:3000/d/xA_iIDK4k/inv_3?orgId=2",
        "urltype": "str",
        "waitUntil": "networkidle0",
        "x": 230,
        "y": 420,
        "wires": [
            [
                "5a2405bce9b7c275"
            ]
        ]
    },
    {
        "id": "e5d9767052cdaab8",
        "type": "puppeteer-page-screenshot",
        "z": "18b91be20995c6da",
        "name": "",
        "fullpage": true,
        "x": 410,
        "y": 520,
        "wires": [
            [
                "78952132743738cd"
            ]
        ]
    },
    {
        "id": "78952132743738cd",
        "type": "jimp-image",
        "z": "18b91be20995c6da",
        "name": "",
        "data": "payload",
        "dataType": "msg",
        "ret": "img",
        "parameter1": "/home/iplon/Desktop/poornima/inv4.jpg",
        "parameter1Type": "str",
        "parameter2": "",
        "parameter2Type": "msg",
        "parameter3": "",
        "parameter3Type": "msg",
        "parameter4": "",
        "parameter4Type": "msg",
        "parameter5": "",
        "parameter5Type": "msg",
        "parameter6": "",
        "parameter6Type": "msg",
        "parameter7": "",
        "parameter7Type": "msg",
        "parameter8": "",
        "parameter8Type": "msg",
        "sendProperty": "payload",
        "sendPropertyType": "msg",
        "parameterCount": 1,
        "jimpFunction": "write",
        "selectedJimpFunction": {
            "name": "write",
            "fn": "write",
            "description": "Write to file. NOTE: You can specify an alternative file extension type to change the type. Currently support types are jpg, png, bmp.",
            "parameters": [
                {
                    "name": "filename",
                    "type": "str",
                    "required": true,
                    "hint": "Name of the file",
                    "defaultType": "str"
                }
            ]
        },
        "x": 550,
        "y": 520,
        "wires": [
            [
                "c58e3943627a92ce"
            ]
        ]
    },
    {
        "id": "0475414b8a4657a3",
        "type": "puppeteer-page-goto",
        "z": "18b91be20995c6da",
        "name": "INV4",
        "url": "http://localhost:3000/d/9vzNIDFVk/inv_4?orgId=2",
        "urltype": "str",
        "waitUntil": "networkidle0",
        "x": 250,
        "y": 520,
        "wires": [
            [
                "e5d9767052cdaab8"
            ]
        ]
    },
    {
        "id": "c58e3943627a92ce",
        "type": "file in",
        "z": "18b91be20995c6da",
        "name": "",
        "filename": "/home/iplon/Desktop/poornima/inv4.jpg",
        "filenameType": "str",
        "format": "",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 770,
        "y": 520,
        "wires": [
            [
                "020677708236030b"
            ]
        ]
    },
    {
        "id": "18dd23c131d2e034",
        "type": "puppeteer-browser-launch",
        "z": "18b91be20995c6da",
        "timeout": "60000",
        "slowMo": 0,
        "headless": true,
        "debugport": 0,
        "devtools": true,
        "name": "",
        "x": 100,
        "y": 520,
        "wires": [
            [
                "0475414b8a4657a3"
            ]
        ]
    },
    {
        "id": "22a1a680b8de37c0",
        "type": "base64",
        "z": "18b91be20995c6da",
        "name": "",
        "action": "str",
        "property": "payload",
        "x": 980,
        "y": 420,
        "wires": [
            [
                "8510e23571f306bb"
            ]
        ]
    },
    {
        "id": "020677708236030b",
        "type": "base64",
        "z": "18b91be20995c6da",
        "name": "",
        "action": "str",
        "property": "payload",
        "x": 1000,
        "y": 520,
        "wires": [
            [
                "31073c57c903d7c4"
            ]
        ]
    },
    {
        "id": "31073c57c903d7c4",
        "type": "change",
        "z": "18b91be20995c6da",
        "name": "Change",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "inv4",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1140,
        "y": 520,
        "wires": [
            [
                "603bc6b18be2b558"
            ]
        ]
    },
    {
        "id": "8510e23571f306bb",
        "type": "change",
        "z": "18b91be20995c6da",
        "name": "Change",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "inv3",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1140,
        "y": 420,
        "wires": [
            [
                "603bc6b18be2b558"
            ]
        ]
    },
    {
        "id": "3bd2cb29433d4503",
        "type": "change",
        "z": "18b91be20995c6da",
        "name": "Change",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "inv1",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1260,
        "y": 180,
        "wires": [
            [
                "603bc6b18be2b558"
            ]
        ]
    },
    {
        "id": "fdd1270e70597a80",
        "type": "inject",
        "z": "79ee2dfb383828d4",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 100,
        "y": 200,
        "wires": [
            [
                "e7567c72f484ebe2"
            ]
        ]
    },
    {
        "id": "e7567c72f484ebe2",
        "type": "influxdb in",
        "z": "79ee2dfb383828d4",
        "influxdb": "",
        "name": "",
        "query": "SELECT last(\"value\") FROM \"scaback_csv\" WHERE (\"d\" =~ /.*INV*./ AND \"f\" = 'EAE_DAY') AND time >= now()-10m GROUP BY time(1d), \"d\" fill(null)",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "organisation",
        "x": 300,
        "y": 200,
        "wires": [
            [
                "a42ae7f8e415df34"
            ]
        ]
    },
    {
        "id": "dce91fbb21f08de4",
        "type": "debug",
        "z": "79ee2dfb383828d4",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1080,
        "y": 560,
        "wires": []
    },
    {
        "id": "0c738bc697433af1",
        "type": "function",
        "z": "79ee2dfb383828d4",
        "name": "function 1",
        "func": "\n\nlet plantObj\n\nplantObj = []\n\n\nfor (var i = 0; i < msg.payload[0].length; i++)\n {\n  var time0 = new Date(msg.payload[i].time).getTime();\n  //var time0 = new Date(msg.payload[0][i].time).getTime();\n  var B01_INV1 = ((msg.payload[i].last) / 1091.200) * 1000\n  var B01_INV2 = ((msg.payload[i].last) / 1066.400) * 1000\n  var B01_INV3 = ((msg.payload[i].last) / 1116.0) * 1000\n  var B01_INV4 = ((msg.payload[i].last) / 1202.80) * 1000\n  var B02_INV1 = ((msg.payload[i].last) / 1215.20) * 1000\n  var B02_INV2 = ((msg.payload[i].last) / 1215.20) * 1000\n  var B02_INV3 = ((msg.payload[i].last) / 1240.00) * 1000\n  var B02_INV4 = ((msg.payload[i].last) / 1227.60) * 1000\n  var B03_INV1 = ((msg.payload[i].last) / 1252.600) * 1000\n  var B03_INV2 = ((msg.payload[i].last) / 1227.600) * 1000\n  var B03_INV3 = ((msg.payload[i].last) / 1202.800) * 1000\n  var B03_INV4 = ((msg.payload[i].last) / 1202.800) * 1000\n  var B04_INV1 = ((msg.payload[i].last) / 1240.00) * 1000\n  var B04_INV2 = ((msg.payload[i].last) / 1252.400) * 1000\n  var B04_INV3 = ((msg.payload[i].last) / 1240.00) * 1000\n  var B04_INV4 = ((msg.payload[i].last) / 1252.400) * 1000\n  var B05_INV1 = ((msg.payload[i].last) / 1227.600) * 1000\n  var B05_INV2 = ((msg.payload[i].last) / 1227.600) * 1000\n  var B05_INV3 = ((msg.payload[i].last) / 1240.00) * 1000\n  var B05_INV4 = ((msg.payload[i].last) / 1227.600) * 1000\n  var B06_INV1 = ((msg.payload[i].last) / 1232.200) * 1000\n  var B06_INV2 = ((msg.payload[i].last) / 1234.800) * 1000\n  var B06_INV3 = ((msg.payload[i].last) / 1220.00) * 1000\n  var B06_INV4 = ((msg.payload[i].last) / 1195.600) * 1000\n  var B07_INV1 = ((msg.payload[i].last) / 1234.800) * 1000\n  var B07_INV2 = ((msg.payload[i].last) / 1234.800) * 1000\n  var B07_INV3 = ((msg.payload[i].last) / 1234.800) * 1000\n  var B07_INV4 = ((msg.payload[i].last) / 1234.800) * 1000\n  var B08_INV1 = ((msg.payload[i].last) / 1234.800) * 1000\n  var B08_INV2 = ((msg.payload[i].last) / 1234.800) * 1000\n  var B08_INV3 = ((msg.payload[i].last) / 1234.800) * 1000\n  var B08_INV4 = ((msg.payload[i].last) / 1234.800) * 1000\n  var B09_INV1 = ((msg.payload[i].last) / 1164.000) * 1000\n  var B09_INV2 = ((msg.payload[i].last) / 1164.00) * 1000\n  var B10_INV1 = ((msg.payload[i].last) / 1247.400) * 1000\n  var B10_INV2 = ((msg.payload[i].last) / 1247.400) * 1000\n  var B10_INV3 = ((msg.payload[i].last) / 1247.400) * 1000\n  var B10_INV4 = ((msg.payload[i].last) / 1247.400) * 1000\n  var B11_INV1 = ((msg.payload[i].last) / 1247.400) * 1000\n  var B11_INV2 = ((msg.payload[i].last) / 1222.200) * 1000\n  var B11_INV3 = ((msg.payload[i].last) / 1260.000) * 1000\n  var B11_INV4 = ((msg.payload[i].last) / 1260.00) * 1000\n  var B12_INV1 = ((msg.payload[i].last) / 1232.200) * 1000\n  var B12_INV2 = ((msg.payload[i].last) / 1285.20) * 1000\n  var B12_INV3 = ((msg.payload[i].last) / 1230.00) * 1000\n  var B12_INV4 = ((msg.payload[i].last) / 1260.00) * 1000\n  var B13_INV1 = ((msg.payload[i].last) / 1247.400) * 1000\n  var B13_INV2 = ((msg.payload[i].last) / 1272.600) * 1000\n  var B13_INV3 = ((msg.payload[i].last) / 1234.800) * 1000\n  var B13_INV4 = ((msg.payload[i].last) / 1223.800) * 1000\n  var field = \"Specific_yield\"\n\n\n  var obj = {\n \n    TIME:new Date(msg.payload[0].time),\n    B01_INV1, B01_INV2, B01_INV3, B01_INV4,\n    B02_INV1, B02_INV2, B02_INV3, B02_INV4,\n    B03_INV1, B03_INV2, B03_INV3, B03_INV4,\n    B04_INV1, B04_INV2, B04_INV3, B04_INV4,\n    B05_INV1, B05_INV2, B05_INV3, B05_INV4,\n    B06_INV1, B06_INV2, B06_INV3, B06_INV4,\n    B07_INV1, B07_INV2, B07_INV3, B07_INV4,\n    B08_INV1, B08_INV2, B08_INV3, B08_INV4,\n    B09_INV1, B09_INV2,\n    B10_INV1, B10_INV2, B10_INV3, B10_INV4,\n    B11_INV1, B11_INV2, B11_INV3, B11_INV4,\n    B12_INV1, B12_INV2, B12_INV3, B12_INV4,\n    B13_INV1, B13_INV2, B13_INV3, B13_INV4,\n    field\n  }\n  plantObj.push(obj)\n \nmsg.payload = plantObj\n }\n//return null;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 200,
        "wires": [
            [
                "cceaaf1922c4f77f",
                "e3ce8c3e6427c6e5"
            ]
        ]
    },
    {
        "id": "cceaaf1922c4f77f",
        "type": "debug",
        "z": "79ee2dfb383828d4",
        "name": "debug 2",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 880,
        "y": 380,
        "wires": []
    },
    {
        "id": "1f5dbf277fbeda70",
        "type": "influxdb batch",
        "z": "79ee2dfb383828d4",
        "influxdb": "",
        "precision": "",
        "retentionPolicy": "",
        "name": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "organisation",
        "bucket": "bucket",
        "x": 1120,
        "y": 200,
        "wires": []
    },
    {
        "id": "e3ce8c3e6427c6e5",
        "type": "function",
        "z": "79ee2dfb383828d4",
        "name": "function 3",
        "func": "\nfor (i = 0; i < msg.payload.length; i++) \n{\n    var obj = {};\n    obj.payload =\n        [\n            {\n                measurement: \"SpecificYield\",\n\n                fields: {\n\n                    value: msg.payload[i].last\n\n\n                },\n                tags: {\n                    d: msg.payload[i].d\n                    // f: msg.payload[1].d\"_SY\"\n\n                },\n\n                timestamp: msg.payload[i].time\n            }\n\n\n\n\n        ];\n\n    //plantObj.push(obj)\n    node.send(obj);\n}\n\n//msg.payload = plantObj\n\n//return msg;\nreturn null;\n",
        "outputs": 1,
        "noerr": 6,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 200,
        "wires": [
            [
                "dce91fbb21f08de4",
                "1f5dbf277fbeda70"
            ]
        ]
    },
    {
        "id": "a42ae7f8e415df34",
        "type": "debug",
        "z": "79ee2dfb383828d4",
        "name": "debug 3",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 300,
        "y": 360,
        "wires": []
    },
    {
        "id": "1dbcd353e495cf87",
        "type": "function",
        "z": "79ee2dfb383828d4",
        "name": "function 1",
        "func": "\n\nlet plantObj\n\nplantObj = []\n \n\n\n  var time = new Date(msg.payload[0]._time).getTime();\n  //var _time0 = new Date(msg.payload[0][i]._time).get_time();\n  var B01_INV1 = ((msg.payload[0]._value) / 1091.200) * 1000\n  var B01_INV2 = ((msg.payload[1]._value) / 1066.400) * 1000\n  var B01_INV3 = ((msg.payload[2]._value) / 1116.0) * 1000\n  var B01_INV4 = ((msg.payload[3]._value) / 1202.80) * 1000 \n  var B02_INV1 = ((msg.payload[4]._value) / 1215.20) * 1000\n  var B02_INV2 = ((msg.payload[5]._value) / 1215.20) * 1000\n  var B02_INV3 = ((msg.payload[6]._value) / 1240.00) * 1000\n  var B02_INV4 = ((msg.payload[7]._value) / 1227.60) * 1000\n  var B03_INV1 = ((msg.payload[8]._value) / 1252.600) * 1000\n  var B03_INV2 = ((msg.payload[9]._value) / 1227.600) * 1000\n  var B03_INV3 = ((msg.payload[10]._value) / 1202.800) * 1000\n  var B03_INV4 = ((msg.payload[11]._value) / 1202.800) * 1000\n  var B04_INV1 = ((msg.payload[12]._value) / 1240.00) * 1000\n  var B04_INV2 = ((msg.payload[13]._value) / 1252.400) * 1000\n  var B04_INV3 = ((msg.payload[14]._value) / 1240.00) * 1000\n  var B04_INV4 = ((msg.payload[15]._value) / 1252.400) * 1000\n  var B05_INV1 = ((msg.payload[16]._value) / 1227.600) * 1000\n  var B05_INV2 = ((msg.payload[17]._value) / 1227.600) * 1000\n  var B05_INV3 = ((msg.payload[18]._value) / 1240.00) * 1000\n  var B05_INV4 = ((msg.payload[19]._value) / 1227.600) * 1000\n  var B06_INV1 = ((msg.payload[20]._value) / 1232.200) * 1000\n  var B06_INV2 = ((msg.payload[21]._value) / 1234.800) * 1000\n  var B06_INV3 = ((msg.payload[22]._value) / 1220.00) * 1000\n  var B06_INV4 = ((msg.payload[23]._value) / 1195.600) * 1000\n  var B07_INV1 = ((msg.payload[24]._value) / 1234.800) * 1000\n  var B07_INV2 = ((msg.payload[25]._value) / 1234.800) * 1000\n  var B07_INV3 = ((msg.payload[26]._value) / 1234.800) * 1000\n  var B07_INV4 = ((msg.payload[27]._value) / 1234.800) * 1000\n  var B08_INV1 = ((msg.payload[28]._value) / 1234.800) * 1000\n  var B08_INV2 = ((msg.payload[29]._value) / 1234.800) * 1000\n  var B08_INV3 = ((msg.payload[30]._value) / 1234.800) * 1000\n  var B08_INV4 = ((msg.payload[31]._value) / 1234.800) * 1000\n  var B09_INV1 = ((msg.payload[32]._value) / 1164.000) * 1000\n  var B09_INV2 = ((msg.payload[33]._value) / 1164.00) * 1000\n  var B10_INV1 = ((msg.payload[34]._value) / 1247.400) * 1000\n  var B10_INV2 = ((msg.payload[35]._value) / 1247.400) * 1000\n  var B10_INV3 = ((msg.payload[36]._value) / 1247.400) * 1000\n  var B10_INV4 = ((msg.payload[37]._value) / 1247.400) * 1000\n  var B11_INV1 = ((msg.payload[38]._value) / 1247.400) * 1000\n  var B11_INV2 = ((msg.payload[39]._value) / 1222.200) * 1000\n  var B11_INV3 = ((msg.payload[40]._value) / 1260.000) * 1000\n  var B11_INV4 = ((msg.payload[41]._value) / 1260.00) * 1000\n  var B12_INV1 = ((msg.payload[42]._value) / 1232.200) * 1000\n  var B12_INV2 = ((msg.payload[43]._value) / 1285.20) * 1000\n  var B12_INV3 = ((msg.payload[44]._value) / 1230.00) * 1000\n  var B12_INV4 = ((msg.payload[45]._value) / 1260.00) * 1000\n  var B13_INV1 = ((msg.payload[46]._value) / 1247.400) * 1000\n  var B13_INV2 = ((msg.payload[47]._value) / 1272.600) * 1000\n  var B13_INV3 = ((msg.payload[48]._value) / 1234.800) * 1000\n  var B13_INV4 = ((msg.payload[49]._value) / 1223.800) * 1000\n  \nvar sy = [\n  B01_INV1, B01_INV2, B01_INV3, B01_INV4,\n  B02_INV1, B02_INV2, B02_INV3, B02_INV4,\n  B03_INV1, B03_INV2, B03_INV3, B03_INV4,\n  B04_INV1, B04_INV2, B04_INV3, B04_INV4,\n  B05_INV1, B05_INV2, B05_INV3, B05_INV4,\n  B06_INV1, B06_INV2, B06_INV3, B06_INV4,\n  B07_INV1, B07_INV2, B07_INV3, B07_INV4,\n  B08_INV1, B08_INV2, B08_INV3, B08_INV4,\n  B09_INV1, B09_INV2,\n  B10_INV1, B10_INV2, B10_INV3, B10_INV4,\n  B11_INV1, B11_INV2, B11_INV3, B11_INV4,\n  B12_INV1, B12_INV2, B12_INV3, B12_INV4,\n  B13_INV1, B13_INV2, B13_INV3, B13_INV4\n]\n\n//plantObj.push(sy[0])\n\n\n\n\nfor (var i = 0; i < msg.payload.length; i++)\n {\n  var obj = {};\n  obj =\n      {\n        fields: {\n          value: sy[i]\n           },\n        tags: {\n          d: msg.payload[i].d\n          },\n        timestamp: msg.payload[i]._time\n      }\n  plantObj.push(obj)\n  //node.send(obj);\n}\n\nmsg.payload = plantObj\n\nreturn msg;\nreturn null;\n\n\n \n \n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 545,
        "y": 247,
        "wires": [
            []
        ]
    },
    {
        "id": "df9abd12.9df57",
        "type": "inject",
        "z": "fd7753ff7b352a7c",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 260,
        "y": 480,
        "wires": [
            [
                "62b463e4.f8e27c"
            ]
        ]
    },
    {
        "id": "448767a9.6a3788",
        "type": "http request",
        "z": "fd7753ff7b352a7c",
        "name": "post",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://localhost:3000/login",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "digest",
        "senderr": false,
        "headers": [],
        "x": 721,
        "y": 480,
        "wires": [
            [
                "5977884a.e8e458",
                "96a00cfb.c3323"
            ]
        ]
    },
    {
        "id": "62b463e4.f8e27c",
        "type": "function",
        "z": "fd7753ff7b352a7c",
        "name": "set login payload and headers",
        "func": "msg.payload = \"username=admin&password=admin&action=login&view=console\";\nmsg.headers = {};\nmsg.headers['Accept'] = 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8';\nmsg.headers['Accept-Encoding'] = 'gzip, deflate';\nmsg.headers['Accept-Language'] = 'en-GB,en;q=0.5';\nmsg.headers['Connection'] = 'keep-alive';\nmsg.headers['Content-type'] = 'application/x-www-form-urlencoded';\nmsg.headers['Cookie'] = 'zmSkin=classic; zmCSS=classic;';\nmsg.headers['Host'] = 'localhost';\nmsg.headers['Referer'] = 'http://localhost:3000/login';\nmsg.headers['Upgrade-Insecure-Requests'] = '1';\nmsg.headers['User-Agent'] = 'node-red';\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 480,
        "wires": [
            [
                "448767a9.6a3788"
            ]
        ]
    },
    {
        "id": "96a00cfb.c3323",
        "type": "debug",
        "z": "fd7753ff7b352a7c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 997,
        "y": 479,
        "wires": []
    },
    {
        "id": "5977884a.e8e458",
        "type": "function",
        "z": "fd7753ff7b352a7c",
        "name": "set request payload and headers",
        "func": "msg.payload = {};\nmsg.headers = {};\nmsg.headers['Accept'] = 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8';\nmsg.headers['Accept-Encoding'] = 'gzip, deflate';\nmsg.headers['Accept-Language'] = 'en-GB,en;q=0.5';\nmsg.headers['Cache-Control'] = 'max-age=0';\nmsg.headers['Connection'] = 'keep-alive';\nmsg.headers['Cookie'] = 'zmSkin=classic; zmCSS=classic; ZMSESSID='+msg.responseCookies.ZMSESSID.value;\nmsg.headers['Host'] = 'localhost';\nmsg.headers['Upgrade-Insecure-Requests'] = '1';\nmsg.headers['User-Agent'] = 'node-red';\n\n//headers[\"set-cookie\"][0]\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 499,
        "y": 633,
        "wires": [
            [
                "f50d7b5c.5a23c8"
            ]
        ]
    },
    {
        "id": "20ee379.f0f59c8",
        "type": "debug",
        "z": "fd7753ff7b352a7c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 991,
        "y": 632,
        "wires": []
    },
    {
        "id": "f50d7b5c.5a23c8",
        "type": "http request",
        "z": "fd7753ff7b352a7c",
        "name": "get",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://localhost:3000/d/5fn8rGz4z/dimo?orgId=1",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 728,
        "y": 632,
        "wires": [
            [
                "20ee379.f0f59c8"
            ]
        ]
    },
    {
        "id": "cf934781.dbe858",
        "type": "inject",
        "z": "fd7753ff7b352a7c",
        "name": "http://localhost:3000/login",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 130,
        "y": 860,
        "wires": [
            []
        ]
    },
    {
        "id": "73df4bbf.8e1da4",
        "type": "credentials",
        "z": "fd7753ff7b352a7c",
        "name": "",
        "props": [
            {
                "value": "username",
                "type": "msg"
            },
            {
                "value": "password",
                "type": "msg"
            }
        ],
        "x": 470,
        "y": 780,
        "wires": [
            [
                "2aa478c9.2dbe98"
            ]
        ]
    },
    {
        "id": "77b7ae1a.0469c",
        "type": "nbrowser",
        "z": "fd7753ff7b352a7c",
        "name": "",
        "methods": [
            {
                "name": "gotoURL",
                "func": "goto",
                "params": [
                    {
                        "type": "msg",
                        "value": "payload",
                        "typeDefault": "str"
                    }
                ]
            },
            {
                "name": "type",
                "func": "type",
                "params": [
                    {
                        "type": "str",
                        "value": "#user",
                        "typeDefault": "str"
                    },
                    {
                        "type": "msg",
                        "value": "username",
                        "typeDefault": "str"
                    }
                ]
            },
            {
                "name": "type",
                "func": "type",
                "params": [
                    {
                        "type": "str",
                        "value": "#password",
                        "typeDefault": "str"
                    },
                    {
                        "type": "msg",
                        "value": "password",
                        "typeDefault": "str"
                    }
                ]
            },
            {
                "name": "click",
                "func": "click",
                "params": [
                    {
                        "type": "str",
                        "value": "#submit",
                        "typeDefault": "str"
                    }
                ]
            }
        ],
        "prop": "nbrowser",
        "propout": "payload",
        "object": "msg",
        "objectout": "msg",
        "close": false,
        "show": true,
        "ssl": true,
        "outputs": 1,
        "x": 650,
        "y": 900,
        "wires": [
            []
        ]
    },
    {
        "id": "2aa478c9.2dbe98",
        "type": "debug",
        "z": "fd7753ff7b352a7c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1010,
        "y": 760,
        "wires": []
    },
    {
        "id": "5d92e7de1daa9ae9",
        "type": "function",
        "z": "fd7753ff7b352a7c",
        "name": "function 2",
        "func": "\n\nvar obj = {};\n\nobj.payload =\n    [\n        {\n            measurement: \"SpecificYield\",\n\n            fields: {\n\n                value: msg.payload[0].last\n\n\n            },\n            tags: {\n                d: \"B01_INV1\",\n                f: \"B01_INV1_SY\"\n\n            },\n\n            timestamp: new Date(msg.payload[0].time)\n        }\n\n\n\n\n    ];\n\n//plantObj.push(obj)\nnode.send(obj);\n\n\n//msg.payload = plantObj\n\n//return msg;\nreturn null;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1420,
        "y": 1780,
        "wires": [
            []
        ]
    },
    {
        "id": "2f77bffa4533a401",
        "type": "inject",
        "z": "fd7753ff7b352a7c",
        "name": "http://localhost:3000/login",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "payload": "http://localhost:3000/login",
        "payloadType": "str",
        "x": 190,
        "y": 100,
        "wires": [
            [
                "9bdf1bb39509a3a3"
            ]
        ]
    },
    {
        "id": "9bdf1bb39509a3a3",
        "type": "credentials",
        "z": "fd7753ff7b352a7c",
        "name": "",
        "props": [
            {
                "value": "username",
                "type": "msg"
            },
            {
                "value": "password",
                "type": "msg"
            }
        ],
        "x": 410,
        "y": 100,
        "wires": [
            [
                "5a62723bf3cab417"
            ]
        ]
    },
    {
        "id": "5a62723bf3cab417",
        "type": "nbrowser",
        "z": "fd7753ff7b352a7c",
        "name": "",
        "methods": [
            {
                "name": "gotoURL",
                "func": "goto",
                "params": [
                    {
                        "type": "msg",
                        "value": "payload",
                        "typeDefault": "str"
                    }
                ]
            },
            {
                "name": "type",
                "func": "type",
                "params": [
                    {
                        "type": "str",
                        "value": "#Username input field",
                        "typeDefault": "str"
                    },
                    {
                        "type": "msg",
                        "value": "username",
                        "typeDefault": "str"
                    }
                ]
            },
            {
                "name": "type",
                "func": "type",
                "params": [
                    {
                        "type": "str",
                        "value": "#Password input field",
                        "typeDefault": "str"
                    },
                    {
                        "type": "msg",
                        "value": "password",
                        "typeDefault": "str"
                    }
                ]
            },
            {
                "name": "click",
                "func": "click",
                "params": [
                    {
                        "type": "str",
                        "value": "#Login button",
                        "typeDefault": "str"
                    }
                ]
            },
            {
                "name": "wait",
                "func": "wait",
                "params": [
                    {
                        "type": "str",
                        "value": "#welcome-panel",
                        "typeDefault": "str"
                    }
                ]
            }
        ],
        "prop": "nbrowser",
        "propout": "payload",
        "object": "msg",
        "objectout": "msg",
        "close": false,
        "show": true,
        "ssl": false,
        "outputs": 1,
        "x": 680,
        "y": 140,
        "wires": [
            [
                "1b4f86d04d50fb68"
            ]
        ]
    },
    {
        "id": "1b4f86d04d50fb68",
        "type": "debug",
        "z": "fd7753ff7b352a7c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 950,
        "y": 120,
        "wires": []
    },
    {
        "id": "d4c8137815641765",
        "type": "html",
        "z": "fd7753ff7b352a7c",
        "name": "",
        "property": "",
        "outproperty": "",
        "tag": ".update-count",
        "ret": "html",
        "as": "single",
        "x": 675,
        "y": 285,
        "wires": [
            []
        ]
    },
    {
        "id": "08279989de8cc441",
        "type": "inject",
        "z": "fd7753ff7b352a7c",
        "name": "https://my.iteccrm.com/",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "payload": "https://my.iteccrm.com/",
        "payloadType": "str",
        "x": 520,
        "y": 1080,
        "wires": [
            [
                "4201cf1be6a1d583"
            ]
        ]
    },
    {
        "id": "4201cf1be6a1d583",
        "type": "credentials",
        "z": "fd7753ff7b352a7c",
        "name": "",
        "props": [
            {
                "value": "username",
                "type": "msg"
            },
            {
                "value": "password",
                "type": "msg"
            }
        ],
        "x": 480,
        "y": 1180,
        "wires": [
            [
                "c368f9c7bfb6e3f7"
            ]
        ]
    },
    {
        "id": "c368f9c7bfb6e3f7",
        "type": "nbrowser",
        "z": "fd7753ff7b352a7c",
        "name": "",
        "methods": [
            {
                "name": "gotoURL",
                "func": "goto",
                "params": [
                    {
                        "type": "msg",
                        "value": "payload",
                        "typeDefault": "str"
                    }
                ]
            },
            {
                "name": "type",
                "func": "type",
                "params": [
                    {
                        "type": "str",
                        "value": "USER_LOGIN",
                        "typeDefault": "str"
                    },
                    {
                        "type": "msg",
                        "value": "username",
                        "typeDefault": "str"
                    }
                ]
            },
            {
                "name": "type",
                "func": "type",
                "params": [
                    {
                        "type": "str",
                        "value": "USER_PASSWORD",
                        "typeDefault": "str"
                    },
                    {
                        "type": "msg",
                        "value": "password",
                        "typeDefault": "str"
                    }
                ]
            },
            {
                "name": "click",
                "func": "click",
                "params": [
                    {
                        "type": "str",
                        "value": "#submit",
                        "typeDefault": "str"
                    }
                ]
            }
        ],
        "prop": "nbrowser",
        "propout": "payload",
        "object": "msg",
        "objectout": "msg",
        "close": false,
        "show": true,
        "ssl": false,
        "outputs": 1,
        "x": 560,
        "y": 1240,
        "wires": [
            [
                "716efe779eb95325"
            ]
        ]
    },
    {
        "id": "716efe779eb95325",
        "type": "debug",
        "z": "fd7753ff7b352a7c",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 740,
        "y": 1140,
        "wires": []
    },
    {
        "id": "a2945f5937d01ffc",
        "type": "html",
        "z": "fd7753ff7b352a7c",
        "name": "",
        "tag": ".update-count",
        "ret": "html",
        "as": "single",
        "x": 680,
        "y": 1300,
        "wires": [
            []
        ]
    },
    {
        "id": "683b85f1c8511445",
        "type": "inject",
        "z": "fd7753ff7b352a7c",
        "name": "",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 310,
        "y": 780,
        "wires": [
            [
                "73df4bbf.8e1da4"
            ]
        ]
    },
    {
        "id": "204ef9327fd6bf7c",
        "type": "nbrowser",
        "z": "fd7753ff7b352a7c",
        "name": "",
        "methods": [
            {
                "name": "gotoURL",
                "func": "gotoURL",
                "params": [
                    {
                        "type": "msg",
                        "value": "payload"
                    }
                ]
            }
        ],
        "prop": "nbrowser",
        "propout": "payload",
        "object": "msg",
        "objectout": "msg",
        "close": false,
        "show": false,
        "ssl": false,
        "outputs": 1,
        "x": 180,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "f695843f98ffe1c8",
        "type": "debug",
        "z": "fd7753ff7b352a7c",
        "name": "debug 46",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 800,
        "y": 60,
        "wires": []
    },
    {
        "id": "8642adf2c3e00123",
        "type": "file",
        "z": "a47c23bb89e240ba",
        "name": "inverter",
        "filename": "C:\\Users\\91735\\Documents\\INVERTER.csv",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 960,
        "y": 180,
        "wires": [
            [
                "c05ae915516a5654"
            ]
        ]
    },
    {
        "id": "e2d63337df8ce2de",
        "type": "influxdb in",
        "z": "a47c23bb89e240ba",
        "influxdb": "03603df4c981df55",
        "name": "INVERTER",
        "query": "SELECT last(\"value\"),p,b,d,f FROM \"v\" WHERE (\"p\" = 'Iyyermalai' AND \"d\" =~ /.*INV*./ AND \"f\" = 'EAE_DAY') AND time >= now() - 24h GROUP BY time(5m) fill(null);\nSELECT last(\"value\"),p,b,d,f FROM \"v\" WHERE (\"p\" = 'Karnataka_16MW' AND \"d\" =~ /.*INV*./ AND \"f\" = 'EAE_DAY') AND time >= now() - 24h GROUP BY time(5m) fill(null);\nSELECT last(\"value\"),p,b,d,f FROM \"v\" WHERE (\"p\" = 'Karnataka_34MW' AND \"d\" =~ /.*INV*./ AND \"f\" = 'EAE_DAY') AND time >= now() - 24h GROUP BY time(5m) fill(null);\nSELECT last(\"value\"),p,b,d,f FROM \"v\" WHERE (\"p\" = 'Karnataka_50MW' AND \"d\" =~ /.*INV*./ AND \"f\" = 'EAE_DAY') AND time >= now() - 24h GROUP BY time(5m) fill(null);\nSELECT last(\"value\"),p,b,d,f FROM \"v\" WHERE (\"p\" = 'Kayathar' AND \"d\" =~ /.*INV*./ AND \"f\" = 'EAE_DAY') AND time >= now() - 24h GROUP BY time(5m) fill(null);\nSELECT last(\"value\"),p,b,d,f FROM \"v\" WHERE (\"p\" = 'Lomada' AND \"d\" =~ /.*INV*./ AND \"f\" = 'EAE_DAY') AND time >= now() - 24h GROUP BY time(5m) fill(null);\nSELECT last(\"value\"),p,b,d,f FROM \"v\" WHERE (\"p\" = 'Musiri' AND \"d\" =~ /.*INV*./ AND \"f\" = 'EAE_DAY') AND time >= now() - 24h GROUP BY time(5m) fill(null);\nSELECT last(\"value\"),p,b,d,f FROM \"v\" WHERE (\"p\" = 'Panchapatty' AND \"d\" =~ /.*INV*./ AND \"f\" = 'EAE_DAY') AND time >= now() - 24h GROUP BY time(5m) fill(null);\nSELECT last(\"value\"),p,b,d,f FROM \"v\" WHERE (\"p\" = 'Vemulapadu' AND \"d\" =~ /.*INV*./ AND \"f\" = 'EAE_DAY') AND time >= now() - 24h GROUP BY time(5m) fill(null);\nSELECT last(\"value\"),p,b,d,f FROM \"v\" WHERE (\"p\" = 'Bahera' AND \"d\" =~ /.*INV*./ AND \"f\" = 'EAE_DAY') AND time >= now() - 24h GROUP BY time(5m) fill(null);\nSELECT last(\"value\"),p,b,d,f FROM \"v\" WHERE (\"p\" = 'Maharashtra' AND \"d\" =~ /.*INV*./ AND \"f\" = 'EAE_DAY') AND time >= now() - 24h GROUP BY time(5m) fill(null);\nSELECT last(\"value\"),p,b,d,f FROM \"v\" WHERE (\"p\" = 'Neemuch' AND \"d\" =~ /.*INV*./ AND \"f\" = 'EAE_DAY') AND time >= now() - 24h GROUP BY time(5m) fill(null);\nSELECT last(\"value\"),p,b,d,f FROM \"v\" WHERE (\"p\" = 'Punjab 12MW' AND \"d\" =~ /.*INV*./ AND \"f\" = 'EAE_DAY') AND time >= now() - 24h GROUP BY time(5m) fill(null);\nSELECT last(\"value\"),p,b,d,f FROM \"v\" WHERE (\"p\" = 'Punjab 20MW' AND \"d\" =~ /.*INV*./ AND \"f\" = 'EAE_DAY') AND time >= now() - 24h GROUP BY time(5m) fill(null);\nSELECT last(\"value\"),p,b,d,f FROM \"v\" WHERE (\"p\" = 'Punjab4MW' AND \"d\" =~ /.*INV*./ AND \"f\" = 'EAE_DAY') AND time >= now() - 24h GROUP BY time(5m) fill(null);\nSELECT last(\"value\"),p,b,d,f FROM \"v\" WHERE (\"p\" = 'Savakala' AND \"d\" =~ /.*INV*./ AND \"f\" = 'EAE_DAY') AND time >= now() - 24h GROUP BY time(5m) fill(null);\nSELECT last(\"value\"),p,b,d,f FROM \"v\" WHERE (\"p\" = 'TTpet' AND \"d\" =~ /.*INV*./ AND \"f\" = 'EAE_DAY') AND time >= now() - 24h GROUP BY time(5m) fill(null);\nSELECT last(\"value\"),p,b,d,f FROM \"v\" WHERE (\"p\" = 'Karnataka' AND \"d\" =~ /.*INV*./ AND \"f\" = 'EAE_DAY') AND time >= now() - 24h GROUP BY time(5m) fill(null);",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "organisation",
        "x": 370,
        "y": 140,
        "wires": [
            [
                "5ba91e262f14e890"
            ]
        ]
    },
    {
        "id": "e697458c4ec77294",
        "type": "inject",
        "z": "a47c23bb89e240ba",
        "name": "INJECT",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "00 00 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 140,
        "wires": [
            [
                "e2d63337df8ce2de"
            ]
        ]
    },
    {
        "id": "4be778429d9b1a27",
        "type": "function",
        "z": "a47c23bb89e240ba",
        "name": "INV>10",
        "func": "\nvar TIME = msg.payload.TIME\nvar EAE_DAY = msg.payload.EAE_DAY\nvar PLANT=msg.payload.PLANT\nvar BLOCK =msg.payload.BLOCK\nvar DEVICE=msg.payload.DEVICE\nvar FIELD=msg.payload.FIELD\nif(EAE_DAY >=\"10.00\")\n{\n    var newMsg = {};\n    newMsg.payload =\n    {\n        TIME,\n       EAE_DAY,\n       PLANT,\n       BLOCK,\n       DEVICE,\n       FIELD,\n      Issue:\"SPIKE\"\n    }\n     node.send(newMsg); \n}\nreturn null;\n \n \n   \n\n\n\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 140,
        "wires": [
            [
                "13225c73e290b497",
                "f549806493e722f7",
                "8642adf2c3e00123"
            ]
        ]
    },
    {
        "id": "5ba91e262f14e890",
        "type": "function",
        "z": "a47c23bb89e240ba",
        "name": "",
        "func": "\n    for (var j = 0; j<msg.payload.length;j++)\n    for (var i = 0; i < msg.payload[j].length;i++)\n    \n{\n    var newMsg = {};\n    newMsg.payload = {\n        TIME:new Date(msg.payload[j][i].time),\n        EAE_DAY:msg.payload[j][i].last,\n        PLANT:msg.payload[j][i].p,\n        BLOCK:msg.payload[j][i].b,\n        DEVICE:msg.payload[j][i].d,\n        FIELD:msg.payload[j][i].f\n        \n    }\n    node.send(newMsg);\n}\nreturn null;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 140,
        "wires": [
            [
                "4be778429d9b1a27"
            ]
        ]
    },
    {
        "id": "13225c73e290b497",
        "type": "debug",
        "z": "a47c23bb89e240ba",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 950,
        "y": 140,
        "wires": []
    },
    {
        "id": "c05ae915516a5654",
        "type": "debug",
        "z": "a47c23bb89e240ba",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1130,
        "y": 180,
        "wires": []
    },
    {
        "id": "a35b3d9c8e191d56",
        "type": "file",
        "z": "a47c23bb89e240ba",
        "name": "EM-HTP",
        "filename": "C:\\Users\\91735\\Documents\\EM-HTP.csv",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 1020,
        "y": 400,
        "wires": [
            [
                "b6e83e6dbe0c75f6"
            ]
        ]
    },
    {
        "id": "f64fc85f74955e08",
        "type": "influxdb in",
        "z": "a47c23bb89e240ba",
        "influxdb": "03603df4c981df55",
        "name": "ENERGY METER",
        "query": " SELECT last(\"value\"),p,b,d,f FROM \"v\" WHERE (\"p\" = 'Karnataka_16MW' AND \"d\" =~ /.*HTP_EM*./ AND \"f\" = 'EAE_DAY') AND time >= now() - 24h GROUP BY time(5m) fill(null);\nSELECT last(\"value\"),p,b,d,f FROM \"v\" WHERE (\"p\" = 'Karnataka_34MW' AND \"d\" =~ /.*HTP_EM*./ AND \"f\" = 'EAE_DAY') AND time >= now() - 24h GROUP BY time(5m) fill(null);\nSELECT last(\"value\"),p,b,d,f FROM \"v\" WHERE (\"p\" = 'Karnataka_50MW' AND \"d\" =~ /.*HTP_EM*./ AND \"f\" = 'EAE_DAY') AND time >= now() - 24h GROUP BY time(5m) fill(null);\nSELECT last(\"value\"),p,b,d,f FROM \"v\" WHERE (\"p\" = 'Kayathar' AND \"d\" =~ /.*HTP_EM*./ AND \"f\" = 'EAE_DAY') AND time >= now() - 24h GROUP BY time(5m) fill(null);\nSELECT last(\"value\"),p,b,d,f FROM \"v\" WHERE (\"p\" = 'Lomada' AND \"d\" =~ /.*HTP_EM*./ AND \"f\" = 'EAE_DAY') AND time >= now() - 24h GROUP BY time(5m) fill(null);\nSELECT last(\"value\"),p,b,d,f FROM \"v\" WHERE (\"p\" = 'Musiri' AND \"d\" =~ /.*HTP_EM*./ AND \"f\" = 'EAE_DAY') AND time >= now() - 24h GROUP BY time(5m) fill(null);\nSELECT last(\"value\"),p,b,d,f FROM \"v\" WHERE (\"p\" = 'Panchapatty' AND \"d\" =~ /.*HTP_EM*./ AND \"f\" = 'EAE_DAY') AND time >= now() - 24h GROUP BY time(5m) fill(null);\nSELECT last(\"value\"),p,b,d,f FROM \"v\" WHERE (\"p\" = 'Vemulapadu' AND \"d\" =~ /.*HTP_EM*./ AND \"f\" = 'EAE_DAY') AND time >= now() - 24h GROUP BY time(5m) fill(null);\nSELECT last(\"value\"),p,b,d,f FROM \"v\" WHERE (\"p\" = 'Bahera' AND \"d\" =~ /.*HTP_EM*./ AND \"f\" = 'EAE_DAY') AND time >= now() - 24h GROUP BY time(5m) fill(null);\nSELECT last(\"value\"),p,b,d,f FROM \"v\" WHERE (\"p\" = 'Maharashtra' AND \"d\" =~ /.*HTP_EM*./ AND \"f\" = 'EAE_DAY') AND time >= now() - 24h GROUP BY time(5m) fill(null);\nSELECT last(\"value\"),p,b,d,f FROM \"v\" WHERE (\"p\" = 'Savakala' AND \"d\" =~ /.*HTP_EM*./ AND \"f\" = 'EAE_DAY') AND time >= now() - 24h GROUP BY time(5m) fill(null);\nSELECT last(\"value\"),p,b,d,f FROM \"v\" WHERE (\"p\" = 'TTpet' AND \"d\" =~ /.*HTP_EM*./ AND \"f\" = 'EAE_DAY') AND time >= now() - 24h GROUP BY time(5m) fill(null);\nSELECT last(\"value\"),p,b,d,f FROM \"v\" WHERE (\"p\" = 'Karnataka' AND \"d\" =~ /.*EM_ELITE*./ AND \"f\" = 'EAE_DAY') AND time >= now() - 24h GROUP BY time(5m) fill(null)",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "organisation",
        "x": 410,
        "y": 340,
        "wires": [
            [
                "d13e3846020895f2"
            ]
        ]
    },
    {
        "id": "c2dd17ded135761b",
        "type": "inject",
        "z": "a47c23bb89e240ba",
        "name": "INJECT",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "00 00 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 340,
        "wires": [
            [
                "f64fc85f74955e08"
            ]
        ]
    },
    {
        "id": "d815d9c689e552fa",
        "type": "function",
        "z": "a47c23bb89e240ba",
        "name": "HTP_EM>40",
        "func": "\nvar TIME = msg.payload.TIME\nvar EAE_DAY = msg.payload.EAE_DAY\nvar PLANT=msg.payload.PLANT\nvar BLOCK =msg.payload.BLOCK\nvar DEVICE=msg.payload.DEVICE\nvar FIELD=msg.payload.FIELD\nif(EAE_DAY >=\"40.00\")\n{\n    var newMsg = {};\n    newMsg.payload =\n    {\n        TIME,\n       EAE_DAY,\n       PLANT,\n       BLOCK,\n       DEVICE,\n       FIELD,\n      Issue:\"SPIKE\"\n    }\n     node.send(newMsg); \n}\nreturn null;\n \n \n   \n\n\n\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 340,
        "wires": [
            [
                "eaca9fc73abf3aee",
                "a35b3d9c8e191d56",
                "bc6bb3db76cfae20"
            ]
        ]
    },
    {
        "id": "d13e3846020895f2",
        "type": "function",
        "z": "a47c23bb89e240ba",
        "name": "",
        "func": "\n    for (var j = 0; j<msg.payload.length;j++)\n    for (var i = 0; i < msg.payload[j].length;i++)\n    \n{\n    var newMsg = {};\n    newMsg.payload = {\n        TIME:new Date(msg.payload[j][i].time),\n        EAE_DAY:msg.payload[j][i].last,\n        PLANT:msg.payload[j][i].p,\n        BLOCK:msg.payload[j][i].b,\n        DEVICE:msg.payload[j][i].d,\n        FIELD:msg.payload[j][i].f\n        \n    }\n    node.send(newMsg);\n}\nreturn null;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 340,
        "wires": [
            [
                "d815d9c689e552fa"
            ]
        ]
    },
    {
        "id": "eaca9fc73abf3aee",
        "type": "debug",
        "z": "a47c23bb89e240ba",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1110,
        "y": 340,
        "wires": []
    },
    {
        "id": "b6e83e6dbe0c75f6",
        "type": "debug",
        "z": "a47c23bb89e240ba",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1190,
        "y": 400,
        "wires": []
    },
    {
        "id": "93d65c029f846bf8",
        "type": "influxdb in",
        "z": "a47c23bb89e240ba",
        "influxdb": "03603df4c981df55",
        "name": "ENERGY METER",
        "query": "SELECT last(\"value\"),p,b,d,f FROM \"v\" WHERE (\"p\" = 'Punjab 12MW' AND \"d\" =~ /.*HTP_EM*./ AND \"f\" = 'EAE_DAY') AND time >= now() - 24h GROUP BY time(5m) fill(null);\nSELECT last(\"value\"),p,b,d,f FROM \"v\" WHERE (\"p\" = 'Punjab 20MW' AND \"d\" =~ /.*HTP_EM*./ AND \"f\" = 'EAE_DAY') AND time >= now() - 24h GROUP BY time(5m) fill(null);\nSELECT last(\"value\"),p,b,d,f FROM \"v\" WHERE (\"p\" = 'Punjab4MW' AND \"d\" =~ /.*HTP_EM*./ AND \"f\" = 'EAE_DAY') AND time >= now() - 24h GROUP BY time(5m) fill(null);",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "organisation",
        "x": 370,
        "y": 520,
        "wires": [
            [
                "36c0d2aa2011de40"
            ]
        ]
    },
    {
        "id": "75f8ff162666dfa8",
        "type": "inject",
        "z": "a47c23bb89e240ba",
        "name": "INJECT",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "00 00 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 100,
        "y": 520,
        "wires": [
            [
                "93d65c029f846bf8"
            ]
        ]
    },
    {
        "id": "a4d03d7ec601fd50",
        "type": "function",
        "z": "a47c23bb89e240ba",
        "name": "HTP_EM>20",
        "func": "\nvar TIME = msg.payload.TIME\nvar EAE_DAY = msg.payload.EAE_DAY\nvar PLANT=msg.payload.PLANT\nvar BLOCK =msg.payload.BLOCK\nvar DEVICE=msg.payload.DEVICE\nvar FIELD=msg.payload.FIELD\nif(EAE_DAY >=\"40.00\")\n{\n    var newMsg = {};\n    newMsg.payload =\n    {\n        TIME,\n       EAE_DAY,\n       PLANT,\n       BLOCK,\n       DEVICE,\n       FIELD,\n      Issue:\"SPIKE\"\n    }\n     node.send(newMsg); \n}\nreturn null;\n \n \n   \n\n\n\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 520,
        "wires": [
            [
                "c342efb126fc2e6f",
                "a35b3d9c8e191d56",
                "bc6bb3db76cfae20"
            ]
        ]
    },
    {
        "id": "36c0d2aa2011de40",
        "type": "function",
        "z": "a47c23bb89e240ba",
        "name": "",
        "func": "\n    for (var j = 0; j<msg.payload.length;j++)\n    for (var i = 0; i < msg.payload[j].length;i++)\n    \n{\n    var newMsg = {};\n    newMsg.payload = {\n        TIME:new Date(msg.payload[j][i].time),\n        EAE_DAY:msg.payload[j][i].last,\n        PLANT:msg.payload[j][i].p,\n        BLOCK:msg.payload[j][i].b,\n        DEVICE:msg.payload[j][i].d,\n        FIELD:msg.payload[j][i].f\n        \n    }\n    node.send(newMsg);\n}\nreturn null;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 520,
        "wires": [
            [
                "a4d03d7ec601fd50"
            ]
        ]
    },
    {
        "id": "c342efb126fc2e6f",
        "type": "debug",
        "z": "a47c23bb89e240ba",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1070,
        "y": 520,
        "wires": []
    },
    {
        "id": "48dc0a96406c2344",
        "type": "inject",
        "z": "a47c23bb89e240ba",
        "name": "INJECT",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "00 00 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 420,
        "wires": [
            [
                "092d900729cf02b1"
            ]
        ]
    },
    {
        "id": "092d900729cf02b1",
        "type": "influxdb in",
        "z": "a47c23bb89e240ba",
        "influxdb": "03603df4c981df55",
        "name": "IYYERMALAI-HTP EM",
        "query": "SELECT last(\"value\"),p,b,d,f FROM \"v\" WHERE (\"p\" = 'Iyyermalai' AND \"d\" =~ /.*HTP_EM*./ AND \"f\" = 'EAE_DAY') AND time >= now() - 24h GROUP BY time(5m) fill(null)\n",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "organisation",
        "x": 400,
        "y": 420,
        "wires": [
            [
                "dd03f23bc20f3720"
            ]
        ]
    },
    {
        "id": "75d9c26792d2939a",
        "type": "function",
        "z": "a47c23bb89e240ba",
        "name": "HTP_EM>60",
        "func": "\nvar TIME = msg.payload.TIME\nvar EAE_DAY = msg.payload.EAE_DAY\nvar PLANT=msg.payload.PLANT\nvar BLOCK =msg.payload.BLOCK\nvar DEVICE=msg.payload.DEVICE\nif(EAE_DAY >=\"60.00\")\n{\n    var newMsg = {};\n    newMsg.payload =\n    {\n        TIME,\n       EAE_DAY,\n       PLANT,\n       BLOCK,\n       DEVICE,\n      Issue:\"SPIKE\"\n    }\n     node.send(newMsg); \n}\n\n \n   \n\n\n\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 420,
        "wires": [
            [
                "a35b3d9c8e191d56",
                "bc6bb3db76cfae20"
            ]
        ]
    },
    {
        "id": "dd03f23bc20f3720",
        "type": "function",
        "z": "a47c23bb89e240ba",
        "name": "",
        "func": "\n\n    for (var i = 0; i < msg.payload.length;i++)\n    \n{\n    var newMsg = {};\n    newMsg.payload = {\n        TIME:new Date(msg.payload[i].time),\n        EAE_DAY:msg.payload[i].last,\n        PLANT:msg.payload[i].p,\n        BLOCK:msg.payload[i].b,\n        DEVICE:msg.payload[i].d\n    }\n    node.send(newMsg);\n}\nreturn null;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 420,
        "wires": [
            [
                "75d9c26792d2939a"
            ]
        ]
    },
    {
        "id": "3e48b2dac609d398",
        "type": "comment",
        "z": "a47c23bb89e240ba",
        "name": "ENERGY METER SPIKE DATA COLLECTION",
        "info": "",
        "x": 280,
        "y": 280,
        "wires": []
    },
    {
        "id": "1928c26493019a29",
        "type": "comment",
        "z": "a47c23bb89e240ba",
        "name": "INVERTER SPIKE DATA COLLECTION",
        "info": "",
        "x": 170,
        "y": 60,
        "wires": []
    },
    {
        "id": "8e0b7c616e45ed13",
        "type": "influxdb in",
        "z": "a47c23bb89e240ba",
        "influxdb": "03603df4c981df55",
        "name": "CONTROL ROOM",
        "query": "SELECT last(\"value\"),p,b,d,f FROM \"v\" WHERE (\"p\" = 'Iyyermalai'AND \"b\" = 'B91' AND \"d\" =~ /.*CR_EM*./ AND \"f\" = 'EAE_DAY') AND time >= now() - 24h GROUP BY time(5m) fill(null);\nSELECT last(\"value\"),p,b,d,f FROM \"v\" WHERE (\"p\" = 'Kayathar' AND \"b\" = 'B91' AND \"d\" =~ /.*CR_EM*./ AND \"f\" = 'EAE_DAY') AND time >= now() - 24h GROUP BY time(5m) fill(null);\nSELECT last(\"value\"),p,b,d,f FROM \"v\" WHERE (\"p\" = 'Panchapatty' AND \"b\" = 'B91' AND \"d\" =~ /.*CR_EM*./ AND \"f\" = 'EAE_DAY') AND time >= now() - 24h GROUP BY time(5m) fill(null);\n",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "organisation",
        "x": 390,
        "y": 680,
        "wires": [
            [
                "85ab89145ff88eaa"
            ]
        ]
    },
    {
        "id": "084d8e95334af19c",
        "type": "inject",
        "z": "a47c23bb89e240ba",
        "name": "INJECT",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "00 00 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 680,
        "wires": [
            [
                "8e0b7c616e45ed13"
            ]
        ]
    },
    {
        "id": "b84d975b165c9016",
        "type": "function",
        "z": "a47c23bb89e240ba",
        "name": "CR>400",
        "func": "\nvar TIME = msg.payload.TIME\nvar EAE_DAY = msg.payload.EAE_DAY\nvar PLANT=msg.payload.PLANT\nvar BLOCK =msg.payload.BLOCK\nvar DEVICE=msg.payload.DEVICE\nvar FIELD=msg.payload.FIELD\nif(EAE_DAY >=\"400.00\")\n{\n    var newMsg = {};\n    newMsg.payload =\n    {\n        TIME,\n       EAE_DAY,\n       PLANT,\n       BLOCK,\n       DEVICE,\n       FIELD,\n      Issue:\"SPIKE\"\n    }\n     node.send(newMsg); \n}\nreturn null;\n \n \n   \n\n\n\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 680,
        "wires": [
            [
                "85c53198a79fc73f",
                "97ad2d8d5ef943c0",
                "cef7d7991e768577"
            ]
        ]
    },
    {
        "id": "85ab89145ff88eaa",
        "type": "function",
        "z": "a47c23bb89e240ba",
        "name": "",
        "func": "\n    for (var j = 0; j<msg.payload.length;j++)\n    for (var i = 0; i < msg.payload[j].length;i++)\n    \n{\n    var newMsg = {};\n    newMsg.payload = {\n        TIME:new Date(msg.payload[j][i].time),\n        EAE_DAY:msg.payload[j][i].last,\n        PLANT:msg.payload[j][i].p,\n        BLOCK:msg.payload[j][i].b,\n        DEVICE:msg.payload[j][i].d,\n        FIELD:msg.payload[j][i].f\n        \n    }\n    node.send(newMsg);\n}\nreturn null;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 680,
        "wires": [
            [
                "b84d975b165c9016"
            ]
        ]
    },
    {
        "id": "aa11b88ee2541582",
        "type": "influxdb in",
        "z": "a47c23bb89e240ba",
        "influxdb": "03603df4c981df55",
        "name": "CONTROL ROOM",
        "query": "SELECT last(\"value\"),p,b,d,f FROM \"v\" WHERE (\"p\" = 'Karnataka_16MW'AND \"b\" = 'B91' AND \"d\" =~ /.*CR_EM*./ AND \"f\" = 'EAE_DAY') AND time >= now() - 24h GROUP BY time(5m) fill(null);\nSELECT last(\"value\"),p,b,d,f FROM \"v\" WHERE (\"p\" = 'Karnataka_34MW'AND \"b\" = 'B91' AND \"d\" =~ /.*CR_EM*./ AND \"f\" = 'EAE_DAY') AND time >= now() - 24h GROUP BY time(5m) fill(null);\nSELECT last(\"value\"),p,b,d,f FROM \"v\" WHERE (\"p\" = 'Savakala' AND \"b\" = 'B91' AND \"d\" =~ /.*CR_EM*./ AND \"f\" = 'EAE_DAY') AND time >= now() - 24h GROUP BY time(5m) fill(null);\nSELECT last(\"value\"),p,b,d,f FROM \"v\" WHERE (\"p\" = 'Karnataka' AND \"b\" = 'B91' AND \"d\" = 'ELITE_07' AND \"f\" = 'EAE_DAY') AND time >= now() - 24h GROUP BY time(5m) fill(null);\nSELECT last(\"value\"),p,b,d,f FROM \"v\" WHERE (\"p\" = 'Maharashtra' AND \"b\" = 'B91' AND \"d\" = 'SATEC_02' AND \"f\" = 'EAE_DAY') AND time >= now() - 24h GROUP BY time(5m) fill(null)",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "organisation",
        "x": 370,
        "y": 740,
        "wires": [
            [
                "53066f6512a3e699"
            ]
        ]
    },
    {
        "id": "8f0ed057a019235d",
        "type": "inject",
        "z": "a47c23bb89e240ba",
        "name": "INJECT",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "00 00 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 100,
        "y": 740,
        "wires": [
            [
                "aa11b88ee2541582"
            ]
        ]
    },
    {
        "id": "836f011f095217af",
        "type": "function",
        "z": "a47c23bb89e240ba",
        "name": "CR>200",
        "func": "\nvar TIME = msg.payload.TIME\nvar EAE_DAY = msg.payload.EAE_DAY\nvar PLANT=msg.payload.PLANT\nvar BLOCK =msg.payload.BLOCK\nvar DEVICE=msg.payload.DEVICE\nvar FIELD=msg.payload.FIELD\nif(EAE_DAY >=\"200.00\")\n{\n    var newMsg = {};\n    newMsg.payload =\n    {\n        TIME,\n       EAE_DAY,\n       PLANT,\n       BLOCK,\n       DEVICE,\n       FIELD,\n      Issue:\"SPIKE\"\n    }\n     node.send(newMsg); \n}\nreturn null;\n \n \n   \n\n\n\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 740,
        "wires": [
            [
                "85c53198a79fc73f",
                "a413bbdb50224828",
                "cef7d7991e768577"
            ]
        ]
    },
    {
        "id": "53066f6512a3e699",
        "type": "function",
        "z": "a47c23bb89e240ba",
        "name": "",
        "func": "\n    for (var j = 0; j<msg.payload.length;j++)\n    for (var i = 0; i < msg.payload[j].length;i++)\n    \n{\n    var newMsg = {};\n    newMsg.payload = {\n        TIME:new Date(msg.payload[j][i].time),\n        EAE_DAY:msg.payload[j][i].last,\n        PLANT:msg.payload[j][i].p,\n        BLOCK:msg.payload[j][i].b,\n        DEVICE:msg.payload[j][i].d,\n        FIELD:msg.payload[j][i].f\n        \n    }\n    node.send(newMsg);\n}\nreturn null;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 740,
        "wires": [
            [
                "836f011f095217af"
            ]
        ]
    },
    {
        "id": "1bdf07a7f2ba1f7b",
        "type": "influxdb in",
        "z": "a47c23bb89e240ba",
        "influxdb": "03603df4c981df55",
        "name": "CONTROL ROOM",
        "query": "SELECT last(\"value\"),p,b,d,f FROM \"v\" WHERE (\"p\" = 'Karnataka_50MW'AND \"b\" = 'B91' AND \"d\" =~ /.*CR_EM*./ AND \"f\" = 'EAE_DAY') AND time >= now() - 24h GROUP BY time(5m) fill(null);\nSELECT last(\"value\"),p,b,d,f FROM \"v\" WHERE (\"p\" = 'Musiri' AND \"b\" = 'B91' AND \"d\" =~ /.*CR_EM*./ AND \"f\" = 'EAE_DAY') AND time >= now() - 24h GROUP BY time(5m) fill(null);\nSELECT last(\"value\"),p,b,d,f FROM \"v\" WHERE (\"p\" = 'Vemulapadu' AND \"b\" = 'B91' AND \"d\" =~ /.*CR_EM*./ AND \"f\" = 'EAE_DAY') AND time >= now() - 24h GROUP BY time(5m) fill(null);\nSELECT last(\"value\"),p,b,d,f FROM \"v\" WHERE (\"p\" = 'TTpet' AND \"b\" = 'B91' AND \"d\" =~ /.*CR_EM*./ AND \"f\" = 'EAE_DAY') AND time >= now() - 24h GROUP BY time(5m) fill(null);\n",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "organisation",
        "x": 370,
        "y": 800,
        "wires": [
            [
                "c682891429d05234"
            ]
        ]
    },
    {
        "id": "b68a68752d9f10d4",
        "type": "inject",
        "z": "a47c23bb89e240ba",
        "name": "INJECT",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "00 00 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 100,
        "y": 800,
        "wires": [
            [
                "1bdf07a7f2ba1f7b"
            ]
        ]
    },
    {
        "id": "37cd02b6f8ea7863",
        "type": "function",
        "z": "a47c23bb89e240ba",
        "name": "CR>500",
        "func": "\nvar TIME = msg.payload.TIME\nvar EAE_DAY = msg.payload.EAE_DAY\nvar PLANT=msg.payload.PLANT\nvar BLOCK =msg.payload.BLOCK\nvar DEVICE=msg.payload.DEVICE\nvar FIELD=msg.payload.FIELD\nif(EAE_DAY >=\"500.00\")\n{\n    var newMsg = {};\n    newMsg.payload =\n    {\n        TIME,\n       EAE_DAY,\n       PLANT,\n       BLOCK,\n       DEVICE,\n       FIELD,\n      Issue:\"SPIKE\"\n    }\n     node.send(newMsg); \n}\nreturn null;\n \n \n   \n\n\n\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 800,
        "wires": [
            [
                "85c53198a79fc73f",
                "9f46e19b92a02ba5",
                "cef7d7991e768577"
            ]
        ]
    },
    {
        "id": "c682891429d05234",
        "type": "function",
        "z": "a47c23bb89e240ba",
        "name": "",
        "func": "\n    for (var j = 0; j<msg.payload.length;j++)\n    for (var i = 0; i < msg.payload[j].length;i++)\n    \n{\n    var newMsg = {};\n    newMsg.payload = {\n        TIME:new Date(msg.payload[j][i].time),\n        EAE_DAY:msg.payload[j][i].last,\n        PLANT:msg.payload[j][i].p,\n        BLOCK:msg.payload[j][i].b,\n        DEVICE:msg.payload[j][i].d,\n        FIELD:msg.payload[j][i].f\n        \n    }\n    node.send(newMsg);\n}\nreturn null;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 800,
        "wires": [
            [
                "37cd02b6f8ea7863"
            ]
        ]
    },
    {
        "id": "8a022c914dc46640",
        "type": "comment",
        "z": "a47c23bb89e240ba",
        "name": "CONTROL ROOM SPIKE DATA COLLECTION",
        "info": "",
        "x": 200,
        "y": 620,
        "wires": []
    },
    {
        "id": "34693a1fd53fd60c",
        "type": "influxdb in",
        "z": "a47c23bb89e240ba",
        "influxdb": "03603df4c981df55",
        "name": "CONTROL ROOM",
        "query": "SELECT last(\"value\"),p,b,d,f FROM \"v\" WHERE (\"p\" = 'Neemuch'AND \"b\" = 'B91' AND \"d\" =~ /.*CR_EM*./ AND \"f\" = 'EAE_DAY') AND time >= now() - 24h GROUP BY time(5m) fill(null);\n\n",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "organisation",
        "x": 350,
        "y": 860,
        "wires": [
            [
                "516272c8870b73c3"
            ]
        ]
    },
    {
        "id": "57e6970a74eb62d9",
        "type": "inject",
        "z": "a47c23bb89e240ba",
        "name": "NEEMUCH",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "00 00 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 860,
        "wires": [
            [
                "34693a1fd53fd60c"
            ]
        ]
    },
    {
        "id": "e2ffc50c7b4f9ccf",
        "type": "function",
        "z": "a47c23bb89e240ba",
        "name": "CR>750",
        "func": "\nvar TIME = msg.payload.TIME\nvar EAE_DAY = msg.payload.EAE_DAY\nvar PLANT=msg.payload.PLANT\nvar BLOCK =msg.payload.BLOCK\nvar DEVICE=msg.payload.DEVICE\nvar FIELD=msg.payload.FIELD\nif(EAE_DAY >=\"750.00\")\n{\n    var newMsg = {};\n    newMsg.payload =\n    {\n        TIME,\n       EAE_DAY,\n       PLANT,\n       BLOCK,\n       DEVICE,\n       FIELD,\n      Issue:\"SPIKE\"\n    }\n     node.send(newMsg); \n}\nreturn null;\n \n \n   \n\n\n\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 860,
        "wires": [
            [
                "85c53198a79fc73f",
                "25d3f2a828d81723",
                "cef7d7991e768577"
            ]
        ]
    },
    {
        "id": "516272c8870b73c3",
        "type": "function",
        "z": "a47c23bb89e240ba",
        "name": "",
        "func": "\n    for (var j = 0; j<msg.payload.length;j++)\n    for (var i = 0; i < msg.payload[j].length;i++)\n    \n{\n    var newMsg = {};\n    newMsg.payload = {\n        TIME:new Date(msg.payload[j][i].time),\n        EAE_DAY:msg.payload[j][i].last,\n        PLANT:msg.payload[j][i].p,\n        BLOCK:msg.payload[j][i].b,\n        DEVICE:msg.payload[j][i].d,\n        FIELD:msg.payload[j][i].f\n        \n    }\n    node.send(newMsg);\n}\nreturn null;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 860,
        "wires": [
            [
                "e2ffc50c7b4f9ccf"
            ]
        ]
    },
    {
        "id": "99fbdbfd0e6108dc",
        "type": "influxdb in",
        "z": "a47c23bb89e240ba",
        "influxdb": "03603df4c981df55",
        "name": "CONTROL ROOM",
        "query": "SELECT last(\"value\"),p,b,d,f FROM \"v\" WHERE (\"p\" = 'Bahera'AND \"b\" = 'B91' AND \"d\" =~ /.*CR_EM*./ AND \"f\" = 'EAE_DAY') AND time >= now() - 24h GROUP BY time(5m) fill(null);\nSELECT last(\"value\"),p,b,d,f FROM \"v\" WHERE (\"p\" = 'Punjab 20MW' AND \"b\" = 'B91' AND \"d\" =~ /.*CR_EM*./ AND \"f\" = 'EAE_DAY') AND time >= now() - 24h GROUP BY time(5m) fill(null);\nSELECT last(\"value\"),p,b,d,f FROM \"v\" WHERE (\"p\" = 'Punjab4MW' AND \"b\" = 'B92' AND \"d\" =~ /.*CR_EM*./ AND \"f\" = 'EAE_DAY') AND time >= now() - 24h GROUP BY time(5m) fill(null);\nSELECT last(\"value\"),p,b,d,f FROM \"v\" WHERE (\"p\" = 'Punjab 12MW' AND \"b\" = 'B91' AND \"d\" =~ /.*CR_EM*./ AND \"f\" = 'EAE_DAY') AND time >= now() - 24h GROUP BY time(5m) fill(null)\n",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "organisation",
        "x": 350,
        "y": 920,
        "wires": [
            [
                "b1311a8e06878eb8"
            ]
        ]
    },
    {
        "id": "3fda18fbb4157b91",
        "type": "inject",
        "z": "a47c23bb89e240ba",
        "name": "INJECT",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "00 00 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 920,
        "wires": [
            [
                "99fbdbfd0e6108dc"
            ]
        ]
    },
    {
        "id": "0c06dc9beecbe33d",
        "type": "function",
        "z": "a47c23bb89e240ba",
        "name": "CR>150",
        "func": "\nvar TIME = msg.payload.TIME\nvar EAE_DAY = msg.payload.EAE_DAY\nvar PLANT=msg.payload.PLANT\nvar BLOCK =msg.payload.BLOCK\nvar DEVICE=msg.payload.DEVICE\nvar FIELD=msg.payload.FIELD\nif(EAE_DAY >=\"150.00\")\n{\n    var newMsg = {};\n    newMsg.payload =\n    {\n        TIME,\n       EAE_DAY,\n       PLANT,\n       BLOCK,\n       DEVICE,\n       FIELD,\n      Issue:\"SPIKE\"\n    }\n     node.send(newMsg); \n}\nreturn null;\n \n \n   \n\n\n\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 920,
        "wires": [
            [
                "49b1f795d8d5d23d",
                "85c53198a79fc73f",
                "cef7d7991e768577"
            ]
        ]
    },
    {
        "id": "b1311a8e06878eb8",
        "type": "function",
        "z": "a47c23bb89e240ba",
        "name": "",
        "func": "\n    for (var j = 0; j<msg.payload.length;j++)\n    for (var i = 0; i < msg.payload[j].length;i++)\n    \n{\n    var newMsg = {};\n    newMsg.payload = {\n        TIME:new Date(msg.payload[j][i].time),\n        EAE_DAY:msg.payload[j][i].last,\n        PLANT:msg.payload[j][i].p,\n        BLOCK:msg.payload[j][i].b,\n        DEVICE:msg.payload[j][i].d,\n        FIELD:msg.payload[j][i].f\n        \n    }\n    node.send(newMsg);\n}\nreturn null;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 920,
        "wires": [
            [
                "0c06dc9beecbe33d"
            ]
        ]
    },
    {
        "id": "49b1f795d8d5d23d",
        "type": "debug",
        "z": "a47c23bb89e240ba",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1090,
        "y": 920,
        "wires": []
    },
    {
        "id": "85c53198a79fc73f",
        "type": "file",
        "z": "a47c23bb89e240ba",
        "name": "CR",
        "filename": "C:\\Users\\91735\\Documents\\CR.csv",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 950,
        "y": 960,
        "wires": [
            [
                "082173fdf0e49ace"
            ]
        ]
    },
    {
        "id": "082173fdf0e49ace",
        "type": "debug",
        "z": "a47c23bb89e240ba",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1130,
        "y": 960,
        "wires": []
    },
    {
        "id": "97ad2d8d5ef943c0",
        "type": "debug",
        "z": "a47c23bb89e240ba",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1090,
        "y": 680,
        "wires": []
    },
    {
        "id": "a413bbdb50224828",
        "type": "debug",
        "z": "a47c23bb89e240ba",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1070,
        "y": 740,
        "wires": []
    },
    {
        "id": "9f46e19b92a02ba5",
        "type": "debug",
        "z": "a47c23bb89e240ba",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1070,
        "y": 800,
        "wires": []
    },
    {
        "id": "25d3f2a828d81723",
        "type": "debug",
        "z": "a47c23bb89e240ba",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1090,
        "y": 860,
        "wires": []
    },
    {
        "id": "cef7d7991e768577",
        "type": "function",
        "z": "a47c23bb89e240ba",
        "name": "tags and fields",
        "func": "msg.payload = [\n    {\n        measurement: \"CR_SPIKE\",\n        fields: {\n            \n          EAE_DAY : msg.payload.EAE_DAY\n        },\n        tags:{\n            PLANT:msg.payload.PLANT,\n            BLOCK :msg.payload.BLOCK,\n            DEVICE:msg.payload.DEVICE,\n            FIELD:msg.payload.FIELD\n        \n        },\n        \n        timestamp:msg.payload.TIME\n        \n    },\n\n];\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 1020,
        "wires": [
            [
                "3cbd47f6424377cc"
            ]
        ]
    },
    {
        "id": "3cbd47f6424377cc",
        "type": "influxdb batch",
        "z": "a47c23bb89e240ba",
        "influxdb": "ed4f779dff97f1b7",
        "precision": "",
        "retentionPolicy": "",
        "name": "",
        "database": "",
        "retentionPolicyV18Flux": "",
        "org": "",
        "bucket": "",
        "x": 1220,
        "y": 1020,
        "wires": []
    },
    {
        "id": "bc6bb3db76cfae20",
        "type": "function",
        "z": "a47c23bb89e240ba",
        "name": "tags and fields",
        "func": "msg.payload = [\n    {\n        measurement: \"EM_SPIKE\",\n        fields: {\n            \n          EAE_DAY : msg.payload.EAE_DAY\n        },\n        tags:{\n            PLANT:msg.payload.PLANT,\n            BLOCK :msg.payload.BLOCK,\n            DEVICE:msg.payload.DEVICE,\n            FIELD:msg.payload.FIELD\n        \n        },\n        \n        timestamp:msg.payload.TIME\n        \n    },\n\n];\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 580,
        "wires": [
            [
                "0d0eefc42e922a71"
            ]
        ]
    },
    {
        "id": "0d0eefc42e922a71",
        "type": "influxdb batch",
        "z": "a47c23bb89e240ba",
        "influxdb": "ed4f779dff97f1b7",
        "precision": "",
        "retentionPolicy": "",
        "name": "",
        "database": "",
        "retentionPolicyV18Flux": "",
        "org": "",
        "bucket": "",
        "x": 1220,
        "y": 580,
        "wires": []
    },
    {
        "id": "f549806493e722f7",
        "type": "function",
        "z": "a47c23bb89e240ba",
        "name": "tags and fields",
        "func": "msg.payload = [\n    {\n        measurement: \"INV_SPIKE\",\n        fields: {\n            \n          EAE_DAY : msg.payload.EAE_DAY\n        },\n        tags:{\n            PLANT:msg.payload.PLANT,\n            BLOCK :msg.payload.BLOCK,\n            DEVICE:msg.payload.DEVICE,\n            FIELD:msg.payload.FIELD\n        \n        },\n        \n        timestamp:msg.payload.TIME\n        \n    },\n\n];\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 260,
        "wires": [
            [
                "5cd0c239a6689147"
            ]
        ]
    },
    {
        "id": "5cd0c239a6689147",
        "type": "influxdb batch",
        "z": "a47c23bb89e240ba",
        "influxdb": "ed4f779dff97f1b7",
        "precision": "",
        "retentionPolicy": "",
        "name": "",
        "database": "",
        "retentionPolicyV18Flux": "",
        "org": "",
        "bucket": "",
        "x": 1140,
        "y": 260,
        "wires": []
    },
    {
        "id": "b0bc1b8299a58d20",
        "type": "inject",
        "z": "1201a4facbd94fb3",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 200,
        "y": 260,
        "wires": [
            [
                "ed7a2c0f94f550ee"
            ]
        ]
    },
    {
        "id": "ed7a2c0f94f550ee",
        "type": "influxdb in",
        "z": "1201a4facbd94fb3",
        "influxdb": "1946c585afdca4d4",
        "name": "Influxdb 2.0",
        "query": "from(bucket: \"tata\")\n  |> range(start: -15m)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"v\")\n  |> filter(fn: (r) => r[\"d\"] =~ /INV/)\n  |> filter(fn: (r) => r[\"f\"] == \"EAE_DAY\")\n  |> filter(fn: (r) => r[\"p\"] == \"Iyyermalai\")\n  |> filter(fn: (r) => r[\"_field\"] == \"value\")\n  |> filter(fn: (r) => r._value > 0.5)\n  |> aggregateWindow(every: 1d, fn: max, createEmpty: false)\n  |> yield(name: \"max\")\n",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "largeutilitylakeasia",
        "x": 370,
        "y": 260,
        "wires": [
            [
                "641aa89097f31821"
            ]
        ]
    },
    {
        "id": "510410f18f7d7213",
        "type": "function",
        "z": "1201a4facbd94fb3",
        "name": "HTP_EM>40",
        "func": "\nvar TIME = msg.payload.TIME\nvar EAE_DAY = msg.payload.EAE_DAY\nvar PLANT=msg.payload.PLANT\nvar BLOCK =msg.payload.BLOCK\nvar DEVICE=msg.payload.DEVICE\nvar FIELD=msg.payload.FIELD\nif(EAE_DAY >=\"40.00\")\n{\n    var newMsg = {};\n    newMsg.payload =\n    {\n        TIME,\n       EAE_DAY,\n       PLANT,\n       BLOCK,\n       DEVICE,\n       FIELD,\n      Issue:\"SPIKE\"\n    }\n     node.send(newMsg); \n}\nreturn null;\n \n \n   \n\n\n\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "ebda1bfd940ef9a1",
        "type": "function",
        "z": "1201a4facbd94fb3",
        "name": "",
        "func": "\n    for (var j = 0; j<msg.payload.length;j++)\n    for (var i = 0; i < msg.payload[j].length;i++)\n    \n{\n    var newMsg = {};\n    newMsg.payload = {\n        TIME:new Date(msg.payload[j][i].time),\n        EAE_DAY:msg.payload[j][i].last,\n        PLANT:msg.payload[j][i].p,\n        BLOCK:msg.payload[j][i].b,\n        DEVICE:msg.payload[j][i].d,\n        FIELD:msg.payload[j][i].f\n        \n    }\n    node.send(newMsg);\n}\nreturn null;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 440,
        "wires": [
            [
                "510410f18f7d7213"
            ]
        ]
    },
    {
        "id": "641aa89097f31821",
        "type": "debug",
        "z": "1201a4facbd94fb3",
        "name": "debug 47",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 580,
        "y": 320,
        "wires": []
    },
    {
        "id": "e95a76555c61fc44",
        "type": "debug",
        "z": "24ecb8a4bab90bf3",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1170,
        "y": 500,
        "wires": []
    },
    {
        "id": "42610d2796857649",
        "type": "debug",
        "z": "24ecb8a4bab90bf3",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1010,
        "y": 380,
        "wires": []
    },
    {
        "id": "555e90a33a173194",
        "type": "function",
        "z": "24ecb8a4bab90bf3",
        "name": "combine",
        "func": "context.data = context.data || {};\nswitch(msg.topic){\n    case \"DELETE\":\n        context.data.delete = msg.payload;\n        msg = null;\n        break;\n    case \"PUT\":\n        context.data.put = msg.payload;\n        msg = null;\n        break;\n}\nif(context.data.delete != null && context.data.put != null){\n    var data_combine = {\n        \"delete\": context.data.delete,\n        \"put\": context.data.put\n       \n    }\n    context.data = null\n    return {payload: data_combine};\n}  ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 380,
        "wires": [
            [
                "32e94d17bd9ff1b1",
                "5a7927d428091118",
                "42635cf4f011d4b4"
            ]
        ]
    },
    {
        "id": "c964426aab284156",
        "type": "inject",
        "z": "24ecb8a4bab90bf3",
        "name": "",
        "props": [
            {
                "p": "payload.data",
                "v": "",
                "vt": "str"
            },
            {
                "p": "payload.filename",
                "v": "",
                "vt": "str"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 150,
        "y": 340,
        "wires": [
            [
                "dee7a43ce7d72218",
                "dec99a54835c0189"
            ]
        ]
    },
    {
        "id": "a9cc956b5fa25861",
        "type": "change",
        "z": "24ecb8a4bab90bf3",
        "name": "DELETE",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "DELETE",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 480,
        "y": 340,
        "wires": [
            [
                "555e90a33a173194"
            ]
        ]
    },
    {
        "id": "f06a658e482e774c",
        "type": "change",
        "z": "24ecb8a4bab90bf3",
        "name": "PUT",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "PUT",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 470,
        "y": 420,
        "wires": [
            [
                "555e90a33a173194"
            ]
        ]
    },
    {
        "id": "5a7927d428091118",
        "type": "function",
        "z": "24ecb8a4bab90bf3",
        "name": "array comparison",
        "func": "var DELETE_LENGTH = msg.payload.delete.length\n\nvar PUT_LENGTH = msg.payload.put.length\n\nlet DELETE = [];\nlet PUT = [];\n\nlet BALANCE = [];\nif(DELETE_LENGTH != PUT_LENGTH)\n{\nfor (var i = 0; i<DELETE_LENGTH;i++)\n\n{  \n     DELETE.push(msg.payload.delete[i].name);\n   \n}\nfor (var j = 0; j<PUT_LENGTH;j++)\n{  \n   \n   PUT.push(msg.payload.put[j].name);\n   \n}\nfor(var k=0; k<DELETE_LENGTH; k++)\n{\n       var flag = 0;\n       for(var l=0; l<PUT_LENGTH; l++)\n       {\n           if(DELETE[k] === PUT[l])\n           {\n             \n               PUT.splice(l,1);\n               l--;\n               flag = 1;\n               \n           }\n       }\n \n       if(flag == 0)\n       {\n            var device2 = {};\n           device2.payload = {\n               \n           balance:DELETE[k]\n           }\n       \n       \n    node.send(device2);     \n}\n}\n}\nreturn null;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 380,
        "wires": [
            [
                "42610d2796857649",
                "911d2e66736cff13"
            ]
        ]
    },
    {
        "id": "7e38eeda3512bbe9",
        "type": "debug",
        "z": "24ecb8a4bab90bf3",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1170,
        "y": 440,
        "wires": []
    },
    {
        "id": "911d2e66736cff13",
        "type": "function",
        "z": "24ecb8a4bab90bf3",
        "name": "insert function",
        "func": "msg.payload.data=\"/home/visionUser/test/tolocaltest/\"+msg.payload.balance\n//flow.set(\"path_test\",  msg.payload.path);\nmsg.payload.filename=msg.payload.balance\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 440,
        "wires": [
            [
                "1dadf5d818b3b302"
            ]
        ]
    },
    {
        "id": "7f7030c27db83051",
        "type": "change",
        "z": "24ecb8a4bab90bf3",
        "name": "dlt_file",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.filename",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 870,
        "y": 500,
        "wires": [
            [
                "1422e4bd3aa099d5"
            ]
        ]
    },
    {
        "id": "32e94d17bd9ff1b1",
        "type": "debug",
        "z": "24ecb8a4bab90bf3",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 830,
        "y": 340,
        "wires": []
    },
    {
        "id": "42635cf4f011d4b4",
        "type": "function",
        "z": "24ecb8a4bab90bf3",
        "name": "delete_function",
        "func": "var DELETE_LENGTH = msg.payload.delete.length\n\nvar PUT_LENGTH = msg.payload.put.length\n\nfor (var i = 0; i<DELETE_LENGTH;i++)\n{  \nfor (var j = 0; j<PUT_LENGTH;j++)\n   {  \n   \n\n    var dlt_file= msg.payload.delete[i].name\n    var check_file=msg.payload.put[j].name\n    var filename;\n\nif(dlt_file==check_file)\n\n{ var device2 = {};\n           device2.payload = {\n     filename:\"/home/visionUser/test/tolocaltest/\"+dlt_file\n}\n\nnode.send(device2)\n}\n}\n}\nreturn null",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 500,
        "wires": [
            [
                "7f7030c27db83051"
            ]
        ]
    },
    {
        "id": "1422e4bd3aa099d5",
        "type": "sftp in",
        "z": "24ecb8a4bab90bf3",
        "name": "DELETE",
        "sftp": "",
        "operation": "delete",
        "filename": "",
        "localFilename": "",
        "workdir": "",
        "x": 1020,
        "y": 500,
        "wires": [
            [
                "e95a76555c61fc44"
            ]
        ]
    },
    {
        "id": "dec99a54835c0189",
        "type": "sftp in",
        "z": "24ecb8a4bab90bf3",
        "name": "pv india",
        "sftp": "",
        "operation": "list",
        "filename": "",
        "localFilename": "",
        "workdir": "/home/iplon/ftp_test",
        "x": 320,
        "y": 420,
        "wires": [
            [
                "f06a658e482e774c"
            ]
        ]
    },
    {
        "id": "dee7a43ce7d72218",
        "type": "sftp in",
        "z": "24ecb8a4bab90bf3",
        "name": "pv india",
        "sftp": "",
        "operation": "delete",
        "filename": "",
        "localFilename": "",
        "workdir": "/home/visionUser/test/tolocaltest/",
        "x": 320,
        "y": 340,
        "wires": [
            [
                "a9cc956b5fa25861"
            ]
        ]
    },
    {
        "id": "1dadf5d818b3b302",
        "type": "sftp in",
        "z": "24ecb8a4bab90bf3",
        "name": "PUT",
        "sftp": "",
        "operation": "put",
        "filename": "",
        "localFilename": "",
        "workdir": "/home/iplon/ftp_test",
        "x": 990,
        "y": 440,
        "wires": [
            [
                "7e38eeda3512bbe9"
            ]
        ],
        "info": "sleep 10"
    },
    {
        "id": "4d099161bf104b9c",
        "type": "debug",
        "z": "8339e6cdf0c78673",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1430,
        "y": 400,
        "wires": []
    },
    {
        "id": "c895fed2fb567de9",
        "type": "function",
        "z": "8339e6cdf0c78673",
        "name": "obj_file",
        "func": "var text = new Date(msg.sourceTimestamp);\nvar dateUTC = new Date(text).toISOString();\nvar arrstr = []\nlet epoch = new Date().getTime()\nif (msg.payload == null) {\n    (msg.payload = \"null\") && (dateUTC = 0)\n}\nvar tag = msg.topic.split(\"ns=2;s=\");\narrstr = tag[1].split(\".\", 5);\nvar arrstr_len = arrstr.length\n\nif (arrstr_len == 3) {\n    var obj = {\n        time: dateUTC,\n        value: msg.payload,\n        bd: arrstr[0],\n        d: arrstr[1],\n        f: arrstr[2]\n    }\n    msg.payload = obj\n}\n\nif (arrstr_len == 4){\n    var obj1 = {\n        time: dateUTC,\n        value: msg.payload,\n        bd: arrstr[0],\n        d: arrstr[1],\n        dd: arrstr[2],\n        f: arrstr[3]\n    }\n    msg.payload = obj1\n}\n\nif (arrstr_len == 5) {\n    var obj2 = {\n        time: dateUTC,\n        value: msg.payload,\n        bd: arrstr[0],\n        d: arrstr[1],\n        dd: arrstr[2],\n        dt: arrstr[3],\n        f: arrstr[4]\n    }\n    msg.payload = obj2\n}\n\nmsg.topic=\"client\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 320,
        "wires": [
            [
                "82937797e7acb670"
            ]
        ]
    },
    {
        "id": "a3f395e6574f70e5",
        "type": "change",
        "z": "8339e6cdf0c78673",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "payload.id",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 550,
        "y": 260,
        "wires": [
            [
                "f6a9b354c75dd762"
            ]
        ]
    },
    {
        "id": "b6c34341872ca3fb",
        "type": "function",
        "z": "8339e6cdf0c78673",
        "name": "node ids",
        "func": "var array=[\n \"ns=2;s=BLOCK_1.INVERTER1.INVERTER4.DC_POWER\",\n \"ns=2;s=BLOCK_1.INVERTER1.INVERTER4.DC_CURRENT\",\n \"ns=2;s=BLOCK_1.INVERTER1.INVERTER4.DC_VOLTAGE\"\n]\nmsg.payload = array\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 360,
        "wires": [
            [
                "41408160fd247044"
            ]
        ]
    },
    {
        "id": "41408160fd247044",
        "type": "function",
        "z": "8339e6cdf0c78673",
        "name": "topic",
        "func": "for(var i = 0; i < msg.payload.length; i++)\n{\n    var obj={};\n    obj.payload = {id: msg.payload[i]}\nnode.send(obj)\n}\nreturn null;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 340,
        "wires": [
            [
                "a3f395e6574f70e5"
            ]
        ]
    },
    {
        "id": "a24922c5fc6e335c",
        "type": "file",
        "z": "8339e6cdf0c78673",
        "name": "opcua.csv",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 1280,
        "y": 400,
        "wires": [
            [
                "4d099161bf104b9c"
            ]
        ]
    },
    {
        "id": "1103c4df65924c2f",
        "type": "catch",
        "z": "8339e6cdf0c78673",
        "name": "",
        "scope": [
            "f6a9b354c75dd762"
        ],
        "uncaught": false,
        "x": 490,
        "y": 60,
        "wires": [
            [
                "74625adeea54414d"
            ]
        ]
    },
    {
        "id": "74625adeea54414d",
        "type": "debug",
        "z": "8339e6cdf0c78673",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 790,
        "y": 60,
        "wires": []
    },
    {
        "id": "e0155892f645ef2a",
        "type": "inject",
        "z": "8339e6cdf0c78673",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "*/5 0-23 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 360,
        "wires": [
            [
                "b6c34341872ca3fb"
            ]
        ]
    },
    {
        "id": "c3e31da2e4eb3cb3",
        "type": "csv",
        "z": "8339e6cdf0c78673",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "all",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": false,
        "include_null_values": true,
        "x": 1010,
        "y": 400,
        "wires": [
            [
                "658c98a153ea6d2d"
            ]
        ]
    },
    {
        "id": "896ba383469d513a",
        "type": "json",
        "z": "8339e6cdf0c78673",
        "name": "json file",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 400,
        "y": 460,
        "wires": [
            [
                "afe11d62bbc13c34"
            ]
        ]
    },
    {
        "id": "3450db70b1460bcb",
        "type": "file in",
        "z": "8339e6cdf0c78673",
        "name": "read json",
        "filename": "/home/plant.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 260,
        "y": 460,
        "wires": [
            [
                "896ba383469d513a"
            ]
        ]
    },
    {
        "id": "7b4a4fe28c37993c",
        "type": "file",
        "z": "8339e6cdf0c78673",
        "name": "",
        "filename": "/home/plant.json",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 840,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "003a4925a56bfaee",
        "type": "inject",
        "z": "8339e6cdf0c78673",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 460,
        "y": 140,
        "wires": [
            [
                "c87f7a4567e0adbc"
            ]
        ]
    },
    {
        "id": "c87f7a4567e0adbc",
        "type": "template",
        "z": "8339e6cdf0c78673",
        "name": "json template",
        "field": "payload",
        "fieldType": "msg",
        "format": "json",
        "syntax": "mustache",
        "template": "{\n    \"plantname\": \"Technic_solar\",\n    \"blocks\": [\n        {\n            \"blockname\": \"BLOCK_1\",\n            \"blocknums\": \"B01\",\n            \"dev_disc\": [\n                \"INV1_SMB\",\n                \"INVERTER1\"\n            ],\n            \"dev_type\": [\n                \"INV\",\n                \"INV\"\n            ],\n            \"masters\": [\n                \"1\",\n                \"2\"\n            ],\n            \"cloumns\": [\n                {\n                    \"hostname\": \"iGatePV_7712\",\n                    \"hostid\": \"7712\",\n                    \"text\": \"opcua\"\n                }\n            ]\n        },\n        {\n            \"blockname\": \"MCR\",\n            \"blocknums\": \"CR\",\n            \"dev_disc\": [\n                \"METER_ETH_PRGM\",\n                \"INVERTER1\",\n                \"INVERTER1\",\n                \"IO_MODULE_INFO\",\n                \"SLDC\"\n            ],\n            \"dev_type\": [\n                \"EM\",\n                \"INV\",\n                \"INV\",\n                \"IO\",\n                \"SLDC\"\n            ],\n            \"masters\": [\n                \"1\",\n                \"2\",\n                \"3\",\n                \"4\",\n                \"5\"\n            ],\n            \"columns\": [\n                {\n                    \"hostname\": \"iGatePV_7712\",\n                    \"hostid\": \"7712\",\n                    \"text\": \"opcua\"\n                }\n            ]\n        }\n    ]\n}",
        "output": "json",
        "x": 650,
        "y": 140,
        "wires": [
            [
                "7b4a4fe28c37993c"
            ]
        ]
    },
    {
        "id": "658c98a153ea6d2d",
        "type": "function",
        "z": "8339e6cdf0c78673",
        "name": "file_name",
        "func": "\nvar epoch=new Date().getTime();\n\nvar path = \"/home/\";\nmsg.filename = \"7712_\" + epoch + \".csv\";\nmsg.filename = path + \"/\" + msg.filename;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1140,
        "y": 400,
        "wires": [
            [
                "a24922c5fc6e335c"
            ]
        ]
    },
    {
        "id": "afe11d62bbc13c34",
        "type": "change",
        "z": "8339e6cdf0c78673",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "json",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 550,
        "y": 460,
        "wires": [
            [
                "aa6942711e26ef26"
            ]
        ]
    },
    {
        "id": "aa6942711e26ef26",
        "type": "function",
        "z": "8339e6cdf0c78673",
        "name": "combine",
        "func": "context.data = context.data || {};\nswitch (msg.topic) {\n    case \"client\":\n        context.data.client = msg.payload;\n        msg = null;\n        break;\n    case \"json\":\n        context.data.json = msg.payload;\n        msg = null;\n        break;\n}\nif (context.data.client != null && context.data.json != null) {\n    var data_combine = {\n        \"client\": context.data.client,\n        \"json\": context.data.json\n\n    }\n    context.data = null\n    return { payload: data_combine };\n}  \n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 400,
        "wires": [
            [
                "7f6bad5d4684969a"
            ]
        ]
    },
    {
        "id": "7f6bad5d4684969a",
        "type": "function",
        "z": "8339e6cdf0c78673",
        "name": "comparison",
        "func": "var json_len = msg.payload.json.blocks.length\nvar client_len = msg.payload.client.length\n\nvar p = msg.payload.json.plantname\nvar u = \"null\"\n\nvar array = []\n\nfor (var i = 0; i < json_len; i++) {\n    for (var j = 0; j < client_len; j++) {\n        if (msg.payload.json.blocks[i].blockname == msg.payload.client[j].bd) {\n            var dev_disc_len = msg.payload.json.blocks[i].dev_disc.length\n            for (var k = 0; k < dev_disc_len; k++) {\n                if (msg.payload.json.blocks[i].dev_disc[k] == msg.payload.client[j].d) {\n                    var obj = {\n                        time: msg.payload.client[j].time,\n                        b: msg.payload.json.blocks[i].blocknums,\n                        bd: msg.payload.client[j].bd,\n                        d: msg.payload.client[j].d,\n                        dd: msg.payload.json.blocks[i].dev_disc[k] || msg.payload.client[j].dd,\n                        dt: msg.payload.json.blocks[i].dev_type[k] || msg.payload.client[j].dt,\n                        f: msg.payload.client[j].f,\n                        fd: msg.payload.client[j].f,\n                        h: msg.payload.json.blocks[i].cloumns[0].hostname,\n                        iid: msg.payload.json.blocks[i].cloumns[0].hostid,\n                        m: msg.payload.json.blocks[i].masters[k],\n                        p: msg.payload.json.plantname,\n                        qu: 0,\n                        text: msg.payload.json.blocks[i].cloumns[0].text,\n                        u: \"null\",\n                        value: msg.payload.client[j].value\n                    }\n                    array.push(obj)\n                }                \n            }\n        }\n    }\n}\nmsg.payload = array\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 400,
        "wires": [
            [
                "c3e31da2e4eb3cb3"
            ]
        ]
    },
    {
        "id": "ee5e90b0431f624b",
        "type": "join",
        "z": "8339e6cdf0c78673",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "3",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1210,
        "y": 320,
        "wires": [
            [
                "aa6942711e26ef26"
            ]
        ]
    },
    {
        "id": "f6a9b354c75dd762",
        "type": "OpcUa-Client",
        "z": "8339e6cdf0c78673",
        "endpoint": "3062a34b40c5b07a",
        "action": "read",
        "deadbandtype": "a",
        "deadbandvalue": 1,
        "time": 10,
        "timeUnit": "s",
        "certificate": "n",
        "localfile": "",
        "localkeyfile": "",
        "securitymode": "None",
        "securitypolicy": "None",
        "folderName4PKI": "",
        "name": "",
        "x": 740,
        "y": 320,
        "wires": [
            [
                "c895fed2fb567de9"
            ]
        ]
    },
    {
        "id": "82937797e7acb670",
        "type": "debug",
        "z": "8339e6cdf0c78673",
        "name": "debug 49",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1020,
        "y": 200,
        "wires": []
    },
    {
        "id": "453cb149c076aa96",
        "type": "OpcUa-Client",
        "z": "fd899b3a7aec433c",
        "endpoint": "3062a34b40c5b07a",
        "action": "read",
        "deadbandtype": "a",
        "deadbandvalue": 1,
        "time": 10,
        "timeUnit": "s",
        "certificate": "n",
        "localfile": "",
        "localkeyfile": "",
        "securitymode": "None",
        "securitypolicy": "None",
        "folderName4PKI": "",
        "name": "",
        "x": 760,
        "y": 260,
        "wires": [
            [
                "4c0369455e833114"
            ]
        ]
    },
    {
        "id": "294f1202f1e23d8d",
        "type": "debug",
        "z": "fd899b3a7aec433c",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1350,
        "y": 440,
        "wires": []
    },
    {
        "id": "4c0369455e833114",
        "type": "function",
        "z": "fd899b3a7aec433c",
        "name": "obj_file",
        "func": "var text = new Date(msg.sourceTimestamp);\nvar dateUTC = new Date(text).toISOString();\nvar arrstr = []\nlet epoch = new Date().getTime()\nif (msg.payload == null) {\n    (msg.payload = \"null\") && (dateUTC = 0)\n}\nvar tag = msg.topic.split(\"ns=2;s=\");\narrstr = tag[1].split(\".\",5);\nvar arrstr_len = arrstr.length\n\nif (arrstr_len == 3) {\n    var obj = {\n        time: dateUTC,\n        value: msg.payload,\n        bd: arrstr[0],\n        d: arrstr[1],\n        f: arrstr[2]\n    }\n    msg.payload = obj\n}\n\nif (arrstr_len == 4){\n    obj = {\n        time: dateUTC,\n        value: msg.payload,\n        bd: arrstr[0],\n        d: arrstr[1],\n        dd: arrstr[2],\n        f: arrstr[3]\n    }\n    msg.payload = obj\n}\n\nif (arrstr_len == 5) {\n    obj = {\n        time: dateUTC,\n        value: msg.payload,\n        bd: arrstr[0],\n        d: arrstr[1],\n        dd: arrstr[2],\n        dt: arrstr[3],\n        f: arrstr[4]\n    }\n    msg.payload = obj\n}\n\nmsg.topic=\"client\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 260,
        "wires": [
            [
                "e6d69594b7e018e1"
            ]
        ]
    },
    {
        "id": "b76f07c74068192e",
        "type": "change",
        "z": "fd899b3a7aec433c",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "payload.id",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 570,
        "y": 260,
        "wires": [
            [
                "453cb149c076aa96"
            ]
        ]
    },
    {
        "id": "01fb99da3ba03962",
        "type": "function",
        "z": "fd899b3a7aec433c",
        "name": "node ids",
        "func": "var array=[\n \"ns=2;s=BLOCK_1.INVERTER1.INVERTER4.INV1_1.DC_POWER\",\n \"ns=2;s=BLOCK_1.INVERTER1.INVERTER4.DC_CURRENT\",\n \"ns=2;s=BLOCK_1.INVERTER1.DC_VOLTAGE\"\n ]\n \n msg.payload=array\n \n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 260,
        "wires": [
            [
                "3a7a445ad1b19faa"
            ]
        ]
    },
    {
        "id": "3a7a445ad1b19faa",
        "type": "function",
        "z": "fd899b3a7aec433c",
        "name": "topic",
        "func": "for(var i = 0; i < msg.payload.length; i++)\n{\n    var obj={};\n\nobj.payload= {\n   id: msg.payload[i]\n \n}\n\nnode.send(obj)\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 260,
        "wires": [
            [
                "b76f07c74068192e"
            ]
        ]
    },
    {
        "id": "736a5d735e03430b",
        "type": "file",
        "z": "fd899b3a7aec433c",
        "name": "opcua.csv",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 1340,
        "y": 360,
        "wires": [
            [
                "294f1202f1e23d8d"
            ]
        ]
    },
    {
        "id": "c327572943de6ebf",
        "type": "catch",
        "z": "fd899b3a7aec433c",
        "name": "",
        "scope": [
            "453cb149c076aa96"
        ],
        "uncaught": false,
        "x": 490,
        "y": 60,
        "wires": [
            [
                "d697b7d97af9fba5"
            ]
        ]
    },
    {
        "id": "d697b7d97af9fba5",
        "type": "debug",
        "z": "fd899b3a7aec433c",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 730,
        "y": 60,
        "wires": []
    },
    {
        "id": "a2fab39f837c735f",
        "type": "inject",
        "z": "fd899b3a7aec433c",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "*/5 0-23 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 90,
        "y": 360,
        "wires": [
            [
                "74dbf8bc7da870c2",
                "01fb99da3ba03962",
                "e477a5172e8bb288"
            ]
        ]
    },
    {
        "id": "ec3075d83d0cf70e",
        "type": "csv",
        "z": "fd899b3a7aec433c",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "all",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": false,
        "include_null_values": true,
        "x": 1070,
        "y": 360,
        "wires": [
            [
                "420c80fde46ed778"
            ]
        ]
    },
    {
        "id": "fd047fcb5b5625eb",
        "type": "json",
        "z": "fd899b3a7aec433c",
        "name": "plant.json file",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 410,
        "y": 460,
        "wires": [
            [
                "fbdfa3716605a51b"
            ]
        ]
    },
    {
        "id": "e477a5172e8bb288",
        "type": "file in",
        "z": "fd899b3a7aec433c",
        "name": "read json",
        "filename": "/home/plant.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 260,
        "y": 460,
        "wires": [
            [
                "fd047fcb5b5625eb"
            ]
        ]
    },
    {
        "id": "73797c615f98339a",
        "type": "file",
        "z": "fd899b3a7aec433c",
        "name": "",
        "filename": "/home/plant.json",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 580,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "af55737a502115a3",
        "type": "inject",
        "z": "fd899b3a7aec433c",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 160,
        "wires": [
            [
                "7e914fb709c7cf2c"
            ]
        ]
    },
    {
        "id": "7e914fb709c7cf2c",
        "type": "template",
        "z": "fd899b3a7aec433c",
        "name": "plant json template",
        "field": "payload",
        "fieldType": "msg",
        "format": "json",
        "syntax": "mustache",
        "template": "{\n    \"plantname\": \"Technic_solar\",\n    \"blocks\": [\n        {\n            \"blockname\": \"BLOCK_1\",\n            \"blocknums\": \"B01\",\n            \"dev_disc\": [\n                \"INV1_SMB\",\n                \"INVERTER1\"\n            ],\n            \"dev_type\": [\n                \"INV\",\n                \"INV\"\n            ],\n            \"masters\": [\n                \"1\",\n                \"2\"\n            ],\n            \"cloumns\": [\n                {\n                    \"hostname\": \"iGatePV_7712\",\n                    \"hostid\": \"7712\",\n                    \"text\": \"opcua\"\n                }\n            ]\n        },\n        {\n            \"blockname\": \"MCR\",\n            \"blocknums\": \"CR\",\n            \"dev_disc\": [\n                \"METER_ETH_PRGM\",\n                \"INVERTER1\",\n                \"INVERTER1\",\n                \"IO_MODULE_INFO\",\n                \"SLDC\"\n            ],\n            \"dev_type\": [\n                \"EM\",\n                \"INV\",\n                \"INV\",\n                \"IO\",\n                \"SLDC\"\n            ],\n            \"masters\": [\n                \"1\",\n                \"2\",\n                \"3\",\n                \"4\",\n                \"5\"\n            ],\n            \"columns\": [\n                {\n                    \"hostname\": \"iGatePV_7712\",\n                    \"hostid\": \"7712\",\n                    \"text\": \"opcua\"\n                }\n            ]\n        }\n    ]\n}",
        "output": "json",
        "x": 370,
        "y": 160,
        "wires": [
            [
                "73797c615f98339a"
            ]
        ]
    },
    {
        "id": "420c80fde46ed778",
        "type": "function",
        "z": "fd899b3a7aec433c",
        "name": "file_name",
        "func": "\nvar epoch=new Date().getTime();\n\nvar path = \"/home/\";\nmsg.filename = \"7712_\" + epoch + \".csv\";\nmsg.filename = path + \"/\" + msg.filename;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1200,
        "y": 360,
        "wires": [
            [
                "736a5d735e03430b"
            ]
        ]
    },
    {
        "id": "fbdfa3716605a51b",
        "type": "change",
        "z": "fd899b3a7aec433c",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "json",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 590,
        "y": 460,
        "wires": [
            [
                "d04444452d814e13"
            ]
        ]
    },
    {
        "id": "d04444452d814e13",
        "type": "function",
        "z": "fd899b3a7aec433c",
        "name": "combine",
        "func": "context.data = context.data || {};\nswitch (msg.topic) {\n    case \"client\":\n        context.data.client = msg.payload;\n        msg = null;\n        break;\n    case \"json\":\n        context.data.json = msg.payload;\n        msg = null;\n        break;\n    case \"fields\":\n        context.data.fields = msg.payload;\n        msg = null;\n        break;\n}\nif (context.data.client != null && context.data.json != null && context.data.fields != null) {\n    var data_combine = {\n        \"client\": context.data.client,\n        \"json\": context.data.json,\n        \"fields\": context.data.fields\n\n    }\n   context.data = null\n    return { payload : data_combine };\n\n}  \n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 360,
        "wires": [
            [
                "362a8db4e3e541b7",
                "b23f6a4504d3d099"
            ]
        ]
    },
    {
        "id": "362a8db4e3e541b7",
        "type": "function",
        "z": "fd899b3a7aec433c",
        "name": "comparison",
        "func": "var json_len = msg.payload.json.blocks.length\nvar client_len = msg.payload.client.length\nvar fields_len = msg.payload.fields.fields_map.length\n\nvar array = []\n\nfor (var i = 0; i < json_len; i++) {\n    for (var j = 0; j < client_len; j++) {\n        if (msg.payload.json.blocks[i].blockname == msg.payload.client[j].bd) {\n            var dev_disc_len = msg.payload.json.blocks[i].dev_disc.length\n            for (var k = 0; k < dev_disc_len; k++) {\n                if (msg.payload.json.blocks[i].dev_disc[k] == msg.payload.client[j].d) {\n                    var fields_map_match = 0\n                    for (var l = 0; l < fields_len; l++) {\n                        if (msg.payload.client[j].f == msg.payload.fields.fields_map[l].field_disc) {\n                            fields_map_match = 1\n                            var obj = {\n                                time: msg.payload.client[j].time,\n                                b: msg.payload.json.blocks[i].blocknums,\n                                bd: msg.payload.client[j].bd,\n                                d: msg.payload.client[j].d,\n                                dd: msg.payload.client[j].dd || msg.payload.json.blocks[i].dev_disc[k],\n                                dt: msg.payload.client[j].dt || msg.payload.json.blocks[i].dev_type[k],\n                                f: msg.payload.fields.fields_map[l].field_unit[0],\n                                fd: msg.payload.client[j].f,\n                                h: msg.payload.json.blocks[i].cloumns[0].hostname,\n                                iid: msg.payload.json.blocks[i].cloumns[0].hostid,\n                                m: msg.payload.json.blocks[i].masters[k],\n                                p: msg.payload.json.plantname,\n                                qu: 0,\n                                text: msg.payload.json.blocks[i].cloumns[0].text,\n                                u: msg.payload.fields.fields_map[l].field_unit[1],\n                                value: msg.payload.client[j].value\n                            }\n                            array.push(obj)\n                        }\n                    }\n                    if (fields_map_match != 1) {\n                        obj = {\n                            time: msg.payload.client[j].time,\n                            b: msg.payload.json.blocks[i].blocknums,\n                            bd: msg.payload.client[j].bd,\n                            d: msg.payload.client[j].d,\n                            dd: msg.payload.client[j].dd || msg.payload.json.blocks[i].dev_disc[k],\n                            dt: msg.payload.client[j].dt || msg.payload.json.blocks[i].dev_type[k],\n                            f: msg.payload.client[j].f,\n                            fd: msg.payload.client[j].f,\n                            h: msg.payload.json.blocks[i].cloumns[0].hostname,\n                            iid: msg.payload.json.blocks[i].cloumns[0].hostid,\n                            m: msg.payload.json.blocks[i].masters[k],\n                            p: msg.payload.json.plantname,\n                            qu: 0,\n                            text: msg.payload.json.blocks[i].cloumns[0].text,\n                            u: \"null\",\n                            value: msg.payload.client[j].value\n                        }\n                        array.push(obj)\n                    }\n                }\n            }\n        }\n    }\n}\nmsg.payload = array\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 360,
        "wires": [
            [
                "ec3075d83d0cf70e",
                "e67ee30b7a4c7950"
            ]
        ]
    },
    {
        "id": "e6d69594b7e018e1",
        "type": "join",
        "z": "fd899b3a7aec433c",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "3",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1090,
        "y": 260,
        "wires": [
            [
                "d04444452d814e13"
            ]
        ]
    },
    {
        "id": "32447c41246d671e",
        "type": "file",
        "z": "fd899b3a7aec433c",
        "name": "",
        "filename": "/home/fieldmap.json",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1260,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "7feaa913923f8c12",
        "type": "inject",
        "z": "fd899b3a7aec433c",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 800,
        "y": 160,
        "wires": [
            [
                "87813e5bf35d4561"
            ]
        ]
    },
    {
        "id": "87813e5bf35d4561",
        "type": "template",
        "z": "fd899b3a7aec433c",
        "name": "fieldmap json template",
        "field": "payload",
        "fieldType": "msg",
        "format": "json",
        "syntax": "mustache",
        "template": "{\n    \"fields_map\": [\n        {\n            \"field_disc\": \"DC_POWER\",\n            \"field_unit\": [\n                \"PDC\",\n                \"kWh\"\n            ]\n        },\n        {\n            \"field_disc\": \"DC_CURRENT\",\n            \"field_unit\": [\n                \"IDC\",\n                \"A\"\n            ]\n        },\n        {\n            \"field_disc\": \"DC_VOLTAGE\",\n            \"field_unit\": [\n                \"UDC\",\n                \"V\"\n            ]\n        }\n    ]\n}",
        "output": "json",
        "x": 1020,
        "y": 160,
        "wires": [
            [
                "32447c41246d671e"
            ]
        ]
    },
    {
        "id": "74dbf8bc7da870c2",
        "type": "file in",
        "z": "fd899b3a7aec433c",
        "name": "read json",
        "filename": "/home/fieldmap.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 260,
        "y": 360,
        "wires": [
            [
                "1a975a950cf8b2d6"
            ]
        ]
    },
    {
        "id": "1a975a950cf8b2d6",
        "type": "json",
        "z": "fd899b3a7aec433c",
        "name": "fields.json file",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 420,
        "y": 360,
        "wires": [
            [
                "2600b802bfd13de4"
            ]
        ]
    },
    {
        "id": "2600b802bfd13de4",
        "type": "change",
        "z": "fd899b3a7aec433c",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "fields",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 590,
        "y": 360,
        "wires": [
            [
                "d04444452d814e13"
            ]
        ]
    },
    {
        "id": "e67ee30b7a4c7950",
        "type": "debug",
        "z": "fd899b3a7aec433c",
        "name": "debug 50",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 820,
        "y": 520,
        "wires": []
    },
    {
        "id": "b23f6a4504d3d099",
        "type": "debug",
        "z": "fd899b3a7aec433c",
        "name": "debug 51",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 800,
        "y": 400,
        "wires": []
    },
    {
        "id": "f91a0536d7e4c93e",
        "type": "csv",
        "z": "f82141e0c7b6fb28",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "one",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 450,
        "y": 460,
        "wires": [
            [
                "731842c61983fd84",
                "deddd73ec7324d0c"
            ]
        ]
    },
    {
        "id": "102d59df81e68576",
        "type": "file in",
        "z": "f82141e0c7b6fb28",
        "name": "config file read",
        "filename": "/opt/config.csv",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 300,
        "y": 460,
        "wires": [
            [
                "f91a0536d7e4c93e"
            ]
        ]
    },
    {
        "id": "1f87a43b11605040",
        "type": "file",
        "z": "f82141e0c7b6fb28",
        "name": "config file write",
        "filename": "/opt/config.csv",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 980,
        "y": 300,
        "wires": [
            [
                "b08be494a6cd34a6"
            ]
        ]
    },
    {
        "id": "de29f148c249ccb7",
        "type": "inject",
        "z": "f82141e0c7b6fb28",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 680,
        "y": 300,
        "wires": [
            [
                "e5a181b681b8876b"
            ]
        ]
    },
    {
        "id": "e5a181b681b8876b",
        "type": "template",
        "z": "f82141e0c7b6fb28",
        "name": "config.csv",
        "field": "payload",
        "fieldType": "msg",
        "format": "text",
        "syntax": "mustache",
        "template": "s.no,cus_tag,iplon_tag,bd,dd,dt,fd,h,iid,m,p,qu,text,u,mn\n1,BLOCK_1.INVERTER1.INVERTER4.INV1_1.DC_POWER,B01.INV1.PDC,Block_1,INV1,INV,DC_POWER,server_7712,7712,1,Technic_solar,0,opcua,kW,test_new\n2,BLOCK_1.INVERTER1.INVERTER4.DC_CURRENT,B01.INV1.IDC,Block_1,INV1,INV,DC_CURRENT,server_7712,7712,2,Technic_solar,0,opcua,A,test_new\n3,BLOCK_1.INVERTER1.DC_VOLTAGE,B01.INV1.UDC,Block_1,INV1,INV,DC_VOLTAGE,server_7712,7712,3,Technic_solar,0,opcua,V,test_new\n4,BLOCK_1.INVERTER1.INVERTER4.INV1_1.DC_POWER,B01.INV1.PDC,Block_1,INV2,INV,DC_POWER,server_7712,7712,4,Technic_solar,0,opcua,kW,test_new\n5,BLOCK_1.INVERTER1.INVERTER4.DC_CURRENT,B01.INV1.IDC,Block_1,INV2,INV,DC_CURRENT,server_7712,7712,5,Technic_solar,0,opcua,A,test_new\n6,BLOCK_1.INVERTER1.DC_VOLTAGE,B01.INV1.UDC,Block_1,INV2,INV,DC_VOLTAGE,server_7712,7712,6,Technic_solar,0,opcua,V,test_new\n7,BLOCK_1.INVERTER1.INVERTER4.INV1_1.DC_POWER,B01.INV1.PDC,Block_1,INV3,INV,DC_POWER,server_7712,7712,7,Technic_solar,0,opcua,kW,test_new\n8,BLOCK_1.INVERTER1.INVERTER4.DC_CURRENT,B01.INV1.IDC,Block_1,INV3,INV,DC_CURRENT,server_7712,7712,8,Technic_solar,0,opcua,A,test_new\n9,BLOCK_1.INVERTER1.DC_VOLTAGE,B01.INV1.UDC,Block_1,INV3,INV,DC_VOLTAGE,server_7712,7712,9,Technic_solar,0,opcua,V,test_new\n10,BLOCK_1.INVERTER1.INVERTER4.INV1_1.DC_POWER,B01.INV1.PDC,Block_1,INV4,INV,DC_POWER,server_7712,7712,10,Technic_solar,0,opcua,kW,test_new\n11,BLOCK_1.INVERTER1.INVERTER4.DC_CURRENT,B01.INV1.IDC,Block_1,INV4,INV,DC_CURRENT,server_7712,7712,11,Technic_solar,0,opcua,A,test_new\n12,BLOCK_1.INVERTER1.DC_VOLTAGE,B01.INV1.UDC,Block_1,INV4,INV,DC_VOLTAGE,server_7712,7712,12,Technic_solar,0,opcua,V,test_new",
        "output": "str",
        "x": 820,
        "y": 300,
        "wires": [
            [
                "1f87a43b11605040"
            ]
        ]
    },
    {
        "id": "b08be494a6cd34a6",
        "type": "debug",
        "z": "f82141e0c7b6fb28",
        "name": "debug 11",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1140,
        "y": 300,
        "wires": []
    },
    {
        "id": "731842c61983fd84",
        "type": "function",
        "z": "f82141e0c7b6fb28",
        "name": "node_id",
        "func": "var obj = {};\nlet text = \"ns=2;s=\";\n\nobj.payload = {\n    id: text.concat(msg.payload.cus_tag)\n    }\n\nnode.send(obj)\n\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 380,
        "wires": [
            [
                "a2ca40bcaf54f4d4"
            ]
        ]
    },
    {
        "id": "a2ca40bcaf54f4d4",
        "type": "change",
        "z": "f82141e0c7b6fb28",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "payload.id",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 750,
        "y": 380,
        "wires": [
            [
                "d1bf0969a6049c8d"
            ]
        ]
    },
    {
        "id": "d1bf0969a6049c8d",
        "type": "OpcUa-Client",
        "z": "f82141e0c7b6fb28",
        "endpoint": "3062a34b40c5b07a",
        "action": "read",
        "deadbandtype": "a",
        "deadbandvalue": 1,
        "time": 10,
        "timeUnit": "s",
        "certificate": "n",
        "localfile": "",
        "localkeyfile": "",
        "securitymode": "None",
        "securitypolicy": "None",
        "folderName4PKI": "",
        "name": "",
        "x": 920,
        "y": 380,
        "wires": [
            [
                "b242509930045c32"
            ]
        ]
    },
    {
        "id": "deddd73ec7324d0c",
        "type": "function",
        "z": "f82141e0c7b6fb28",
        "name": "fields",
        "func": "var obj = {};\n\nobj.payload = {\n    cus_tag: msg.payload.cus_tag,\n    bdf: msg.payload.iplon_tag,\n    bd: msg.payload.bd,\n    dd: msg.payload.dd,\n    dt: msg.payload.dt,\n    fd: msg.payload.fd,\n    h: msg.payload.h,\n    iid: msg.payload.iid,\n    m: msg.payload.m,\n    p: msg.payload.p,\n    qu: msg.payload.qu,\n    text: msg.payload.text,\n    u: msg.payload.u,\n    mn: msg.payload.mn\n    }\n\nnode.send(obj)\n\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 460,
        "wires": [
            [
                "ead82ce9dc086a09"
            ]
        ]
    },
    {
        "id": "ead82ce9dc086a09",
        "type": "change",
        "z": "f82141e0c7b6fb28",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "fields",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 710,
        "y": 460,
        "wires": [
            [
                "e34a665f7e0cbeef"
            ]
        ]
    },
    {
        "id": "b242509930045c32",
        "type": "function",
        "z": "f82141e0c7b6fb28",
        "name": "obj_file",
        "func": "if (msg.sourceTimestamp == msg.serverTimestamp) {\n    var text = new Date(msg.sourceTimestamp);\n}else if (msg.sourceTimestamp != msg.serverTimestamp) {\n    var text = new Date(msg.serverTimestamp);\n}   \nvar dateUTC = new Date(text).toISOString();\n\nif (msg.payload == null) {\n    (msg.payload = \"null\") && (dateUTC = 0)\n}\nvar tag = msg.topic.split(\"ns=2;s=\");\nvar obj = {\n    time: dateUTC,\n    value: msg.payload,\n    tag: tag[1]\n}\n\nmsg.payload = obj\nmsg.topic=\"client\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1080,
        "y": 380,
        "wires": [
            [
                "9b964fb2b1a9e65f"
            ]
        ]
    },
    {
        "id": "d645a12d22de56ce",
        "type": "catch",
        "z": "f82141e0c7b6fb28",
        "name": "",
        "scope": [
            "f6a9b354c75dd762"
        ],
        "uncaught": false,
        "x": 750,
        "y": 220,
        "wires": [
            [
                "6536ced7af8bc7b9"
            ]
        ]
    },
    {
        "id": "6536ced7af8bc7b9",
        "type": "debug",
        "z": "f82141e0c7b6fb28",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1030,
        "y": 220,
        "wires": []
    },
    {
        "id": "8323be135c155b42",
        "type": "cronplus",
        "z": "f82141e0c7b6fb28",
        "name": "schedular",
        "outputField": "payload",
        "timeZone": "",
        "persistDynamic": false,
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "topic1",
                "payloadType": "default",
                "payload": "",
                "expressionType": "cron",
                "expression": "01 */1 * * * * * ",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 140,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "b229d1e2264cfe66",
        "type": "inject",
        "z": "f82141e0c7b6fb28",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 460,
        "wires": [
            [
                "102d59df81e68576"
            ]
        ]
    },
    {
        "id": "60e8f859ea9bc87f",
        "type": "function",
        "z": "f82141e0c7b6fb28",
        "name": "combine",
        "func": "context.data = context.data || {};\nswitch (msg.topic) {\n    case \"client\":\n        context.data.client = msg.payload;\n        msg = null;\n        break;\n    case \"fields\":\n        context.data.fields = msg.payload;\n        msg = null;\n        break;\n}\nif (context.data.client != null && context.data.fields != null) {\n    var data_combine = {\n        \"client\": context.data.client,\n        \"fields\": context.data.fields\n\n    }\n    context.data = null\n    return { payload: data_combine };\n}  \n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 460,
        "wires": [
            [
                "42891d3ada8c4bb2"
            ]
        ]
    },
    {
        "id": "8023b4c31b8c77ef",
        "type": "debug",
        "z": "f82141e0c7b6fb28",
        "name": "debug 15",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1540,
        "y": 460,
        "wires": []
    },
    {
        "id": "9b964fb2b1a9e65f",
        "type": "join",
        "z": "f82141e0c7b6fb28",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "12",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1210,
        "y": 380,
        "wires": [
            [
                "60e8f859ea9bc87f"
            ]
        ]
    },
    {
        "id": "e34a665f7e0cbeef",
        "type": "join",
        "z": "f82141e0c7b6fb28",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "12",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 850,
        "y": 460,
        "wires": [
            [
                "60e8f859ea9bc87f"
            ]
        ]
    },
    {
        "id": "42891d3ada8c4bb2",
        "type": "function",
        "z": "f82141e0c7b6fb28",
        "name": "function 3",
        "func": "var epoch = new Date().getTime();\nvar path = \"/mnt/opcua_csv_files\";\n\nvar client_len = msg.payload.client.length\nvar fields_len = msg.payload.fields.length\n\nlet text = \"SN:\";\nvar infos_array = []\nvar fields_array = []\nvar values_array = []\n\nvar old_device_name = \"now\"\nvar new_device_name = \"now1\"\nvar file_start = 0\n\nfor (var i = 0; i < client_len; i++) {\n    for (var j = i + 1; j < fields_len; j++) {\n        old_device_name = msg.payload.fields[i].dd\n        if (old_device_name != new_device_name && file_start == 1) {            \n            var msg1 = {infos_array};\n            var msg2 = {fields_array};\n            var msg3 = {values_array };\n            node.send([[msg1, msg2, msg3]]);\n\n            var infos_array = []\n            var fields_array = []\n            var values_array = []                      \n\n            file_start = 1\n            new_device_name = msg.payload.fields[j].dd\n            var iGate_id = msg.payload.fields[i].iid\n            var filename = iGate_id + \"_\" + old_device_name + \"_\" + epoch + \".csv.unsent\";\n            var filenameandpath = path + \"/\" + filename;\n            infos_array.push(msg.payload.fields[i].iid)\n            infos_array.push(text.concat(msg.payload.fields[i].dd))\n            infos_array.push(msg.payload.fields[i].dt)\n            infos_array.push(\"0.0.0.0\")\n            infos_array.push(msg.payload.fields[i].m)\n            fields_array.push(\"TS\")\n            values_array.push(msg.payload.client[i].time)\n        }\n\n        if (old_device_name != new_device_name && file_start == 0) {\n            file_start = 1\n            new_device_name = msg.payload.fields[j].dd\n            var iGate_id = msg.payload.fields[i].iid\n            var filename = iGate_id + \"_\" + old_device_name + \"_\" + epoch + \".csv.unsent\";\n            var filenameandpath = path + \"/\" + filename;\n            infos_array.push(msg.payload.fields[i].iid)\n            infos_array.push(text.concat(msg.payload.fields[i].dd))\n            infos_array.push(msg.payload.fields[i].dt)\n            infos_array.push(\"0.0.0.0\")\n            infos_array.push(msg.payload.fields[i].m)\n            fields_array.push(\"TS\")\n            values_array.push(msg.payload.client[i].time)\n        }\n\n        if (old_device_name == new_device_name && file_start == 1) {\n            file_start = 2\n            var arrstr = msg.payload.fields[i].bdf.split(\".\", 5);\n            fields_array.push(arrstr[2])\n        }\n        if (old_device_name == new_device_name && file_start == 2) {\n            file_start = 1\n            values_array.push(msg.payload.client[i].value)\n            i = j\n        }\n    }\n}\n//msg.payload = {infos_array, fields_array, values_array}\n//return msg;\nreturn null;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1120,
        "y": 460,
        "wires": [
            [
                "8023b4c31b8c77ef"
            ]
        ]
    },
    {
        "id": "5488c065dbbcc744",
        "type": "csv",
        "z": "f82141e0c7b6fb28",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "one",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": false,
        "include_null_values": false,
        "x": 1270,
        "y": 580,
        "wires": [
            [
                "82e0e74dcff78d33"
            ]
        ]
    },
    {
        "id": "82e0e74dcff78d33",
        "type": "function",
        "z": "f82141e0c7b6fb28",
        "name": "file_name",
        "func": "var epoch = new Date().getTime();\n\nvar path = \"/mnt/opcua_csv_files\";\nmsg.filename = \"4240_\" + epoch + \".csv\";\nmsg.filename = path + \"/\" + msg.filename;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1400,
        "y": 580,
        "wires": [
            [
                "4eecc82bd863fbfc"
            ]
        ]
    },
    {
        "id": "4eecc82bd863fbfc",
        "type": "file",
        "z": "f82141e0c7b6fb28",
        "name": "opcua",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 1530,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "4230fca1f05aebe6",
        "type": "batch",
        "z": "f82141e0c7b6fb28",
        "name": "",
        "mode": "count",
        "count": "9",
        "overlap": "2",
        "interval": 10,
        "allowEmptySequence": false,
        "topics": [],
        "x": 1470,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "055d92ff53f6a113",
        "type": "http in",
        "z": "f151e7656dc1a5cc",
        "name": "",
        "url": "/grafana",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 230,
        "y": 220,
        "wires": [
            [
                "358aef36352d4467"
            ]
        ]
    },
    {
        "id": "c16afcdef4d666f9",
        "type": "change",
        "z": "f151e7656dc1a5cc",
        "name": "Set Headers",
        "rules": [
            {
                "t": "set",
                "p": "headers",
                "pt": "msg",
                "to": "{}",
                "tot": "json"
            },
            {
                "t": "set",
                "p": "headers.content-type",
                "pt": "msg",
                "to": "application/pdf",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 790,
        "y": 220,
        "wires": [
            [
                "430cb3bbd7584442"
            ]
        ]
    },
    {
        "id": "9f0a947e6bf771a7",
        "type": "http response",
        "z": "f151e7656dc1a5cc",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 990,
        "y": 220,
        "wires": []
    },
    {
        "id": "358aef36352d4467",
        "type": "string",
        "z": "f151e7656dc1a5cc",
        "name": "replace",
        "methods": [
            {
                "name": "replaceAll",
                "params": [
                    {
                        "type": "msg",
                        "value": "req.params.name"
                    },
                    {
                        "type": "str",
                        "value": "INV_1"
                    }
                ]
            },
            {
                "name": "replaceAll",
                "params": [
                    {
                        "type": "msg",
                        "value": "req.params.uid"
                    },
                    {
                        "type": "str",
                        "value": "OXeGgYnVk"
                    }
                ]
            }
        ],
        "prop": "req.params.name",
        "propout": "req.params.name",
        "object": "msg",
        "objectout": "msg",
        "x": 420,
        "y": 220,
        "wires": [
            [
                "dc286df14844904f"
            ]
        ]
    },
    {
        "id": "dc286df14844904f",
        "type": "function",
        "z": "f151e7656dc1a5cc",
        "name": "exportToPDF",
        "func": "// @ts-nocheck\n\n// const puppeteer = require('puppeteer');\nconst puppeteer = global.get(\"puppeteer\");\n// const odbc = global.get(\"odbc\");\n\n// URL to load should be passed as first parameter\nconst url = 'http://zabbix.xxx.md:3000/d/' + msg.req.params.uid + '/' + msg.req.params.name +'?orgId=1&kiosk';\n// Username and password (with colon separator) should be second parameter\n\nconst auth_string = '<username>:<password>';\n// Output file name should be third parameter\nconst outfile = '' + msg.req.params.uid+'.pdf';\n\n\n// TODO: Output an error message if number of arguments is not right or arguments are invalid\n\n// Set the browser width in pixels. The paper size will be calculated on the basus of 96dpi,\n// so 1200 corresponds to 12.5\".\nconst width_px = 1200;\n// Note that to get an actual paper size, e.g. Letter, you will want to *not* simply set the pixel\n// size here, since that would lead to a \"mobile-sized\" screen (816px), and mess up the rendering.\n// Instead, set e.g. double the size here (1632px), and call page.pdf() with format: 'Letter' and\n// scale = 0.5.\n\n// Generate authorization header for basic auth\n// @ts-ignore\nconst auth_header = 'Basic ' + new Buffer.from(auth_string).toString('base64');\n\n\n    const browser = await puppeteer.launch();\n    const page = await browser.newPage();\n\n    // Set basic auth headers\n    await page.setExtraHTTPHeaders({ 'Authorization': auth_header });\n\n    // Increase timeout from the default of 30 seconds to 120 seconds, to allow for slow-loading panels\n    await page.setDefaultNavigationTimeout(120000);\n\n    // Increasing the deviceScaleFactor gets a higher-resolution image. The width should be set to\n    // the same value as in page.pdf() below. The height is not important\n    await page.setViewport({\n        width: width_px,\n        height: 5000,\n        deviceScaleFactor: 2,\n        isMobile: false\n    })\n\n    // Wait until all network connections are closed (and none are opened withing 0.5s).\n    // In some cases it may be appropriate to change this to {waitUntil: 'networkidle2'},\n    // which stops when there are only 2 or fewer connections remaining.\n    await page.goto(url, { waitUntil: 'networkidle0' });\n\n    // Hide all panel description (top-left \"i\") pop-up handles and, all panel resize handles\n    // Annoyingly, it seems you can't concatenate the two object collections into one\n    await page.evaluate(() => {\n        let infoCorners = document.getElementsByClassName('panel-info-corner');\n        for (el of infoCorners) { el.hidden = true; };\n        let resizeHandles = document.getElementsByClassName('react-resizable-handle');\n        for (el of resizeHandles) { el.hidden = true; };\n    });\n\n    // Get the height of the main canvas, and add a margin\n    var height_px = await page.evaluate(() => {\n        return document.getElementsByClassName('react-grid-layout')[0].getBoundingClientRect().bottom;\n    }) + 20;\n    \n    const pdf = await page.pdf({\n        // path: outfile,\n        width: width_px + 'px',\n        height: height_px + 'px',\n        // format: 'A4',\n        // landscape: true,\n        //    format: 'Letter', <-- see note above for generating \"paper-sized\" outputs\n        scale: 1,\n        displayHeaderFooter: false,\n        margin: {\n            top: 0,\n            right: 0,\n            bottom: 0,\n            left: 0,\n        },\n    });\n   \n    await browser.close();\n\nmsg.payload = pdf;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 220,
        "wires": [
            [
                "c16afcdef4d666f9"
            ]
        ]
    },
    {
        "id": "e28399efb879b708",
        "type": "function",
        "z": "f151e7656dc1a5cc",
        "name": "exportToPDF",
        "func": "// @ts-nocheck\n\n// const puppeteer = require('puppeteer');\nconst puppeteer = global.get(\"puppeteer\");\n// const odbc = global.get(\"odbc\");\n\n// URL to load should be passed as first parameter\nconst url = 'http://localhost:3000/d/' + msg.req.params.uid + '/' + msg.req.params.name +'?orgId=2';\n// Username and password (with colon separator) should be second parameter\n\nconst auth_string = 'admin:admin';\n// Output file name should be third parameter\nconst outfile = '' + msg.req.params.uid+'.pdf';\n\n\n// TODO: Output an error message if number of arguments is not right or arguments are invalid\n\n// Set the browser width in pixels. The paper size will be calculated on the basus of 96dpi,\n// so 1200 corresponds to 12.5\".\nconst width_px = 1200;\n// Note that to get an actual paper size, e.g. Letter, you will want to *not* simply set the pixel\n// size here, since that would lead to a \"mobile-sized\" screen (816px), and mess up the rendering.\n// Instead, set e.g. double the size here (1632px), and call page.pdf() with format: 'Letter' and\n// scale = 0.5.\n\n// Generate authorization header for basic auth\n// @ts-ignore\nconst auth_header = 'Basic ' + new Buffer.from(auth_string).toString('base64');\n\n\n    const browser = await puppeteer.launch();\n    const page = await browser.newPage();\n\n    // Set basic auth headers\n    await page.setExtraHTTPHeaders({ 'Authorization': auth_header });\n\n    // Increase timeout from the default of 30 seconds to 120 seconds, to allow for slow-loading panels\n    await page.setDefaultNavigationTimeout(120000);\n\n    // Increasing the deviceScaleFactor gets a higher-resolution image. The width should be set to\n    // the same value as in page.pdf() below. The height is not important\n    await page.setViewport({\n        width: width_px,\n        height: 5000,\n        deviceScaleFactor: 2,\n        isMobile: false\n    })\n\n    // Wait until all network connections are closed (and none are opened withing 0.5s).\n    // In some cases it may be appropriate to change this to {waitUntil: 'networkidle2'},\n    // which stops when there are only 2 or fewer connections remaining.\n    await page.goto(url, { waitUntil: 'networkidle0' });\n\n    // Hide all panel description (top-left \"i\") pop-up handles and, all panel resize handles\n    // Annoyingly, it seems you can't concatenate the two object collections into one\n    await page.evaluate(() => {\n        let infoCorners = document.getElementsByClassName('panel-info-corner');\n        for (el of infoCorners) { el.hidden = true; };\n        let resizeHandles = document.getElementsByClassName('react-resizable-handle');\n        for (el of resizeHandles) { el.hidden = true; };\n    });\n\n    // Get the height of the main canvas, and add a margin\n    var height_px = await page.evaluate(() => {\n        return document.getElementsByClassName('react-grid-layout')[0].getBoundingClientRect().bottom;\n    }) + 20;\n    \n    const pdf = await page.pdf({\n        // path: outfile,\n        width: width_px + 'px',\n        height: height_px + 'px',\n        // format: 'A4',\n        // landscape: true,\n        //    format: 'Letter', <-- see note above for generating \"paper-sized\" outputs\n        scale: 1,\n        displayHeaderFooter: false,\n        margin: {\n            top: 0,\n            right: 0,\n            bottom: 0,\n            left: 0,\n        },\n    });\n   \n    await browser.close();\n\nmsg.payload = pdf;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 360,
        "wires": [
            [
                "c76e588b9833c8f8"
            ]
        ]
    },
    {
        "id": "9c4c271bbe7fc4bd",
        "type": "http in",
        "z": "f151e7656dc1a5cc",
        "name": "",
        "url": "/grafana/:uid/:name",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 350,
        "y": 360,
        "wires": [
            [
                "64317e02cf8a413f"
            ]
        ]
    },
    {
        "id": "c76e588b9833c8f8",
        "type": "change",
        "z": "f151e7656dc1a5cc",
        "name": "Set Headers",
        "rules": [
            {
                "t": "set",
                "p": "headers",
                "pt": "msg",
                "to": "{}",
                "tot": "json"
            },
            {
                "t": "set",
                "p": "headers.content-type",
                "pt": "msg",
                "to": "application/pdf",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 850,
        "y": 360,
        "wires": [
            [
                "89c26d1f48c88577"
            ]
        ]
    },
    {
        "id": "89c26d1f48c88577",
        "type": "http response",
        "z": "f151e7656dc1a5cc",
        "name": "",
        "x": 990,
        "y": 360,
        "wires": []
    },
    {
        "id": "64317e02cf8a413f",
        "type": "string",
        "z": "f151e7656dc1a5cc",
        "name": "replace",
        "methods": [
            {
                "name": "replaceAll",
                "params": [
                    {
                        "type": "str",
                        "value": ""
                    },
                    {
                        "type": "str",
                        "value": "-"
                    }
                ]
            },
            {
                "name": "toLowerCase",
                "params": []
            }
        ],
        "prop": "req.params.name",
        "propout": "req.params.name",
        "object": "msg",
        "objectout": "msg",
        "x": 540,
        "y": 360,
        "wires": [
            [
                "e28399efb879b708"
            ]
        ]
    },
    {
        "id": "9eba53eaf1212c51",
        "type": "debug",
        "z": "f151e7656dc1a5cc",
        "name": "debug 52",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1160,
        "y": 380,
        "wires": []
    },
    {
        "id": "430cb3bbd7584442",
        "type": "debug",
        "z": "f151e7656dc1a5cc",
        "name": "debug 53",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 960,
        "y": 120,
        "wires": []
    },
    {
        "id": "66dde00e5c8ef484",
        "type": "exec",
        "z": "3bdf067d13d3638c",
        "command": "service ssh stop && service ssh status",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 470,
        "y": 100,
        "wires": [
            [
                "dd83d5a77dc9c43c"
            ],
            [],
            []
        ]
    },
    {
        "id": "7d1a0798eb268a40",
        "type": "ui_led",
        "z": "3bdf067d13d3638c",
        "order": 2,
        "group": "7f71acda637c7228",
        "width": "2",
        "height": 1,
        "label": "",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "colorForValue": [
            {
                "color": "#ff0000",
                "value": "false",
                "valueType": "bool"
            },
            {
                "color": "#008000",
                "value": "true",
                "valueType": "bool"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "circle",
        "showGlow": true,
        "name": "",
        "x": 1150,
        "y": 100,
        "wires": []
    },
    {
        "id": "6935fd844b6c3f64",
        "type": "ui_button",
        "z": "3bdf067d13d3638c",
        "name": "",
        "group": "7f71acda637c7228",
        "order": 1,
        "width": 6,
        "height": 1,
        "passthru": false,
        "label": "SSH Status",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "true",
        "payloadType": "bool",
        "topic": "payload",
        "topicType": "msg",
        "x": 170,
        "y": 100,
        "wires": [
            [
                "66dde00e5c8ef484"
            ]
        ]
    },
    {
        "id": "dd83d5a77dc9c43c",
        "type": "switch",
        "z": "3bdf067d13d3638c",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "active (running)",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "inactive",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 750,
        "y": 100,
        "wires": [
            [
                "0bbe4ec606c2235b"
            ],
            [
                "3dbd4ad3f4c22460"
            ]
        ]
    },
    {
        "id": "0bbe4ec606c2235b",
        "type": "change",
        "z": "3bdf067d13d3638c",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 940,
        "y": 80,
        "wires": [
            [
                "7d1a0798eb268a40"
            ]
        ]
    },
    {
        "id": "3dbd4ad3f4c22460",
        "type": "change",
        "z": "3bdf067d13d3638c",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 940,
        "y": 120,
        "wires": [
            [
                "7d1a0798eb268a40"
            ]
        ]
    },
    {
        "id": "dd51ac3fb2f71cf1",
        "type": "exec",
        "z": "3bdf067d13d3638c",
        "command": "service influxdb status",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 420,
        "y": 220,
        "wires": [
            [
                "ea4adeecda91ef42"
            ],
            [],
            []
        ]
    },
    {
        "id": "dbcd044c52ba49e0",
        "type": "ui_button",
        "z": "3bdf067d13d3638c",
        "name": "",
        "group": "7f71acda637c7228",
        "order": 3,
        "width": 6,
        "height": 1,
        "passthru": false,
        "label": "influxdb status",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "true",
        "payloadType": "bool",
        "topic": "payload",
        "topicType": "msg",
        "x": 180,
        "y": 220,
        "wires": [
            [
                "dd51ac3fb2f71cf1"
            ]
        ]
    },
    {
        "id": "cfe794b8621bd1c5",
        "type": "ui_led",
        "z": "3bdf067d13d3638c",
        "order": 4,
        "group": "7f71acda637c7228",
        "width": 2,
        "height": 1,
        "label": "",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "colorForValue": [
            {
                "color": "#ff0000",
                "value": "false",
                "valueType": "bool"
            },
            {
                "color": "#008000",
                "value": "true",
                "valueType": "bool"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "circle",
        "showGlow": true,
        "name": "",
        "x": 1150,
        "y": 220,
        "wires": []
    },
    {
        "id": "ea4adeecda91ef42",
        "type": "switch",
        "z": "3bdf067d13d3638c",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "active (running)",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "inactive",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 770,
        "y": 220,
        "wires": [
            [
                "54e7b724a299639d"
            ],
            [
                "d0fddc06cd57fec9"
            ]
        ]
    },
    {
        "id": "54e7b724a299639d",
        "type": "change",
        "z": "3bdf067d13d3638c",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 940,
        "y": 200,
        "wires": [
            [
                "cfe794b8621bd1c5"
            ]
        ]
    },
    {
        "id": "d0fddc06cd57fec9",
        "type": "change",
        "z": "3bdf067d13d3638c",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 940,
        "y": 240,
        "wires": [
            [
                "cfe794b8621bd1c5"
            ]
        ]
    },
    {
        "id": "eb7351210f15f081",
        "type": "exec",
        "z": "3bdf067d13d3638c",
        "command": "service mysql status",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 420,
        "y": 320,
        "wires": [
            [
                "3f150cdc223947ef"
            ],
            [],
            []
        ]
    },
    {
        "id": "8d1a3441e3b69b6b",
        "type": "ui_button",
        "z": "3bdf067d13d3638c",
        "name": "",
        "group": "7f71acda637c7228",
        "order": 5,
        "width": 6,
        "height": 1,
        "passthru": false,
        "label": "mysql",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "true",
        "payloadType": "bool",
        "topic": "payload",
        "topicType": "msg",
        "x": 150,
        "y": 320,
        "wires": [
            [
                "eb7351210f15f081"
            ]
        ]
    },
    {
        "id": "3f68deffc9afb298",
        "type": "ui_led",
        "z": "3bdf067d13d3638c",
        "order": 6,
        "group": "7f71acda637c7228",
        "width": 2,
        "height": 1,
        "label": "",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "colorForValue": [
            {
                "color": "#ff0000",
                "value": "false",
                "valueType": "bool"
            },
            {
                "color": "#008000",
                "value": "true",
                "valueType": "bool"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "circle",
        "showGlow": true,
        "name": "",
        "x": 1150,
        "y": 320,
        "wires": []
    },
    {
        "id": "3f150cdc223947ef",
        "type": "switch",
        "z": "3bdf067d13d3638c",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "active (running)",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "inactive",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 770,
        "y": 320,
        "wires": [
            [
                "3ab0bcd6ccf1a1c7"
            ],
            [
                "a61a62b7f079cd94"
            ]
        ]
    },
    {
        "id": "3ab0bcd6ccf1a1c7",
        "type": "change",
        "z": "3bdf067d13d3638c",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 940,
        "y": 300,
        "wires": [
            [
                "3f68deffc9afb298"
            ]
        ]
    },
    {
        "id": "a61a62b7f079cd94",
        "type": "change",
        "z": "3bdf067d13d3638c",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 940,
        "y": 340,
        "wires": [
            [
                "3f68deffc9afb298"
            ]
        ]
    },
    {
        "id": "f5459062f615381a",
        "type": "exec",
        "z": "3bdf067d13d3638c",
        "command": "service readDDT status",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 430,
        "y": 420,
        "wires": [
            [
                "79d2e17445adc038"
            ],
            [],
            []
        ]
    },
    {
        "id": "437ec5e71cac0e2e",
        "type": "ui_button",
        "z": "3bdf067d13d3638c",
        "name": "",
        "group": "7f71acda637c7228",
        "order": 7,
        "width": 6,
        "height": 1,
        "passthru": false,
        "label": "readDDT",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "true",
        "payloadType": "bool",
        "topic": "payload",
        "topicType": "msg",
        "x": 160,
        "y": 420,
        "wires": [
            [
                "f5459062f615381a"
            ]
        ]
    },
    {
        "id": "bda53572a31b2234",
        "type": "ui_led",
        "z": "3bdf067d13d3638c",
        "order": 8,
        "group": "7f71acda637c7228",
        "width": 2,
        "height": 1,
        "label": "",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "colorForValue": [
            {
                "color": "#ff0000",
                "value": "false",
                "valueType": "bool"
            },
            {
                "color": "#008000",
                "value": "true",
                "valueType": "bool"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "circle",
        "showGlow": true,
        "name": "",
        "x": 1150,
        "y": 420,
        "wires": []
    },
    {
        "id": "79d2e17445adc038",
        "type": "switch",
        "z": "3bdf067d13d3638c",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "active (running)",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "inactive",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 770,
        "y": 420,
        "wires": [
            [
                "3aead4f59b8df697"
            ],
            [
                "732f01d24778aab1"
            ]
        ]
    },
    {
        "id": "3aead4f59b8df697",
        "type": "change",
        "z": "3bdf067d13d3638c",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 940,
        "y": 400,
        "wires": [
            [
                "bda53572a31b2234"
            ]
        ]
    },
    {
        "id": "732f01d24778aab1",
        "type": "change",
        "z": "3bdf067d13d3638c",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 940,
        "y": 440,
        "wires": [
            [
                "bda53572a31b2234"
            ]
        ]
    },
    {
        "id": "079fde919c01a312",
        "type": "exec",
        "z": "3bdf067d13d3638c",
        "command": "service readDDTfast status",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 440,
        "y": 520,
        "wires": [
            [
                "f14d36bbde8c8c69"
            ],
            [],
            []
        ]
    },
    {
        "id": "dff5cbc2a7e32fc3",
        "type": "ui_button",
        "z": "3bdf067d13d3638c",
        "name": "",
        "group": "7f71acda637c7228",
        "order": 9,
        "width": 6,
        "height": 1,
        "passthru": false,
        "label": "readDDTfast",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "true",
        "payloadType": "bool",
        "topic": "payload",
        "topicType": "msg",
        "x": 170,
        "y": 520,
        "wires": [
            [
                "079fde919c01a312"
            ]
        ]
    },
    {
        "id": "c5075ebf9728cec9",
        "type": "ui_led",
        "z": "3bdf067d13d3638c",
        "order": 10,
        "group": "7f71acda637c7228",
        "width": 2,
        "height": 1,
        "label": "",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "colorForValue": [
            {
                "color": "#ff0000",
                "value": "false",
                "valueType": "bool"
            },
            {
                "color": "#008000",
                "value": "true",
                "valueType": "bool"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "circle",
        "showGlow": true,
        "name": "",
        "x": 1150,
        "y": 520,
        "wires": []
    },
    {
        "id": "f14d36bbde8c8c69",
        "type": "switch",
        "z": "3bdf067d13d3638c",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "active (running)",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "inactive",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 770,
        "y": 520,
        "wires": [
            [
                "01a62b52a592be5a"
            ],
            [
                "ac788df4b84574ca"
            ]
        ]
    },
    {
        "id": "01a62b52a592be5a",
        "type": "change",
        "z": "3bdf067d13d3638c",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 940,
        "y": 500,
        "wires": [
            [
                "c5075ebf9728cec9"
            ]
        ]
    },
    {
        "id": "ac788df4b84574ca",
        "type": "change",
        "z": "3bdf067d13d3638c",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 940,
        "y": 540,
        "wires": [
            [
                "c5075ebf9728cec9"
            ]
        ]
    },
    {
        "id": "ea114d289b9cf13a",
        "type": "exec",
        "z": "3bdf067d13d3638c",
        "command": "service scaback status",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 420,
        "y": 620,
        "wires": [
            [
                "ad474f9185c5c71b"
            ],
            [],
            []
        ]
    },
    {
        "id": "66a234d132cd5705",
        "type": "ui_button",
        "z": "3bdf067d13d3638c",
        "name": "",
        "group": "7f71acda637c7228",
        "order": 11,
        "width": 6,
        "height": 1,
        "passthru": false,
        "label": "scaback",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "true",
        "payloadType": "bool",
        "topic": "payload",
        "topicType": "msg",
        "x": 160,
        "y": 620,
        "wires": [
            [
                "ea114d289b9cf13a"
            ]
        ]
    },
    {
        "id": "3f82733ee0bf4f33",
        "type": "ui_led",
        "z": "3bdf067d13d3638c",
        "order": 12,
        "group": "7f71acda637c7228",
        "width": 2,
        "height": 1,
        "label": "",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "colorForValue": [
            {
                "color": "#ff0000",
                "value": "false",
                "valueType": "bool"
            },
            {
                "color": "#008000",
                "value": "true",
                "valueType": "bool"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "circle",
        "showGlow": true,
        "name": "",
        "x": 1150,
        "y": 620,
        "wires": []
    },
    {
        "id": "ad474f9185c5c71b",
        "type": "switch",
        "z": "3bdf067d13d3638c",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "active (running)",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "inactive",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 770,
        "y": 620,
        "wires": [
            [
                "34982ab958ab1a1e"
            ],
            [
                "059a36d6e16a7a5a"
            ]
        ]
    },
    {
        "id": "34982ab958ab1a1e",
        "type": "change",
        "z": "3bdf067d13d3638c",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 940,
        "y": 600,
        "wires": [
            [
                "3f82733ee0bf4f33"
            ]
        ]
    },
    {
        "id": "059a36d6e16a7a5a",
        "type": "change",
        "z": "3bdf067d13d3638c",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 940,
        "y": 640,
        "wires": [
            [
                "3f82733ee0bf4f33"
            ]
        ]
    },
    {
        "id": "f90c54d7ee0863fd",
        "type": "exec",
        "z": "3bdf067d13d3638c",
        "command": "service grafana-server status",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 440,
        "y": 720,
        "wires": [
            [
                "f38d2f845f2bb4e3"
            ],
            [],
            []
        ]
    },
    {
        "id": "07594b9b60560822",
        "type": "ui_button",
        "z": "3bdf067d13d3638c",
        "name": "",
        "group": "7f71acda637c7228",
        "order": 13,
        "width": 6,
        "height": 1,
        "passthru": false,
        "label": "grafana",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "true",
        "payloadType": "bool",
        "topic": "payload",
        "topicType": "msg",
        "x": 160,
        "y": 720,
        "wires": [
            [
                "f90c54d7ee0863fd"
            ]
        ]
    },
    {
        "id": "c57ea7f941f90cda",
        "type": "ui_led",
        "z": "3bdf067d13d3638c",
        "order": 14,
        "group": "7f71acda637c7228",
        "width": 2,
        "height": 1,
        "label": "",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "colorForValue": [
            {
                "color": "#ff0000",
                "value": "false",
                "valueType": "bool"
            },
            {
                "color": "#008000",
                "value": "true",
                "valueType": "bool"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "circle",
        "showGlow": true,
        "name": "",
        "x": 1150,
        "y": 720,
        "wires": []
    },
    {
        "id": "f38d2f845f2bb4e3",
        "type": "switch",
        "z": "3bdf067d13d3638c",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "active (running)",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "inactive",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 770,
        "y": 720,
        "wires": [
            [
                "290a41b39fcbf555"
            ],
            [
                "7a0dbef51814430f"
            ]
        ]
    },
    {
        "id": "290a41b39fcbf555",
        "type": "change",
        "z": "3bdf067d13d3638c",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 940,
        "y": 700,
        "wires": [
            [
                "c57ea7f941f90cda"
            ]
        ]
    },
    {
        "id": "7a0dbef51814430f",
        "type": "change",
        "z": "3bdf067d13d3638c",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 940,
        "y": 740,
        "wires": [
            [
                "c57ea7f941f90cda"
            ]
        ]
    },
    {
        "id": "ce7c24ae92b8476a",
        "type": "exec",
        "z": "3bdf067d13d3638c",
        "command": "service docker status",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 420,
        "y": 820,
        "wires": [
            [
                "1b6a294a965e532b"
            ],
            [],
            []
        ]
    },
    {
        "id": "065389126e3f9580",
        "type": "ui_button",
        "z": "3bdf067d13d3638c",
        "name": "",
        "group": "7f71acda637c7228",
        "order": 15,
        "width": 6,
        "height": 1,
        "passthru": false,
        "label": "docker",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "true",
        "payloadType": "bool",
        "topic": "payload",
        "topicType": "msg",
        "x": 150,
        "y": 820,
        "wires": [
            [
                "ce7c24ae92b8476a"
            ]
        ]
    },
    {
        "id": "541fb007cc447b42",
        "type": "ui_led",
        "z": "3bdf067d13d3638c",
        "order": 16,
        "group": "7f71acda637c7228",
        "width": 2,
        "height": 1,
        "label": "",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "colorForValue": [
            {
                "color": "#ff0000",
                "value": "false",
                "valueType": "bool"
            },
            {
                "color": "#008000",
                "value": "true",
                "valueType": "bool"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "circle",
        "showGlow": true,
        "name": "",
        "x": 1150,
        "y": 820,
        "wires": []
    },
    {
        "id": "1b6a294a965e532b",
        "type": "switch",
        "z": "3bdf067d13d3638c",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "active (running)",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "inactive",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 770,
        "y": 820,
        "wires": [
            [
                "bd13369c2797ea4f"
            ],
            [
                "74a187fc2b67b266"
            ]
        ]
    },
    {
        "id": "bd13369c2797ea4f",
        "type": "change",
        "z": "3bdf067d13d3638c",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 940,
        "y": 800,
        "wires": [
            [
                "541fb007cc447b42"
            ]
        ]
    },
    {
        "id": "74a187fc2b67b266",
        "type": "change",
        "z": "3bdf067d13d3638c",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 940,
        "y": 840,
        "wires": [
            [
                "541fb007cc447b42"
            ]
        ]
    },
    {
        "id": "c5b5e854ede49d17",
        "type": "exec",
        "z": "3bdf067d13d3638c",
        "command": "service ntp status",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 410,
        "y": 920,
        "wires": [
            [
                "65b3e41b230e0fe7"
            ],
            [],
            []
        ]
    },
    {
        "id": "769a61b680619fe3",
        "type": "ui_button",
        "z": "3bdf067d13d3638c",
        "name": "",
        "group": "7f71acda637c7228",
        "order": 17,
        "width": 6,
        "height": 1,
        "passthru": false,
        "label": "ntp",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "true",
        "payloadType": "bool",
        "topic": "payload",
        "topicType": "msg",
        "x": 150,
        "y": 920,
        "wires": [
            [
                "c5b5e854ede49d17"
            ]
        ]
    },
    {
        "id": "a85bfedf1c9b9fbd",
        "type": "ui_led",
        "z": "3bdf067d13d3638c",
        "order": 18,
        "group": "7f71acda637c7228",
        "width": 2,
        "height": 1,
        "label": "",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "colorForValue": [
            {
                "color": "#ff0000",
                "value": "false",
                "valueType": "bool"
            },
            {
                "color": "#008000",
                "value": "true",
                "valueType": "bool"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "circle",
        "showGlow": true,
        "name": "",
        "x": 1150,
        "y": 920,
        "wires": []
    },
    {
        "id": "65b3e41b230e0fe7",
        "type": "switch",
        "z": "3bdf067d13d3638c",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "active (running)",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "inactive",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 770,
        "y": 920,
        "wires": [
            [
                "b81a63745bf95998"
            ],
            [
                "bccaacc9fc8199ca"
            ]
        ]
    },
    {
        "id": "b81a63745bf95998",
        "type": "change",
        "z": "3bdf067d13d3638c",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 940,
        "y": 900,
        "wires": [
            [
                "a85bfedf1c9b9fbd"
            ]
        ]
    },
    {
        "id": "bccaacc9fc8199ca",
        "type": "change",
        "z": "3bdf067d13d3638c",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 940,
        "y": 940,
        "wires": [
            [
                "a85bfedf1c9b9fbd"
            ]
        ]
    },
    {
        "id": "ba3779825bfae8ca",
        "type": "exec",
        "z": "3bdf067d13d3638c",
        "command": "service apache2 status",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 420,
        "y": 1020,
        "wires": [
            [
                "6ca2e3e30cef646a"
            ],
            [],
            []
        ]
    },
    {
        "id": "4ce6fe05e7b15eef",
        "type": "ui_button",
        "z": "3bdf067d13d3638c",
        "name": "",
        "group": "7f71acda637c7228",
        "order": 19,
        "width": 6,
        "height": 1,
        "passthru": false,
        "label": "apache",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "true",
        "payloadType": "bool",
        "topic": "payload",
        "topicType": "msg",
        "x": 160,
        "y": 1020,
        "wires": [
            [
                "ba3779825bfae8ca"
            ]
        ]
    },
    {
        "id": "7db608475a5352af",
        "type": "ui_led",
        "z": "3bdf067d13d3638c",
        "order": 20,
        "group": "7f71acda637c7228",
        "width": 2,
        "height": 1,
        "label": "",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "colorForValue": [
            {
                "color": "#ff0000",
                "value": "false",
                "valueType": "bool"
            },
            {
                "color": "#008000",
                "value": "true",
                "valueType": "bool"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "circle",
        "showGlow": true,
        "name": "",
        "x": 1150,
        "y": 1020,
        "wires": []
    },
    {
        "id": "6ca2e3e30cef646a",
        "type": "switch",
        "z": "3bdf067d13d3638c",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "active (running)",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "inactive",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 770,
        "y": 1020,
        "wires": [
            [
                "82c9302c02fb5d28"
            ],
            [
                "d3fdd44a32e6e1b3"
            ]
        ]
    },
    {
        "id": "82c9302c02fb5d28",
        "type": "change",
        "z": "3bdf067d13d3638c",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 940,
        "y": 1000,
        "wires": [
            [
                "7db608475a5352af"
            ]
        ]
    },
    {
        "id": "d3fdd44a32e6e1b3",
        "type": "change",
        "z": "3bdf067d13d3638c",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 940,
        "y": 1040,
        "wires": [
            [
                "7db608475a5352af"
            ]
        ]
    },
    {
        "id": "915c5fc1d747a1a9",
        "type": "exec",
        "z": "3bdf067d13d3638c",
        "command": "service iplon-opcua status",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 430,
        "y": 1120,
        "wires": [
            [
                "b842332775e45213"
            ],
            [],
            []
        ]
    },
    {
        "id": "e2754dac5d759d73",
        "type": "ui_button",
        "z": "3bdf067d13d3638c",
        "name": "",
        "group": "7f71acda637c7228",
        "order": 21,
        "width": 6,
        "height": 1,
        "passthru": false,
        "label": "opcua",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "true",
        "payloadType": "bool",
        "topic": "payload",
        "topicType": "msg",
        "x": 150,
        "y": 1120,
        "wires": [
            [
                "915c5fc1d747a1a9"
            ]
        ]
    },
    {
        "id": "9c4397d15ec4260d",
        "type": "ui_led",
        "z": "3bdf067d13d3638c",
        "order": 22,
        "group": "7f71acda637c7228",
        "width": 2,
        "height": 1,
        "label": "",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "colorForValue": [
            {
                "color": "#ff0000",
                "value": "false",
                "valueType": "bool"
            },
            {
                "color": "#008000",
                "value": "true",
                "valueType": "bool"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "circle",
        "showGlow": true,
        "name": "",
        "x": 1150,
        "y": 1120,
        "wires": []
    },
    {
        "id": "b842332775e45213",
        "type": "switch",
        "z": "3bdf067d13d3638c",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "active (running)",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "inactive",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 770,
        "y": 1120,
        "wires": [
            [
                "85fecb7feb1fddc3"
            ],
            [
                "011b7a23569334fe"
            ]
        ]
    },
    {
        "id": "85fecb7feb1fddc3",
        "type": "change",
        "z": "3bdf067d13d3638c",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 940,
        "y": 1100,
        "wires": [
            [
                "9c4397d15ec4260d"
            ]
        ]
    },
    {
        "id": "011b7a23569334fe",
        "type": "change",
        "z": "3bdf067d13d3638c",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 940,
        "y": 1140,
        "wires": [
            [
                "9c4397d15ec4260d"
            ]
        ]
    },
    {
        "id": "02fa41e13d56cbb2",
        "type": "exec",
        "z": "3bdf067d13d3638c",
        "command": "docker exec -i iot6_ubuntu14.04 bash service apache2 status",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "apache",
        "x": 380,
        "y": 1220,
        "wires": [
            [
                "660c94d981b735e4"
            ],
            [],
            []
        ]
    },
    {
        "id": "43a4677cf2152068",
        "type": "ui_button",
        "z": "3bdf067d13d3638c",
        "name": "",
        "group": "7f71acda637c7228",
        "order": 23,
        "width": 6,
        "height": 1,
        "passthru": false,
        "label": "ubuntu docker",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "true",
        "payloadType": "bool",
        "topic": "payload",
        "topicType": "msg",
        "x": 160,
        "y": 1220,
        "wires": [
            [
                "02fa41e13d56cbb2"
            ]
        ]
    },
    {
        "id": "3d350833bb2ef514",
        "type": "ui_led",
        "z": "3bdf067d13d3638c",
        "order": 24,
        "group": "7f71acda637c7228",
        "width": 2,
        "height": 1,
        "label": "",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "colorForValue": [
            {
                "color": "#ff0000",
                "value": "false",
                "valueType": "bool"
            },
            {
                "color": "#008000",
                "value": "true",
                "valueType": "bool"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "circle",
        "showGlow": true,
        "name": "",
        "x": 1150,
        "y": 1220,
        "wires": []
    },
    {
        "id": "660c94d981b735e4",
        "type": "switch",
        "z": "3bdf067d13d3638c",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "active (running)",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "inactive",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 770,
        "y": 1220,
        "wires": [
            [
                "aabc16ec8582cede"
            ],
            [
                "51b2e07b452ef3d4"
            ]
        ]
    },
    {
        "id": "aabc16ec8582cede",
        "type": "change",
        "z": "3bdf067d13d3638c",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 940,
        "y": 1200,
        "wires": [
            [
                "3d350833bb2ef514"
            ]
        ]
    },
    {
        "id": "51b2e07b452ef3d4",
        "type": "change",
        "z": "3bdf067d13d3638c",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 940,
        "y": 1240,
        "wires": [
            [
                "3d350833bb2ef514"
            ]
        ]
    },
    {
        "id": "45528bbeb75403c8",
        "type": "exec",
        "z": "3bdf067d13d3638c",
        "command": "node -v",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 360,
        "y": 1780,
        "wires": [
            [
                "d463691f08781c67"
            ],
            [],
            []
        ]
    },
    {
        "id": "d463691f08781c67",
        "type": "ui_text",
        "z": "3bdf067d13d3638c",
        "group": "a25745f191dc24a3",
        "order": 12,
        "width": 2,
        "height": 1,
        "name": "",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "x": 570,
        "y": 1780,
        "wires": []
    },
    {
        "id": "97bab1d6597234fc",
        "type": "ui_button",
        "z": "3bdf067d13d3638c",
        "name": "",
        "group": "a25745f191dc24a3",
        "order": 11,
        "width": 3,
        "height": 1,
        "passthru": true,
        "label": "node version",
        "tooltip": "",
        "color": "",
        "bgcolor": "green",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 190,
        "y": 1780,
        "wires": [
            [
                "45528bbeb75403c8"
            ]
        ]
    },
    {
        "id": "9311e21b730392da",
        "type": "exec",
        "z": "3bdf067d13d3638c",
        "command": "lsb_release -a",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 380,
        "y": 1380,
        "wires": [
            [
                "ba10e2996a3e0cf5"
            ],
            [],
            []
        ]
    },
    {
        "id": "ba10e2996a3e0cf5",
        "type": "ui_text",
        "z": "3bdf067d13d3638c",
        "group": "a25745f191dc24a3",
        "order": 2,
        "width": 2,
        "height": 1,
        "name": "",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "x": 570,
        "y": 1380,
        "wires": []
    },
    {
        "id": "8ac269253e39f5ce",
        "type": "ui_button",
        "z": "3bdf067d13d3638c",
        "name": "",
        "group": "a25745f191dc24a3",
        "order": 1,
        "width": 3,
        "height": 1,
        "passthru": true,
        "label": "os",
        "tooltip": "",
        "color": "",
        "bgcolor": "green",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 170,
        "y": 1380,
        "wires": [
            [
                "9311e21b730392da"
            ]
        ]
    },
    {
        "id": "a7af017d439b30d6",
        "type": "exec",
        "z": "3bdf067d13d3638c",
        "command": "ip addr | grep eno1",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 390,
        "y": 1460,
        "wires": [
            [
                "e0ce1235b8a314b2"
            ],
            [],
            []
        ]
    },
    {
        "id": "e0ce1235b8a314b2",
        "type": "ui_text",
        "z": "3bdf067d13d3638c",
        "group": "a25745f191dc24a3",
        "order": 4,
        "width": 2,
        "height": 1,
        "name": "",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "x": 570,
        "y": 1460,
        "wires": []
    },
    {
        "id": "5a7df573b07f3d64",
        "type": "ui_button",
        "z": "3bdf067d13d3638c",
        "name": "",
        "group": "a25745f191dc24a3",
        "order": 3,
        "width": 3,
        "height": 1,
        "passthru": true,
        "label": "ip address",
        "tooltip": "",
        "color": "",
        "bgcolor": "green",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 190,
        "y": 1460,
        "wires": [
            [
                "a7af017d439b30d6"
            ]
        ]
    },
    {
        "id": "3198474bc8b88bea",
        "type": "exec",
        "z": "3bdf067d13d3638c",
        "command": "python3 --version",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 390,
        "y": 1540,
        "wires": [
            [
                "ceefaeed6149d03b"
            ],
            [],
            []
        ]
    },
    {
        "id": "ceefaeed6149d03b",
        "type": "ui_text",
        "z": "3bdf067d13d3638c",
        "group": "a25745f191dc24a3",
        "order": 6,
        "width": 2,
        "height": 1,
        "name": "",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "x": 570,
        "y": 1540,
        "wires": []
    },
    {
        "id": "71fcf2623820dd09",
        "type": "ui_button",
        "z": "3bdf067d13d3638c",
        "name": "",
        "group": "a25745f191dc24a3",
        "order": 5,
        "width": 3,
        "height": 1,
        "passthru": true,
        "label": "python version",
        "tooltip": "",
        "color": "",
        "bgcolor": "green",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 200,
        "y": 1540,
        "wires": [
            [
                "3198474bc8b88bea"
            ]
        ]
    },
    {
        "id": "68121a7e72576db3",
        "type": "exec",
        "z": "3bdf067d13d3638c",
        "command": "netstat -tunip",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "FTP",
        "x": 350,
        "y": 1620,
        "wires": [
            [
                "7e7c8d8222179e9c"
            ],
            [],
            []
        ]
    },
    {
        "id": "7e7c8d8222179e9c",
        "type": "ui_text",
        "z": "3bdf067d13d3638c",
        "group": "a25745f191dc24a3",
        "order": 8,
        "width": 2,
        "height": 1,
        "name": "",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "x": 570,
        "y": 1620,
        "wires": []
    },
    {
        "id": "7f7f35effdb6f6ff",
        "type": "ui_button",
        "z": "3bdf067d13d3638c",
        "name": "",
        "group": "a25745f191dc24a3",
        "order": 7,
        "width": 3,
        "height": 1,
        "passthru": true,
        "label": "ftp",
        "tooltip": "",
        "color": "",
        "bgcolor": "green",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 170,
        "y": 1620,
        "wires": [
            [
                "68121a7e72576db3"
            ]
        ]
    },
    {
        "id": "d47c651596139030",
        "type": "exec",
        "z": "3bdf067d13d3638c",
        "command": "php5 --version",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 380,
        "y": 1700,
        "wires": [
            [
                "c9d5a236c938c8d0"
            ],
            [],
            []
        ]
    },
    {
        "id": "c9d5a236c938c8d0",
        "type": "ui_text",
        "z": "3bdf067d13d3638c",
        "group": "a25745f191dc24a3",
        "order": 10,
        "width": 2,
        "height": 1,
        "name": "",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "x": 570,
        "y": 1700,
        "wires": []
    },
    {
        "id": "449de752cd0d36f2",
        "type": "ui_button",
        "z": "3bdf067d13d3638c",
        "name": "",
        "group": "a25745f191dc24a3",
        "order": 9,
        "width": 3,
        "height": 1,
        "passthru": true,
        "label": "php5 version",
        "tooltip": "",
        "color": "",
        "bgcolor": "green",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 190,
        "y": 1700,
        "wires": [
            [
                "d47c651596139030"
            ]
        ]
    },
    {
        "id": "af62227e092b83e5",
        "type": "exec",
        "z": "3bdf067d13d3638c",
        "command": "grafana --version",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 390,
        "y": 1860,
        "wires": [
            [
                "f7b2379bcbfa2ce7"
            ],
            [],
            []
        ]
    },
    {
        "id": "f7b2379bcbfa2ce7",
        "type": "ui_text",
        "z": "3bdf067d13d3638c",
        "group": "a25745f191dc24a3",
        "order": 14,
        "width": 2,
        "height": 1,
        "name": "",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "x": 570,
        "y": 1860,
        "wires": []
    },
    {
        "id": "6bc9329a5175455f",
        "type": "ui_button",
        "z": "3bdf067d13d3638c",
        "name": "",
        "group": "a25745f191dc24a3",
        "order": 13,
        "width": 3,
        "height": 1,
        "passthru": true,
        "label": "grafana version",
        "tooltip": "",
        "color": "",
        "bgcolor": "green",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 200,
        "y": 1860,
        "wires": [
            [
                "af62227e092b83e5"
            ]
        ]
    },
    {
        "id": "7e77269a8b398557",
        "type": "exec",
        "z": "3bdf067d13d3638c",
        "command": "php -v",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 350,
        "y": 1940,
        "wires": [
            [
                "506693600f2dd3aa"
            ],
            [],
            []
        ]
    },
    {
        "id": "506693600f2dd3aa",
        "type": "ui_text",
        "z": "3bdf067d13d3638c",
        "group": "a25745f191dc24a3",
        "order": 16,
        "width": 2,
        "height": 1,
        "name": "",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "x": 570,
        "y": 1940,
        "wires": []
    },
    {
        "id": "8befcdcd19f7aa10",
        "type": "ui_button",
        "z": "3bdf067d13d3638c",
        "name": "",
        "group": "a25745f191dc24a3",
        "order": 15,
        "width": 3,
        "height": 1,
        "passthru": true,
        "label": "php version",
        "tooltip": "",
        "color": "",
        "bgcolor": "green",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 190,
        "y": 1940,
        "wires": [
            [
                "7e77269a8b398557"
            ]
        ]
    }
]